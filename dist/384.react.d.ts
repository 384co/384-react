// Generated by dts-bundle-generator v9.0.0

import * as __ from 'lib384/dist/384.esm.js';

export interface ChannelStoreType {
	id: any;
	key: any;
	alias: any;
	socket: __.SnackabraTypes.ChannelSocket;
	capacity: any;
	motd: any;
	owner: any;
	status: any;
	messages: __.SnackabraTypes.ChannelMessage[];
	getMessages: () => __.SnackabraTypes.ChannelMessage[];
	getOldMessages: (length: number | undefined) => Promise<unknown>;
	getStorageAmount: () => Promise<unknown>;
	replyEncryptionKey: (recipientPubkey: string) => Promise<unknown>;
	sendMessage: (body: {
		[key: string]: any;
	}, message?: string) => Promise<unknown>;
	lock: () => Promise<unknown>;
	create: (secret: string) => Promise<unknown>;
	connect: (messageCallback?: ((...data: any[]) => void) | undefined) => Promise<unknown>;
}
declare class ChannelStore implements ChannelStoreType {
	private _id;
	private _alias;
	private _status;
	private _key;
	private _keys;
	private _socket?;
	private _messages;
	private _ready;
	private _owner;
	private _capacity;
	private _motd;
	private _messageCallback?;
	private _visible;
	private _savingTimout?;
	workerPort: MessageChannel;
	readyResolver: () => void;
	ChannelStoreReadyFlag: Promise<unknown>;
	lastSeenMessage: number;
	SB: __.Snackabra;
	config: __.SBServerTypeAlias;
	constructor(config: __.SBServerTypeAlias, channelId?: string);
	private getChannel;
	private makeVisible;
	private save;
	getChannelMessages: () => Promise<void>;
	get id(): any;
	set id(id: any);
	get key(): any;
	set key(key: any);
	get keys(): any;
	set keys(keys: any);
	get messages(): __.ChannelMessage[];
	getMessages: () => __.ChannelMessage[];
	set messages(messages: __.ChannelMessage[]);
	set alias(alias: any);
	get alias(): any;
	get socket(): any;
	set socket(socket: any);
	get capacity(): number;
	set capacity(capacity: number);
	get motd(): string;
	set motd(motd: string);
	get status(): string;
	set status(status: string);
	get owner(): boolean;
	set owner(owner: boolean);
	getStorageAmount: () => any;
	getOldMessages: (length: number | undefined) => Promise<unknown>;
	replyEncryptionKey: (recipientPubkey: string) => Promise<CryptoKey>;
	sendMessage: (body: {
		[key: string]: any;
	}, message?: string) => Promise<string>;
	lock: () => Promise<unknown>;
	downloadData: () => Promise<false | {
		storage: {
			target: string;
		};
	}>;
	create: (secret: string) => Promise<unknown>;
	connect: (messageCallback?: ((...data: any[]) => void) | undefined) => Promise<boolean | this>;
	receiveMessage: (m: __.ChannelMessage, updateState?: boolean) => void;
}
export interface SnackabraStoreType {
	readyResolver: (value: unknown) => void;
	config: __.SnackabraTypes.SBServer;
	SB: __.Snackabra;
	ready: Promise<unknown>;
	channels: {
		[key: string]: ({
			id: string;
			alias?: string;
			key?: JsonWebKey;
			readyResolver?: any;
		} | ChannelStoreType);
	};
	contacts: {
		[key: string]: string;
	};
	join: (channelId: string, key?: JsonWebKey) => Promise<ChannelStore>;
	create: (secret: any, alias: any) => Promise<ChannelStore>;
	importKeys: (importedData: {
		roomData: {
			[x: string]: any;
		};
		roomMetadata: {
			[x: string]: any;
		};
		contacts: any;
	}) => Promise<boolean>;
	createContact: (alias: any, keyOrPubIdentifier: string | JsonWebKey) => string;
	getContact: (keyOrPubIdentifier: string | JsonWebKey) => {
		_id: string;
		name: string;
	};
}
declare class SnackabraStore implements SnackabraStoreType {
	readyResolver: (value: unknown) => void;
	config: __.SnackabraTypes.SBServer;
	private _channels;
	private _contacts;
	SB: __.Snackabra;
	ready: Promise<unknown>;
	constructor(sbConfig: __.SnackabraTypes.SBServer);
	private save;
	private getChannelsCache;
	private migrate;
	private finalizeMigration;
	private migrateChannel;
	mergeContacts: (contacts: any) => void;
	getContacts: () => Promise<void>;
	getContact: (keyOrPubIdentifier: string | JsonWebKey) => {
		_id: string;
		name: string;
	};
	createContact: (alias: any, keyOrPubIdentifier: string | JsonWebKey) => string;
	get channels(): {
		[key: string]: ChannelStoreType;
	};
	set channels(channels: {
		[key: string]: ChannelStoreType;
	});
	set contacts(contacts: {
		[key: string]: string;
	});
	get contacts(): {
		[key: string]: string;
	};
	join: (channelId: string, key?: JsonWebKey) => Promise<ChannelStore>;
	create: (secret: any, alias: any) => Promise<ChannelStore>;
	importKeys: (importedData: {
		roomData: {
			[x: string]: any;
		};
		roomMetadata: {
			[x: string]: any;
		};
		contacts: any;
	}) => Promise<boolean>;
}
export declare const stores: {
	SB: typeof SnackabraStore;
};
export type Stores = {
	snackabraStore: SnackabraStore;
	channelStore: ChannelStore;
};

export {};
