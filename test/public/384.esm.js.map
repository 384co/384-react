{
  "version": 3,
  "sources": ["../src/utils/b64.ts", "../../snackabra-jslib/src/snackabra.ts", "../src/boot/loadShard.ts", "../src/boot/tld.ts", "../src/boot/loaderLoader.ts", "../src/boot/serviceWorker.ts", "../src/boot/index.ts", "../src/crypto/strongpin.ts", "../src/crypto/index.ts", "../src/strongphrase/strongphrase.ts", "../src/strongphrase/index.ts", "../src/utils/simpleB64.ts", "../src/utils/index.ts", "../src/file/system.ts", "../src/file/index.ts", "../src/browser/files.ts", "../src/browser/images.ts", "../src/browser/fileTable.ts", "../src/browser/index.ts", "../src/channel/messageTypes.ts", "../src/channel/index.ts", "../src/snackabra/index.ts", "../src/index.ts"],
  "sourcesContent": ["// (c) 2023 384 (tm)\n\nconst b64lookup: Array<string> = [], urlLookup: Array<string> = [], revLookup: Array<number> = []\nconst CODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\nconst CODE_B64 = CODE + '+/', CODE_URL = CODE + '-_', PAD = '='\nfor (let i = 0, len = CODE_B64.length; i < len; ++i) {\n    b64lookup[i] = CODE_B64[i]\n    urlLookup[i] = CODE_URL[i]\n    revLookup[CODE_B64.charCodeAt(i)] = i\n}\nrevLookup['-'.charCodeAt(0)] = 62 // minus\nrevLookup['_'.charCodeAt(0)] = 63 // underscore\n\nfunction getLens(b64: string) {\n    const len = b64.length\n    let validLen = b64.indexOf(PAD)\n    if (validLen === -1) validLen = len\n    const placeHoldersLen = validLen === len ? 0 : 4 - (validLen % 4)\n    return [validLen, placeHoldersLen]\n}\n\nexport function base64ToArrayBuffer(str: string) {\n    switch (str.length % 4) {\n        case 2: str += '=='; break;\n        case 3: str += '='; break;\n    }\n    const [validLen, placeHoldersLen] = getLens(str);\n    const arr = new Uint8Array(((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen);\n    let tmp = 0, curByte = 0, i = 0;\n    const len = placeHoldersLen > 0 ? validLen - 4 : validLen;\n    for (i = 0; i < len; i += 4) {\n        const r0 = revLookup[str.charCodeAt(i)];\n        const r1 = revLookup[str.charCodeAt(i + 1)];\n        const r2 = revLookup[str.charCodeAt(i + 2)];\n        const r3 = revLookup[str.charCodeAt(i + 3)];\n        tmp = (r0 << 18) | (r1 << 12) | (r2 << 6) | (r3);\n        arr[curByte++] = (tmp >> 16) & 0xff;\n        arr[curByte++] = (tmp >> 8) & 0xff;\n        arr[curByte++] = (tmp) & 0xff;\n    }\n    if (placeHoldersLen === 2) {\n        const r0 = revLookup[str.charCodeAt(i)];\n        const r1 = revLookup[str.charCodeAt(i + 1)];\n        tmp = (r0 << 2) | (r1 >> 4);\n        arr[curByte++] = tmp & 0xff;\n    }\n    if (placeHoldersLen === 1) {\n        const r0 = revLookup[str.charCodeAt(i)];\n        const r1 = revLookup[str.charCodeAt(i + 1)];\n        const r2 = revLookup[str.charCodeAt(i + 2)];\n        tmp = (r0 << 10) | (r1 << 4) | (r2 >> 2);\n        arr[curByte++] = (tmp >> 8) & 0xff;\n        arr[curByte++] = tmp & 0xff;\n    }\n    return arr;\n}\n\nconst MAX_CHUNK_LENGTH = 16383 // must be multiple of 3\n\nfunction tripletToBase64(lookup: string[], num: number) {\n    return (\n        lookup[num >> 18 & 0x3f] +\n        lookup[num >> 12 & 0x3f] +\n        lookup[num >> 6 & 0x3f] +\n        lookup[num & 0x3f]\n    );\n}\n\nfunction encodeChunk(lookup: string[], view: DataView, start: number, end: number) {\n    let tmp: number;\n    const output = new Array((end - start) / 3);\n    for (let i = start, j = 0; i < end; i += 3, j++) {\n        tmp =\n            ((view.getUint8(i) << 16) & 0xff0000) +\n            ((view.getUint8(i + 1) << 8) & 0x00ff00) +\n            (view.getUint8(i + 2) & 0x0000ff);\n        output[j] = tripletToBase64(lookup, tmp);\n    }\n    return output.join('');\n}\n\nconst bs2dv = (bs: BufferSource) => bs instanceof ArrayBuffer\n    ? new DataView(bs)\n    : new DataView(bs.buffer, bs.byteOffset, bs.byteLength)\n\nexport function arrayBufferToBase64(buffer: ArrayBuffer | Uint8Array | null, variant: 'b64' | 'url' = 'url'): string {\n    if (buffer == null) throw new Error('arrayBufferToBase64() -> null paramater')\n    const view = bs2dv(buffer)\n    const len = view.byteLength\n    const extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n    const len2 = len - extraBytes\n    const parts = new Array(\n        Math.floor(len2 / MAX_CHUNK_LENGTH) + Math.sign(extraBytes)\n    )\n    const lookup = variant == 'url' ? urlLookup : b64lookup // defaults to url-safe except when overriden\n    const pad = ''\n    let j = 0\n    for (let i = 0; i < len2; i += MAX_CHUNK_LENGTH) {\n        parts[j++] = encodeChunk(\n            lookup,\n            view,\n            i,\n            (i + MAX_CHUNK_LENGTH) > len2 ? len2 : (i + MAX_CHUNK_LENGTH),\n        )\n    }\n    if (extraBytes === 1) {\n        const tmp = view.getUint8(len - 1);\n        parts[j] = (\n            lookup[tmp >> 2] +\n            lookup[(tmp << 4) & 0x3f] +\n            pad + pad\n        )\n    } else if (extraBytes === 2) {\n        const tmp = (view.getUint8(len - 2) << 8) + view.getUint8(len - 1)\n        parts[j] = (\n            lookup[tmp >> 10] +\n            lookup[(tmp >> 4) & 0x3f] +\n            lookup[(tmp << 2) & 0x3f] +\n            pad\n        );\n    }\n    return parts.join('')\n}", "/*\n   Copyright (C) 2020-2023 Magnusson Institute, All Rights Reserved\n\n   \"Snackabra\" is a registered trademark\n\n   Snackabra SDK - Server\n   See https://snackabra.io for more information.\n\n   This program is free software: you can redistribute it and/or\n   modify it under the terms of the GNU Affero General Public License\n   as published by the Free Software Foundation, either version 3 of\n   the License, or (at your option) any later version.\n\n   This program is distributed in the hope that it will be useful, but\n   WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n   Affero General Public License for more details.\n\n   You should have received a copy of the GNU Affero General Public\n   License along with this program.  If not, see www.gnu.org/licenses/\n\n*/\n\n/*\n  TODO\n  - add \"server\" to the channel descriptor\n*/\n\n// update package.json too; we flag 'pre' if it's a pre-release of \n// a version, e.g. if it's not published to npm etc yet\n// eg: const version = '1.1.25 (pre) build 02'\n// will be labeled '1.1.25' upon publishing\n\n// working on 2.0.0\nconst version = '2.0.0 (pre) build 03'\n\n/******************************************************************************************************/\n//#region Interfaces - Types\n\n// minimum when creating a new channel\nconst NEW_CHANNEL_MINIMUM_BUDGET = 32 * 1024 * 1024; // 8 MB\n\n\nexport interface SBServer {\n  /**\n   * The channel server is the server that handles channel creation,\n   * channel deletion, and channel access. It is also the server that\n   * handles channel messages.\n   */\n  channel_server: string,\n  /**\n   * The channel websocket is the websocket that handles channel\n   * messages. It is the same as the channel server, but with a\n   * different protocol.\n   */\n  channel_ws: string,\n  /**\n   * The storage server is the server that all \"shard\" (blob) storage\n   */\n  storage_server: string,\n  /**\n   * \"shard\" server is a more modern version of the storage server,\n   * generally acting as a caching and/or mirroring layer. It proxies\n   * any new storage to one or more storage servers, and handles\n   * it's own caching behavior. Generally, this will be the fastest\n   * interface, in particular for reading.\n   */\n  shard_server?: string\n}\n\n/**\n * SBChannelHandle\n *\n * Complete descriptor of a channel. 'key' is stringified 'jwk' key.\n * The key is always private. If it matches the channelId, then it's\n * an 'owner' key.\n */\nexport interface SBChannelHandle {\n  channelId: SBChannelId,\n  key: JsonWebKey,\n  server?: string\n}\n\ninterface WSProtocolOptions {\n  version?: number,\n  url: string, // not the user (client) url, but where the socket is\n  websocket?: WebSocket, // will have a value if we've connected\n  onOpen?: null | CallableFunction,\n  ready: boolean,\n  // onMessage?: null | CallableFunction,\n  onClose?: null | CallableFunction,\n  onError?: null | CallableFunction,\n  timeout?: number,\n  closed: boolean,\n  init?: { name: string },\n  // identity?: Identity,\n  // keys?: ChannelKeys,\n  // motd?: string,\n  // locked?: boolean,\n}\n\n// for future use / tighter typing\n// type StorableDataType = string | number | bigint | boolean | symbol | object\n\n// TODO: there are many uses of 'Dictionary<any>' that should be tightened up\ninterface Dictionary<T> {\n  [index: string]: T;\n}\n\n// These are 384 bit identifiers encoded as 48x ~b64 characters\n// (see SB384.hash for details)\nexport type SB384Hash = string\nexport type SBChannelId = SB384Hash\nexport type SBUserId = SB384Hash\n\ninterface ChannelData {\n  roomId?: SBChannelId\n  channelId?: SBChannelId;\n  ownerKey: string;\n  encryptionKey: string;\n  signKey: string;\n  motherChannel?: SBChannelId;\n  storageToken?: string; // used internally for storage budget authentication\n  SERVER_SECRET?: string; // used internally for storage budget authentication (dev or local servers only)\n  size?: number; // used internally\n}\n\ninterface ImageMetaData {\n  imgObjVersion?: SBObjectHandleVersions, // if empty is type '1', new objects need to be '2'\n  imageId?: string,\n  imageKey?: string,\n  previewId?: string,\n  previewKey?: string,\n  // nonce and salt not needed, but if it's there, we do extra checks\n  previewNonce?: string,\n  previewSalt?: string\n}\n\n/**\n   for example the incoming message will look like this (after decryption)\n\n   @example\n  ```ts\n    {\n      \"encrypted\":false,\n      \"contents\":\"Hello from test04d!\",\n      \"sign\":\"u7zAM-1fNLZjmuayOkwWvXTBGqMEimOuzp1DJGX4ECg\",\n      \"image\":\"\",\n      \"imageMetaData\":{},\n      \"sender_pubKey\":\n          {\n            \"crv\":\"P-384\",\"ext\":true,\"key_ops\":[],\"kty\":\"EC\",\n            \"x\":\"edqHd4aUn7dGsuDMQxtvzuw-Q2N7l77HBW81KvWj9qtzU7ab-sFHUBqogg2PKihj\",\n            \"y\":\"Oqp27bXL4RUcAHpWUEFHZdyEuhTo8_8oyTsAKJDk1g_NQOA0FR5Sy_8ViTTWS9wT\"\n          },\n      \"sender_username\":\"TestBot\",\n      \"image_sign\":\"3O0AYKthtWWYUX3AWDmdU4kTR49UyNyaA937CfKtcQw\",\n      \"imageMetadata_sign\":\"4LmewpsH6TcRhHYQLivd4Ce87SI1AJIaezhJB5sdD7M\"\n    }\n    ```\n\n  */\nexport interface ChannelMessage {\n  type?: ChannelMessageTypes,\n  keys?: ChannelKeyStrings,\n  _id?: string,\n  id?: string,\n  timestamp?: number,\n  timestampPrefix?: string, // '0'/'1' - 42 of them\n  channelID?: SBChannelId, // base64 - 64 chars (512 bits)\n  control?: boolean,\n  encrypted?: boolean,\n  encrypted_contents?: EncryptedContents,\n  contents?: string, // if present means unencrypted\n  text?: string, // backwards compat, same as contents, TODO: should be removed\n  sign?: string,\n  image?: string,\n  image_sign?: string,\n  imageMetaData?: ImageMetaData,\n  imageMetadata_sign?: string,\n  motd?: string,\n  ready?: boolean,\n  roomLocked?: boolean,\n  sender_pubKey?: JsonWebKey,\n  sender_username?: string,\n  system?: boolean,\n  user?: { name: string, _id?: JsonWebKey },\n  verificationToken?: string,\n  replyTo?: JsonWebKey, // used for old design for whispers.  todo: clean up\n  // whisper: if present, it's the unwrapped 1:1 contents\n  whisper?: string,\n  whispered?: boolean,\n  // 'new': intended recipient; means contents are further encrypted\n  //        using key derived from 'sender_pubKey' and our own (private) key;\n  //        jslib will only decode if it's intended for us (that's the only\n  //        way we can decrypt it anyway)\n  sendTo?: SBUserId, // public (hash) of recipient\n}\n\n// interface ChannelAckMessage {\n//   type: 'ack',\n//   _id: string,\n// }\n\n/**\n * ChannelKeys\n * \n * All keys relevant for a given channel, in decoded (CryptoKey) form.\n * They are sent over channels as a message (see ChannelKeysMessage);\n * in export/import code they may be in the intermediary form of\n * strings (see ChannelKeyStrings).\n * \n *\n * @example\n *\n * { \"ready\": true,\n *    \"keys\": {\n *            \"ownerKey\": \"{\\\"crv\\\":\\\"P-384\\\",\\\"ext\\\":true,\\\"key_ops\\\":[],\\\"kty\\\":\\\"EC\\\",\n *                        \\\"x\\\":\\\"9s17B4i0Cuf_w9XN_uAq2DFePOr6S3sMFMA95KjLN8akBUWEhPAcuMEMwNUlrrkN\\\",\n *                        \\\"y\\\":\\\"6dAtcyMbtsO5ufKvlhxRsvjTmkABGlTYG1BrEjTpwrAgtmn6k25GR7akklz9klBr\\\"}\",\n *            \"guestKey\": \"{\\\"crv\\\":\\\"P-384\\\",\\\"ext\\\":true,\\\"key_ops\\\":[],\\\"kty\\\":\\\"EC\\\",\n *                         \\\"x\\\":\\\"Lx0eJcbNuyEfHDobWaZqgy9UO7ppxVIsEpEtvbzkAlIjySh9lY2AvgnACREO6QXD\\\",\n *                         \\\"y\\\":\\\"zEHPgpsl4jge_Q-K6ekuzi2bQOybnaPT1MozCFQJnXEePBX8emkHriOiwl6P8BAS\\\"}\",\n *            \"encryptionKey\": \"{\\\"alg\\\":\\\"A256GCM\\\",\\\"ext\\\":true,\n *                             \\\"k\\\":\\\"F0sQTTLXDhuvvmgGQLzMoeHPD-SJlFyhfOD-cqejEOU\\\",\n *                             \\\"key_ops\\\":[\\\"encrypt\\\",\\\"decrypt\\\"],\\\"kty\\\":\\\"oct\\\"}\",\n *            \"signKey\": \"{\\\"crv\\\":\\\"P-384\\\",\n *                        \\\"d\\\":\\\"KCJHDZ34XgVFsS9-sU09HFzXZhnGCvnDgJ5a8GTSfjuJQaq-1N2acvchPRhknk8B\\\",\n *                        \\\"ext\\\":true,\\\"key_ops\\\":[\\\"deriveKey\\\"],\\\"kty\\\":\\\"EC\\\",\n *                        \\\"x\\\":\\\"rdsyBle0DD1hvp2OE2mINyyI87Cyg7FS3tCQUIeVkfPiNOACtFxi6iP8oeYt-Dge\\\",\n *                        \\\"y\\\":\\\"qW9VP72uf9rgUU117G7AfTkCMncJbT5scIaIRwBXfqET6FYcq20fwSP7R911J2_t\\\"}\"\n *             },\n * \"motd\": \"\",\n * \"roomLocked\": false}\n */\nexport interface ChannelKeys {\n  // these come from the channel server;\n  ownerKey: CryptoKey,\n  ownerPubKeyX: string, // the 'x' part of ownerKey, used as channelID / name\n  guestKey?: CryptoKey,\n  encryptionKey: CryptoKey,\n  signKey: CryptoKey,\n  lockedKey?: JsonWebKey,\n  // derived from the above and used for signing messages we send:\n  // channelSignKey: CryptoKey, // moved to ChannelApi\n  publicSignKey: CryptoKey,\n  // our identity in case we want easy access to that:\n  // update: not generic enough, servers don't have this\n  privateKey?: CryptoKey\n}\n\n// // Roughly what it looks like on the wire from a client:\n// {\n//   \"roomId\": \"DL5hgKneBl_...tMLCv4fEyWnxE01O\",\n//   \"ownerKey\": \"{\\\"crv\\\":\\\"P-384\\\",\\\"ext\\\":true,\\\"key_ops\\\":[],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"A0rUue9TlSgK...Nx54d3\\\",\\\"y\\\":\\\"uGfIqc....fP1tF66jL\\\"}\",\n//   \"encryptionKey\": \"{\\\"alg\\\":\\\"A256GCM\\\",\\\"ext\\\":true,\\\"k\\\":\\\"62mgVb...Shmc\\\",\\\"key_ops\\\":[\\\"encrypt\\\",\\\"decrypt\\\"],\\\"kty\\\":\\\"oct\\\"}\",\n//   \"signKey\": \"{\\\"crv\\\":\\\"P-384\\\",\\\"d\\\":\\\"Vw2HwY...oYl6qJ\\\",\\\"ext\\\":true,\\\"key_ops\\\":[\\\"deriveKey\\\"],\\\"kty\\\":\\\"EC\\\",\\\"x\\\":\\\"6lz3m...v9J2IjCj8\\\",\\\"y\\\":\\\"M6Ta8...ncnH1G\\\"}\",\n//   \"SERVER_SECRET\": \"...\"\n// }\n\ninterface ChannelKeyStrings {\n  encryptionKey: string,\n  guestKey?: string,\n  ownerKey: string,\n  signKey: string,\n  lockedKey?: string,\n  error?: string,\n}\n\ninterface ChannelKeysMessage {\n  type: 'channelKeys',\n  ready: boolean,\n  keys: ChannelKeyStrings,\n  motd: string,\n  roomLocked: boolean,\n}\n\nexport interface ChannelAdminData {\n  room_id?: SBChannelId,\n  join_requests: Array<JsonWebKey>,\n  capacity: number,\n}\n\n/** Encryptedcontents\n\n    SB standard wrapping encrypted messages.\n\n    Encryption is done with AES-GCM, 16 bytes of salt, The\n    ``contents`` are url-safe base64, same thing with the nonce (iv),\n    depending on if it's internal or over wire.\n */\nexport interface EncryptedContents {\n  content: string | ArrayBuffer,\n  iv: string | Uint8Array\n  // salt: string | Uint8Array,\n}\n\n/**\n * Same as EncryptedContents interface, but binary view enforced\n */\nexport interface EncryptedContentsBin {\n  content: ArrayBuffer,\n  iv: Uint8Array,\n}\n\n// set by creation of Snackabra object\nvar DBG = false; // this should not be checked in as 'true'\nvar DBG2 = false; // internal detailed debugging\n\n/**\n * This is the standard (most common) channel message. It matches\n * directly to a 'chat' message. But the contents can be anything.\n */\ninterface ChannelEncryptedMessage {\n  type?: 'encrypted',\n\n  // base64 - 64 chars (512 bits), e.g:\n  // 'wDUMRbcfFhdmByuwMhFyR46MRlcZh-6gKRUhSPkWEQLSRUPE8_jqixV3VQevTDBy'\n  channelID?: SBChannelId,\n\n  // fourty-two (42) 0s and 1s as string, e.g.:\n  // '011000001110001011010110101010000100000110'\n  timestampPrefix?: string,\n\n  _id: string, // backwards compatibility (channelID + timestampPrefix)\n\n  encrypted_contents?: EncryptedContentsBin, // enforcing binary view internally\n\n  contents?: string,\n\n}\n\nexport type ChannelMessageTypes = 'ack' | 'keys' | 'invalid' | 'ready' | 'encrypted'\n\n/**\n * SBMessageContents\n * \n * SBMessage contents are either a string, or SBMessageContents;\n * the general case is the latter, which can have a message text,\n * and an image. The image should be in a format such that the\n * thumbnail is embedded ('image'), and the full image is referenced\n * by 'imageId' (full image or document), and optionally 'previewId',\n * which is a smaller version of the image (or whatever is in 'image'),\n * with the presumption that apps can chose an intermediate view\n * of whatever is in 'image'. \n */\ninterface SBMessageContents {\n  contents: string,\n  imgObjVersion?: SBObjectHandleVersions, // if empty is type '1', new objects need to be '2'\n  image: string,\n  imageMetaData?: ImageMetaData,\n  image_sign?: string,\n  imageMetadata_sign?: string,\n  sender_pubKey?: JsonWebKey,\n  sender_username?: string,\n  encrypted: boolean,\n  isVerfied: boolean,\n  sign: string,\n}\n\n\n\n/**\n * SBObjectType\n * \n * SBObjectType is a single character string that indicates the\n * type of object. Currently, the following types are supported:\n * \n * - 'f' : full object (e.g. image, this is the most common)\n * - 'p' : preview object (e.g. thumbnail)\n * - 'b' : block/binary object (e.g. 64KB block)\n * - 't' : test object (for testing purposes)\n * \n * The 't' type is used for testing purposes, and you should\n * not expect it to have any particular SLA or longevity.\n * \n * Note that when you retrieve any object, you must have the\n * matching object type.\n */\nexport type SBObjectType = 'f' | 'p' | 'b' | 't'\nexport type SBObjectHandleVersions = '1' | '2'\nconst currentSBOHVersion: SBObjectHandleVersions = '2'\n\n// TODO: we haven't modularized jslib yet, when we do this\n//       will be superfluous\nexport namespace Interfaces {\n\n  // this exists as both interface and class, but the class\n  // is mostly used internally, and the interface is what\n  // you'll use to communicate with the API\n  export interface SBObjectHandle_base {\n    [SB_OBJECT_HANDLE_SYMBOL]?: boolean,\n    version?: SBObjectHandleVersions,\n    type?: SBObjectType,\n    // and currently you also need to keep track of this,\n    // but you can start sharing / communicating the\n    // object before it's resolved: among other things it\n    // serves as a 'write-through' verification\n    verification?: Promise<string> | string,\n    // you'll need these in case you want to track an object\n    // across future (storage) servers, but as long as you\n    // are within the same SB servers you can request them.\n    iv?: Uint8Array | string,\n    salt?: Uint8Array | string,\n    // the following are optional and not tracked by\n    // shard servers etc, but facilitates app usage\n    fileName?: string, // by convention will be \"PAYLOAD\" if it's a set of objects\n    dateAndTime?: string, // optional: time of shard creation\n    shardServer?: string, // optionally direct a shard to a specific server (especially for reads)\n    fileType?: string, // optional: file type (mime)\n    lastModified?: number, // optional: last modified time (of underlying file, if any)\n    actualSize?: number, // optional: actual size of underlying file, if any\n    savedSize?: number, // optional: size of shard (may be different from actualSize)\n  }\n\n  // for long-term storage you only need these:\n  //   id: string, key: string, // b64 encoding (being deprecated)\n  //   id32?: Base62Encoded, key32?: Base62Encoded, // array32 format of key (new default)\n\n  export interface SBObjectHandle_v1 extends SBObjectHandle_base {\n    version: '1',\n    id: string, // in v1 these are base64 encoded\n    key: string,\n    // some handles were created with version 1 and id32/key32 as well\n    id32?: Base62Encoded,\n    key32?: Base62Encoded,\n  }\n\n  export interface SBObjectHandle_v2 extends SBObjectHandle_base {\n    version: '2',\n    // in v2 these are base62 encoded only\n    id: Base62Encoded,\n    key: Base62Encoded,\n  }\n\n  export type SBObjectHandle = SBObjectHandle_v1 | SBObjectHandle_v2\n}\n\nexport interface SBObjectMetadata {\n  [SB_OBJECT_HANDLE_SYMBOL]: boolean;\n  version: SBObjectHandleVersions;\n  type: SBObjectType;\n  id: Base62Encoded;\n  key: Base62Encoded;\n  paddedBuffer: ArrayBuffer;\n  iv: Uint8Array;\n  salt: Uint8Array;\n}\n\n//#endregion - Interfaces - Types\n\n/******************************************************************************************************/\n//#region - MessageBus class\n\n/**\n * SB simple events (mesage bus) class\n */\nexport class MessageBus {\n  bus: Dictionary<any> = {}\n\n  /**\n   * Safely returns handler for any event\n   */\n  #select(event: string) {\n    return this.bus[event] || (this.bus[event] = []);\n  }\n\n  /**\n   * Subscribe. 'event' is a string, special case '*' means everything\n   *  (in which case the handler is also given the message)\n   */\n  subscribe(event: string, handler: CallableFunction) {\n    this.#select(event).push(handler);\n  }\n\n  /**\n   * Unsubscribe\n   */\n  unsubscribe(event: string, handler: CallableFunction) {\n    let i = -1;\n    if (this.bus[event]) {\n      if ((i = this.bus[event].findLastIndex((e: unknown) => e == handler)) != -1) {\n        this.bus[event].splice(i, 1);\n      } else {\n        console.info(`fyi: asked to remove a handler but it's not there`);\n      }\n    } else {\n      console.info(`fyi: asked to remove a handler but the event is not there`);\n    }\n  }\n\n  /**\n   * Publish\n   */\n  publish(event: string, ...args: unknown[]) {\n    for (const handler of this.#select('*')) {\n      handler(event, ...args);\n    }\n    for (const handler of this.#select(event)) {\n      handler(...args);\n    }\n  }\n}\n\n//#endregion\n\n/******************************************************************************************************/\n//#region - SB internal utility functions\n\n/**\n * SBFetch()\n *\n * A \"safe\" fetch() that over time integrates with SB mesh.\n *\n * See also :ref:`design note 5 <DN005>` for issues of connectivity.\n *\n * TODO: this will be integrated with SB (Snackabra) object and exposed\n *       to platform API for possible app use.\n *\n * @param input - the URL to fetch\n * @param init - the options for the request\n */\nfunction SBFetch(input: RequestInfo | URL, init?: RequestInit): Promise<Response> {\n  // console.log(\"SBFetch()\"); console.log(input); console.log(init);\n  // if (navigator.onLine === false) console.info(\"Note: you are offline, according to the browser\") /* return Promise.reject(new Error(\"you are offline\")) */\n  // check if the string \"a32.\" is in the URL, if so, we need to throw an error\n  // if (init) return fetch(input, init)\n  // else return fetch(input, { method: 'GET' /*, credentials: 'include' */ })\n\n  // Extract the URL as a string\n  const url = typeof input === 'string' ? input : input instanceof URL ? input.href : input.url;\n  // Check for the substring \"a32.\"  - this is for transitioning code, a32 internal coding should not \"leak\"\n  if (url.includes(\"a32.\")) {\n    return Promise.reject(new Error(\"URL contains forbidden substring 'a32.'\"));\n  }\n  // Perform the fetch operation\n  return fetch(input, init ?? { method: 'GET' });\n}\n\n/** @private */\nfunction WrapError(e: any) {\n  if (e instanceof Error) return e;\n  else return new Error(String(e));\n}\n\n/** @private */\nfunction _sb_exception(loc: string, msg: string) {\n  const m = '<< SB lib error (' + loc + ': ' + msg + ') >>';\n  // for now disabling this to keep node testing less noisy\n  // console.error(m);\n  throw new Error(m);\n}\n\n// internal - general handling of paramaters that might be promises\n// (basically the \"anti\" of resolve, if it's *not* a promise then\n// it becomes one\n/** @private */\n\n// function _sb_resolve(val: any) {\n//   if (val.then) {\n//     // it's already a promise\n//     // console.log('it is a promise')\n//     return val;\n//   } else {\n//     // console.log('it was not a promise')\n//     return new Promise((resolve) => resolve(val));\n//   }\n// }\n\n// internal - handle assertions\n/** @private */\nfunction _sb_assert(val: unknown, msg: string) {\n  if (!(val)) {\n    const m = `<< SB assertion error: ${msg} >>`;\n    // debugger;\n    throw new Error(m);\n  }\n}\n\n// used to create NEW channel\n/** @private */\nasync function newChannelData(keys: JsonWebKey | null): Promise<{ channelData: ChannelData, exportable_privateKey: Dictionary<any> }> {\n  const owner384 = new SB384(keys)\n  await owner384.ready\n  // const ownerKeyPair = await owner384.ready.then((x) => x.keyPair!)\n  // const exportable_privateKey: Dictionary<any> = await crypto.subtle.exportKey('jwk', ownerKeyPair.privateKey);\n  // const exportable_pubKey: Dictionary<any> = await crypto.subtle.exportKey('jwk', ownerKeyPair.publicKey);\n  const exportable_pubKey = owner384.exportable_pubKey\n  const exportable_privateKey = owner384.exportable_privateKey\n  const channelId = owner384.hash\n  const encryptionKey: CryptoKey = await crypto.subtle.generateKey({\n    name: 'AES-GCM',\n    length: 256\n  }, true, ['encrypt', 'decrypt']);\n  const exportable_encryptionKey: Dictionary<any> = await crypto.subtle.exportKey('jwk', encryptionKey);\n  const signKeyPair: CryptoKeyPair = await crypto.subtle.generateKey({\n    name: 'ECDH', namedCurve: 'P-384'\n  }, true, ['deriveKey']);\n  const exportable_signKey: Dictionary<any> = await crypto.subtle.exportKey('jwk', signKeyPair.privateKey);\n  const channelData: ChannelData = {\n    roomId: channelId,\n    ownerKey: JSON.stringify(exportable_pubKey),\n    encryptionKey: JSON.stringify(exportable_encryptionKey),\n    signKey: JSON.stringify(exportable_signKey),\n  };\n  return { channelData: channelData, exportable_privateKey: exportable_privateKey }\n}\n\n//#endregion - SB internal utility functions\n\n/******************************************************************************************************/\n//#region - SBCryptoUtils - crypto and translation stuff used by SBCrypto etc\n\n/**\n * Force EncryptedContents object to binary (interface\n * supports either string or arrays). String contents\n * implies base64 encoding.\n */\nexport function encryptedContentsMakeBinary(o: EncryptedContents): EncryptedContentsBin {\n  try {\n    let t: ArrayBuffer\n    let iv: Uint8Array\n    if (DBG2) {\n      console.log(\"=+=+=+=+ processing content\")\n      console.log(o.content.constructor.name)\n    }\n    if (typeof o.content === 'string') {\n      try {\n        t = base64ToArrayBuffer(decodeURIComponent(o.content))\n      } catch (e) {\n        throw new Error(\"EncryptedContents is string format but not base64 (?)\")\n      }\n    } else {\n      // console.log(structuredClone(o))\n      const ocn = o.content.constructor.name\n      _sb_assert((ocn === 'ArrayBuffer') || (ocn === 'Uint8Array'), 'undetermined content type in EncryptedContents object')\n      t = o.content\n    }\n    if (DBG2) console.log(\"=+=+=+=+ processing nonce\")\n    if (typeof o.iv === 'string') {\n      if (DBG2) { console.log(\"got iv as string:\"); console.log(structuredClone(o.iv)); }\n      iv = base64ToArrayBuffer(decodeURIComponent(o.iv))\n      if (DBG2) { console.log(\"this was turned into array:\"); console.log(structuredClone(iv)) }\n    } else if ((o.iv.constructor.name === 'Uint8Array') || (o.iv.constructor.name === 'ArrayBuffer')) {\n      if (DBG2) { console.log(\"it's an array already\") }\n      iv = new Uint8Array(o.iv)\n    } else {\n      if (DBG2) console.log(\"probably a dictionary\");\n      try {\n        iv = new Uint8Array(Object.values(o.iv))\n      } catch (e: any) {\n        if (DBG) { console.error(\"ERROR: cannot figure out format of iv (nonce), here's the input object:\"); console.error(o.iv); }\n        _sb_assert(false, \"undetermined iv (nonce) type, see console\")\n      }\n    }\n    if (DBG2) { console.log(\"decided on nonce as:\"); console.log(iv!) }\n    _sb_assert(iv!.length == 12, `encryptedContentsMakeBinary(): nonce should be 12 bytes but is not (${iv!.length})`)\n    return { content: t, iv: iv! }\n  } catch (e: any) {\n    console.error('encryptedContentsMakeBinary() failed:')\n    console.error(e)\n    console.trace()\n    console.log(e.stack)\n    throw e\n  }\n}\n\n/**\n * Fills buffer with random data\n */\nexport function getRandomValues(buffer: Uint8Array) {\n  if (buffer.byteLength < (4096)) {\n    return crypto.getRandomValues(buffer)\n  } else {\n    // larger blocks should really only be used for testing\n    _sb_assert(!(buffer.byteLength % 1024), 'getRandomValues(): large requested blocks must be multiple of 1024 in size')\n    // console.log(`will set ${buffer.byteLength} random bytes`)\n    // const t0 = Date.now()\n    let i = 0\n    try {\n      for (i = 0; i < buffer.byteLength; i += 1024) {\n        let t = new Uint8Array(1024)\n        // this doesn't actually have enough entropy, we should just hash here anyweay\n        crypto.getRandomValues(t)\n        // console.log(`offset is ${i}`)\n        buffer.set(t, i)\n      }\n    } catch (e: any) {\n      console.log(`got an error on index i=${i}`)\n      console.log(e)\n      console.trace()\n    }\n    // console.log(`created ${buffer.byteLength} random byte buffer in ${Date.now() - t0} millisends`)\n    return buffer\n  }\n}\n\n// for later use - message ID formats\nconst messageIdRegex = /([A-Za-z0-9+/_\\-=]{64})([01]{42})/\n\n// Strict b64 check:\n// const b64_regex = new RegExp('^(?:[A-Za-z0-9+/_\\-]{4})*(?:[A-Za-z0-9+/_\\-]{2}==|[A-Za-z0-9+/_\\-]{3}=)?$')\n// But we will go (very) lenient:\nconst b64_regex = /^([A-Za-z0-9+/_\\-=]*)$/\n// stricter - only accepts URI friendly:\n// const url_regex = /^([A-Za-z0-9_\\-=]*)$/\n\n/**\n * Returns 'true' if (and only if) string is well-formed base64.\n * Works same on browsers and nodejs.\n */\nfunction _assertBase64(base64: string) {\n  return b64_regex.test(base64)\n  // // return (b64_regex.exec(base64)?.[0] === base64);\n  // const z = b64_regex.exec(base64)\n  // if (z) return (z[0] === base64); else return false;\n}\nconst isBase64Encoded = _assertBase64 // alias\n\n// refactor helper - replace encodeURIComponent everywhere\n/** @private */\nfunction ensureSafe(base64: string): string {\n  const z = b64_regex.exec(base64)\n  _sb_assert((z) && (z[0] === base64), 'ensureSafe() tripped: something is not URI safe')\n  return base64\n}\n\n// this also functions as a place to identify \"internal\" from\n// \"external\" uses of A32 format (eg users of the library should\n// never see the 'a32.' prefix directly)\nfunction stripA32(value: string | Base62Encoded): string {\n  if ((value) && (value !== '')) {\n    if (value.startsWith('a32.'))\n      console.warn(\"[stripA32] removing 'a32.' prefix, these should be cleaned up by now\")\n    return value.replace(/^a32\\./, '')\n  } else {\n    console.warn(\"[stripA32] asked to strip an empty/missing string?\")\n    return ''\n  }\n}\n\n/*\n  we use URI/URL 'safe' characters in our b64 encoding to avoid having\n  to perform URI encoding, which also avoids issues with composed URI\n  strings (such as when copy-pasting). however, that means we break\n  code that tries to use 'regular' atob(), because it's not as forgiving.\n  this is also referred to as RFC4648 (section 5). note also that when\n  we generate GUID from public keys, we iterate hashing until '-' and '_'\n  are not present in the hash, which does reduce entropy by about three\n  (3) bits (out of 384).\n*/\n\n// For possible future use:\n// RFC 3986 (updates 1738 and obsoletes 1808, 2396, and 2732)\n// type ALPHA = 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'\n// type alpha = 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z'\n// type digit = '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'\n// type genDelims = ':' | '/' | '?' | '#' | '[' | ']' | '@'\n// type subDelims = '!' | '$' | '&' | \"'\" | '(' | ')' | '*' | '+' | ',' | ';' | '='\n// type unReserved = ALPHA | alpha | digit | '-' | '.' | '_' | '~'\n\n/**\n * based on https://github.com/qwtel/base64-encoding/blob/master/base64-js.ts\n */\nconst b64lookup: string[] = []\nconst urlLookup: string[] = []\nconst revLookup: number[] = []\nconst CODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\nconst CODE_B64 = CODE + '+/'\nconst CODE_URL = CODE + '-_'\nconst PAD = '='\nconst MAX_CHUNK_LENGTH = 16383 // must be multiple of 3\nfor (let i = 0, len = CODE_B64.length; i < len; ++i) {\n  b64lookup[i] = CODE_B64[i]\n  urlLookup[i] = CODE_URL[i]\n  revLookup[CODE_B64.charCodeAt(i)] = i\n}\nrevLookup['-'.charCodeAt(0)] = 62 // minus\nrevLookup['_'.charCodeAt(0)] = 63 // underscore\n\nfunction getLens(b64: string) {\n  const len = b64.length\n  let validLen = b64.indexOf(PAD)\n  if (validLen === -1) validLen = len\n  const placeHoldersLen = validLen === len ? 0 : 4 - (validLen % 4)\n  return [validLen, placeHoldersLen]\n}\n\n/** @private */\nfunction _byteLength(validLen: number, placeHoldersLen: number) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen;\n}\n\n/**\n * Standardized 'atob()' function, e.g. takes the a Base64 encoded\n * input and decodes it. Note: always returns Uint8Array.\n * Accepts both regular Base64 and the URL-friendly variant,\n * where `+` => `-`, `/` => `_`, and the padding character is omitted.\n *\n * @param str - string in either regular or URL-friendly representation.\n * @return - returns decoded binary result\n */\nexport function base64ToArrayBuffer(str: string): Uint8Array {\n  if (!_assertBase64(str)) throw new Error(`invalid character in string '${str}'`)\n  let tmp: number\n  switch (str.length % 4) {\n    case 2: str += '=='; break;\n    case 3: str += '='; break;\n  }\n  const [validLen, placeHoldersLen] = getLens(str);\n  const arr = new Uint8Array(_byteLength(validLen, placeHoldersLen));\n  let curByte = 0;\n  const len = placeHoldersLen > 0 ? validLen - 4 : validLen;\n  let i: number;\n  for (i = 0; i < len; i += 4) {\n    const r0: number = revLookup[str.charCodeAt(i)];\n    const r1: number = revLookup[str.charCodeAt(i + 1)];\n    const r2: number = revLookup[str.charCodeAt(i + 2)];\n    const r3: number = revLookup[str.charCodeAt(i + 3)];\n    tmp = (r0 << 18) | (r1 << 12) | (r2 << 6) | (r3);\n    arr[curByte++] = (tmp >> 16) & 0xff;\n    arr[curByte++] = (tmp >> 8) & 0xff;\n    arr[curByte++] = (tmp) & 0xff;\n  }\n  if (placeHoldersLen === 2) {\n    const r0 = revLookup[str.charCodeAt(i)];\n    const r1 = revLookup[str.charCodeAt(i + 1)];\n    tmp = (r0 << 2) | (r1 >> 4);\n    arr[curByte++] = tmp & 0xff;\n  }\n  if (placeHoldersLen === 1) {\n    const r0 = revLookup[str.charCodeAt(i)];\n    const r1 = revLookup[str.charCodeAt(i + 1)];\n    const r2 = revLookup[str.charCodeAt(i + 2)];\n    tmp = (r0 << 10) | (r1 << 4) | (r2 >> 2);\n    arr[curByte++] = (tmp >> 8) & 0xff;\n    arr[curByte++] = tmp & 0xff;\n  }\n  return arr;\n}\n\nfunction tripletToBase64(lookup: string[], num: number) {\n  return (\n    lookup[num >> 18 & 0x3f] +\n    lookup[num >> 12 & 0x3f] +\n    lookup[num >> 6 & 0x3f] +\n    lookup[num & 0x3f]\n  );\n}\n\nfunction encodeChunk(lookup: string[], view: DataView, start: number, end: number) {\n  let tmp: number;\n  const output = new Array((end - start) / 3);\n  for (let i = start, j = 0; i < end; i += 3, j++) {\n    tmp =\n      ((view.getUint8(i) << 16) & 0xff0000) +\n      ((view.getUint8(i + 1) << 8) & 0x00ff00) +\n      (view.getUint8(i + 2) & 0x0000ff);\n    output[j] = tripletToBase64(lookup, tmp);\n  }\n  return output.join('');\n}\n\nconst bs2dv = (bs: BufferSource) => bs instanceof ArrayBuffer\n  ? new DataView(bs)\n  : new DataView(bs.buffer, bs.byteOffset, bs.byteLength)\n\n/**\n * Compare buffers\n */\nexport function compareBuffers(a: Uint8Array | ArrayBuffer | null, b: Uint8Array | ArrayBuffer | null): boolean {\n  if (typeof a != typeof b) return false\n  if ((a == null) || (b == null)) return false\n  const av = bs2dv(a)\n  const bv = bs2dv(b)\n  if (av.byteLength !== bv.byteLength) return false\n  for (let i = 0; i < av.byteLength; i++)  if (av.getUint8(i) !== bv.getUint8(i)) return false\n  return true\n}\n\n/**\n * Standardized 'btoa()'-like function, e.g., takes a binary string\n * ('b') and returns a Base64 encoded version ('a' used to be short\n * for 'ascii').\n *\n * @param buffer - binary string\n * @param variant - 'b64' or 'url'\n * @return - returns Base64 encoded string\n */\nfunction arrayBufferToBase64(buffer: ArrayBuffer | Uint8Array | null, variant: 'b64' | 'url' = 'url'): string {\n  if (buffer == null) {\n    _sb_exception('L509', 'arrayBufferToBase64() -> null paramater')\n    return ''\n  } else {\n    // const view = bs2dv(bufferSource)\n    // const view = new DataView(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n    // console.log(buffer)\n    // const view = new DataView(buffer)\n    const view = bs2dv(buffer)\n    const len = view.byteLength\n    const extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n    const len2 = len - extraBytes\n    const parts = new Array(\n      Math.floor(len2 / MAX_CHUNK_LENGTH) + Math.sign(extraBytes)\n    )\n    const lookup = variant == 'url' ? urlLookup : b64lookup // defaults to url-safe except when overriden\n    const pad = ''\n    let j = 0\n    for (let i = 0; i < len2; i += MAX_CHUNK_LENGTH) {\n      parts[j++] = encodeChunk(\n        lookup,\n        view,\n        i,\n        (i + MAX_CHUNK_LENGTH) > len2 ? len2 : (i + MAX_CHUNK_LENGTH),\n      )\n    }\n    if (extraBytes === 1) {\n      const tmp = view.getUint8(len - 1);\n      parts[j] = (\n        lookup[tmp >> 2] +\n        lookup[(tmp << 4) & 0x3f] +\n        pad + pad\n      )\n    } else if (extraBytes === 2) {\n      const tmp = (view.getUint8(len - 2) << 8) + view.getUint8(len - 1)\n      parts[j] = (\n        lookup[tmp >> 10] +\n        lookup[(tmp >> 4) & 0x3f] +\n        lookup[(tmp << 2) & 0x3f] +\n        pad\n      );\n    }\n    return parts.join('')\n  }\n}\n\n// Define the base62 dictionary\n// We want the same sorting order as ASCII, so we go with 0-9A-Za-z\nconst base62 = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\nconst base62Regex = /^(a32\\.)?[0-9A-Za-z]{43}$/;\n// branded string type\n\n/**\n   A 'branded' string type for base62 encoded strings.\n   This is used to ensure that the string is a valid base62\n   encoded string.\n   \n   \"ArrayBuffer32\" is a 256-bit array buffer. We use this\n    as the ASCII representation of binary objects that are\n    designed to be multiples of 256 bits. This has a number\n    of advantages, and leverages the facts that 43 characters\n    of base62 is slightly more than 256 bits (99.99% efficient).\n\n    Note that this approach was not practical prior to es2020,\n    when BigInt was added to JavaScript. BigInt allows us to\n    work natively with 256-bit integers.\n\n    The 'a32.' prefix is used to distinguish these from\n    other base64 or other encodings. This is not strictly\n    necessary, but it makes it easier to distinguish.\n    Note that '.' is not a valid base62 nor base64 character.\n    'a32.' refers to 'ArrayBuffer32' (256 bits), which we use\n    as a basic type to represent 256-bit integers in 43\n    characters of base62 [0-9A-Za-z]\n */\ntype Base62Encoded = string & { _brand?: 'Base62Encoded' };\n\n/**\n * base62ToArrayBuffer32 converts a base62 encoded string to an ArrayBuffer32.\n * \n * @param s base62 encoded string\n * @returns ArrayBuffer32\n */\nexport function base62ToArrayBuffer32(s: Base62Encoded): ArrayBuffer {\n  if (!base62Regex.test(s)) throw new Error(`base62ToArrayBuffer32: string must match: ${base62Regex}, value provided was ${s}`);\n  // remove the 'a32.' prefix, if present\n  if (s.startsWith('a32.')) s = s.slice(4);\n  let n = BigInt(0);\n  for (let i = 0; i < s.length; i++)\n    n = n * 62n + BigInt(base62.indexOf(s[i]));\n  // base62 x 43 is slightly more than 256 bits, so we need to check for overflow\n  if (n > 2n ** 256n - 1n) throw new Error(`base62ToArrayBuffer32: value exceeds 256 bits.`);\n  const buffer = new ArrayBuffer(32);\n  const view = new DataView(buffer);\n  for (let i = 0; i < 8; i++, n = n >> 32n)\n    view.setUint32((8 - i - 1) * 4, Number(BigInt.asUintN(32, n)));\n  return buffer;\n}\n\n\n/**\n * arrayBufferToBase62 converts an ArrayBuffer32 to a base62 encoded string.\n * Does not include a32. prefix.\n * \n * @param buffer ArrayBuffer32\n * @returns base62 encoded string\n */\nexport function arrayBufferToBase62(buffer: ArrayBuffer): Base62Encoded {\n  if (buffer.byteLength !== 32)\n    throw new Error('arrayBufferToBase62: buffer must be exactly 32 bytes (256 bits).');\n  let result = '';\n  for (let n = BigInt('0x' + Array.from(new Uint8Array(buffer)).map(b => b.toString(16).padStart(2, '0')).join(''));\n    n > 0n;\n    n = n / 62n)\n    result = base62[Number(n % 62n)] + result;\n  return result.padStart(43, '0');\n}\n\n/**\n * arrayBuffer32ToBase62 converts an ArrayBuffer32 to a base62 encoded string.\n * Inlcudes a32. prefix, was used internally while transitioning from base64.\n * \n * @param buffer ArrayBuffer32\n * @returns base62 encoded string\n */\nexport function arrayBuffer32ToBase62(buffer: ArrayBuffer): Base62Encoded {\n  return 'a32.' + arrayBufferToBase62(buffer);\n}\n\n/**\n * base62ToBase64 converts a base62 encoded string to a base64 encoded string.\n * \n * @param s base62 encoded string\n * @returns base64 encoded string\n * \n * @throws Error if the string is not a valid base62 encoded string\n */\nexport function base62ToBase64(s: Base62Encoded): string {\n  return arrayBufferToBase64(base62ToArrayBuffer32(s));\n}\n\n/**\n * base64ToBase62 converts a base64 encoded string to a base62 encoded string.\n * \n * @param s base64 encoded string\n * @returns base62 encoded string\n * \n * @throws Error if the string is not a valid base64 encoded string\n */\nexport function base64ToBase62(s: string): Base62Encoded {\n  return arrayBufferToBase62(base64ToArrayBuffer(s));\n}\n\n// and a type guard\nexport function isBase62Encoded(value: string | Base62Encoded): value is Base62Encoded {\n  return base62Regex.test(value);\n}\n\n/**\n * Appends two buffers and returns a new buffer\n * \n * @param {Uint8Array | ArrayBuffer} buffer1\n * @param {Uint8Array | ArrayBuffer} buffer2\n * @return {ArrayBuffer} new buffer\n *\n */\nfunction _appendBuffer(buffer1: Uint8Array | ArrayBuffer, buffer2: Uint8Array | ArrayBuffer): ArrayBuffer {\n  const tmp = new Uint8Array(buffer1.byteLength + buffer2.byteLength);\n  tmp.set(new Uint8Array(buffer1), 0);\n  tmp.set(new Uint8Array(buffer2), buffer1.byteLength);\n  return tmp.buffer;\n}\n\n// /**\n//  * Returns random number\n//  *\n//  * @return {int} integer 0..255\n//  *\n//  */\n// export function simpleRand256() {\n//   return crypto.getRandomValues(new Uint8Array(1))[0];\n// }\n\n// const base32mi = '0123456789abcdefyhEjkLmNHpFrRTUW';\n\n// /**\n//  * Returns a random string in requested encoding\n//  *\n//  * @param {n} number of characters\n//  * @param {code} encoding, supported types: 'base32mi'\n//  * @return {string} random string\n//  *\n//  * base32mi: ``0123456789abcdefyhEjkLmNHpFrRTUW``\n//  */\n// export function simpleRandomString(n: number, code: string): string {\n//   if (code == 'base32mi') {\n//     // yeah, of course we need to add base64 etc\n//     const z = crypto.getRandomValues(new Uint8Array(n));\n//     let r = '';\n//     for (let i = 0; i < n; i++) r += base32mi[z[i] & 31];\n//     return r;\n//   }\n//   _sb_exception('simpleRandomString', 'code ' + code + ' not supported');\n//   return '';\n// }\n\n// /**\n//  * This function disambiguates strings that are known to be 'base32mi' type.\n//  * Below is the list of base32 characters, and the disambiguation table.\n//  * base32mi is designed to be human-friendly, so this function can be \n//  * safely called anywhere you have human input - including as an \n//  * event on an input field that immediately makes any correction. \n//  * \n//  * You can think of the translation either in terms of many-to-one\n//  * (all entered characters that map to a specific base32mi character),\n//  * or as a one-to-one correspondence (where '.' means 'no change').\n//  *\n//  * @example\n//  *\n//  *     'base32mi': '0123456789abcdefyhEjkLmNHpFrRTUW'\n//  * \n//  *     Disambiguation transformations:\n//  * \n//  *     [OoQD] -> '0'\n//  *     [lIiJ] -> '1'\n//  *     [Zz] -> '2'\n//  *     [A] -> '4'\n//  *     [Ss] -> '5'\n//  *     [G] -> '6'\n//  *     [t] -> '7'\n//  *     [B] -> '8'\n//  *     [gq] -> '9'\n//  *     [C] -> 'c'\n//  *     [Y] -> 'y'\n//  *     [KxX] -> 'k'\n//  *     [M] -> 'm'\n//  *     [n] -> 'N'\n//  *     [P] -> 'p'\n//  *     [uvV] -> 'U'\n//  *     [w] -> 'W'\n//  *\n//  *     0123456789abcdefghijklmnopqrstuvxyzABCDEFGHIJKLMNOPQRSTUVXYZ\n//  *     ................9.1..1.N0.9.57UUk.248c0EF6.11kLm.0p0.5..Uky2\n//  *\n//  */\n// export function cleanBase32mi(s: string) {\n//   // this of course is not the most efficient\n//   return s.replace(/[OoQD]/g, '0').replace(/[lIiJ]/g, '1').replace(/[Zz]/g, '2').replace(/[A]/g, '4').replace(/[Ss]/g, '5').replace(/[G]/g, '6').replace(/[t]/g, '7').replace(/[B]/g, '8').replace(/[gq]/g, '9').replace(/[C]/g, 'c').replace(/[Y]/g, 'y').replace(/[KxX]/g, 'k').replace(/[M]/g, 'm').replace(/[n]/g, 'N').replace(/[P]/g, 'p').replace(/[uvV]/g, 'U').replace(/[w]/g, 'w');\n// }\n\n/**\n * Partition\n */\nexport function partition(str: string, n: number) {\n  throw (`partition() not tested on TS yet - (${str}, ${n})`)\n}\n\n/**\n * There are many problems with JSON parsing, adding a wrapper to capture more info.\n * The 'loc' parameter should be a (unique) string that allows you to find the usage\n * in the code; one approach is the line number in the file (at some point).\n */\nexport function jsonParseWrapper(str: string | null, loc: string) {\n  if (str == null) return null;\n  try {\n    return JSON.parse(str);\n  } catch (error) {\n    // sometimes it's an embedded string\n    try {\n      // This would be simple: 'return JSON.parse(eval(str));'\n      // But eval() not safe. Instead we iteratively strip possible wrapping\n      // single or double quotation marks. There are various cases where this\n      // will not be enough, but we'll add \"unwrapping\" logic as we find\n      // the examples.\n      let s2 = '';\n      let s3 = '';\n      let str2: string | undefined = str\n      while (str2 != (s3 = s2, s2 = str2, str2 = str2?.match(/^(['\"])(.*)\\1$/m)?.[2]))\n        return JSON.parse(`'${s3}'`);\n    } catch {\n      // let's try one more thing\n      try {\n        return JSON.parse(str.slice(1, -1));\n      } catch {\n        // i am beginning to dislike TS .. ugh no simple way to get error message\n        // see: https://kentcdodds.com/blog/get-a-catch-block-error-message-with-typescript\n        throw new Error(`JSON.parse() error at ${loc} (tried eval and slice)\\nString was: ${str}`);\n      }\n    }\n  }\n}\n\n/** Essentially a dictionary where each entry is an arraybuffer. */\nexport interface SBPayload {\n  [index: string]: ArrayBuffer;\n}\n\n/**\n * Deprecated (older version of payloads, for older channels)\n */\n/** @private */\nexport function extractPayloadV1(payload: ArrayBuffer): SBPayload {\n  try {\n    const metadataSize = new Uint32Array(payload.slice(0, 4))[0];\n    const decoder = new TextDecoder();\n    const metadata: Dictionary<any> = jsonParseWrapper(decoder.decode(payload.slice(4, 4 + metadataSize)), 'L476');\n    let startIndex = 4 + metadataSize;\n    const data: SBPayload = {};\n    for (const key in metadata) {\n      if (data.key) {\n        data[key] = payload.slice(startIndex, startIndex + metadata[key]);\n        startIndex += metadata[key];\n      }\n    }\n    return data;\n  } catch (e) {\n    console.error(e);\n    return {};\n  }\n}\n\n/**\n * Assemble payload. This creates a single binary (wire) format\n * of an arbitrary set of (named) binary objects.\n */\nexport function assemblePayload(data: SBPayload): BodyInit | null {\n  try {\n    const metadata: Dictionary<any> = {};\n    metadata['version'] = '002';\n    let keyCount = 0;\n    let startIndex = 0;\n    for (const key in data) {\n      keyCount++;\n      metadata[keyCount.toString()] = { name: key, start: startIndex, size: data[key].byteLength };\n      startIndex += data[key].byteLength;\n    }\n    const encoder = new TextEncoder();\n    const metadataBuffer: ArrayBuffer = encoder.encode(JSON.stringify(metadata));\n    const metadataSize = new Uint32Array([metadataBuffer.byteLength]);\n    let payload = _appendBuffer(new Uint8Array(metadataSize.buffer), new Uint8Array(metadataBuffer));\n    for (const key in data)\n      payload = _appendBuffer(new Uint8Array(payload), data[key]);\n    return payload;\n  } catch (e) {\n    console.error(e);\n    return null;\n  }\n}\n\n/**\n * Extract payload - this decodes from our binary (wire) format\n * to a JS object. This provides a binary encoding of any JSON,\n * and it allows some elements of the JSON to be raw (binary).\n */\nexport function extractPayload(payload: ArrayBuffer): SBPayload {\n  try {\n    // number of bytes of meta data (encoded as a 32-bit Uint)\n    const metadataSize = new Uint32Array(payload.slice(0, 4))[0];\n    const decoder = new TextDecoder();\n    // extracts the string of meta data and parses\n    const _metadata: Dictionary<any> = jsonParseWrapper(decoder.decode(payload.slice(4, 4 + metadataSize)), 'L533');\n    // calculate start of actual contents\n    const startIndex: number = 4 + metadataSize;\n    if (!_metadata.version) _metadata['version'] = '001' // backwards compat\n    switch (_metadata['version']) {\n      case '001': {\n        // deprecated, older format\n        return extractPayloadV1(payload);\n      }\n      case '002': {\n        const data: Dictionary<any> = [];\n        for (let i = 1; i < Object.keys(_metadata).length; i++) {\n          const _index = i.toString();\n          if (_metadata[_index]) {\n            const propertyStartIndex: number = _metadata[_index]['start'];\n            // start (in bytes) of contents\n            const size: number = _metadata[_index]['size'];\n            // where to put it\n            const entry: Dictionary<any> = _metadata[_index]\n            // extracts contents - this supports raw data\n            data[entry['name']] = payload.slice(startIndex + propertyStartIndex, startIndex + propertyStartIndex + size);\n          } else {\n            console.log(`found nothing for index ${i}`)\n          }\n        }\n        return data;\n      }\n      default: {\n        throw new Error('Unsupported payload version (' + _metadata['version'] + ') - fatal');\n      }\n    }\n  } catch (e) {\n    throw new Error('extractPayload() exception (' + e + ')');\n  }\n}\n\n/**\n * Encode into b64 URL\n */\nexport function encodeB64Url(input: string) {\n  return input.replaceAll('+', '-').replaceAll('/', '_');\n}\n\n/**\n * Decode b64 URL\n */\nexport function decodeB64Url(input: string) {\n  input = input.replaceAll('-', '+').replaceAll('_', '/');\n\n  // Pad out with standard base64 required padding characters\n  const pad: number = input.length % 4;\n  if (pad) {\n    if (pad === 1) {\n      throw new Error('InvalidLengthError: Input base64url string is the wrong length to determine padding');\n    }\n    input += new Array(5 - pad).join('=');\n  }\n\n  return input;\n}\n\n//#endregion - SBCryptoUtils\n\n/******************************************************************************************************/\n//#region - SBCrypto Class - this is instantiated into 'sbCrypto' global\n\ntype knownKeysInfo = {\n  hash: SB384Hash, // also the map hash\n  pubKeyJson?: JsonWebKey, // if we only have crypto key and it's not extractable, this will be undefined\n  key?: CryptoKey, // exists iff it's a private key\n}\n\n\n\n/**\n * SBCrypto\n *\n * SBCrypto contains all the SB specific crypto functions,\n * as well as some general utility functions.\n *\n * @class\n * @constructor\n * @public\n */\n\n/**\n * \n  * Typically a jsonwebkey (JWK) will look something like this:\n  *\n  *                        \"{\\\"crv\\\":\\\"P-384\\\",\\\"ext\\\":true,\\\"key_ops\\\":[],\\\"kty\\\":\\\"EC\\\",\n  *                        \\\"x\\\":\\\"9s17B4i0Cuf_w9XN_uAq2DFePOr6S3sMFMA95KjLN8akBUWEhPAcuMEMwNUlrrkN\\\",\n  *                        \\\"y\\\":\\\"6dAtcyMbtsO5ufKvlhxRsvjTmkABGlTYG1BrEjTpwrAgtmn6k25GR7akklz9klBr\\\"}\"\n  * \n  * (public key), or this:\n  * \n  *                       \"{\\\"crv\\\":\\\"P-384\\\",\n  *                       \\\"d\\\":\\\"KCJHDZ34XgVFsS9-sU09HFzXZhnGCvnDgJ5a8GTSfjuJQaq-1N2acvchPRhknk8B\\\",\n  *                       \\\"ext\\\":true,\\\"key_ops\\\":[\\\"deriveKey\\\"],\\\"kty\\\":\\\"EC\\\",\n  *                       \\\"x\\\":\\\"rdsyBle0DD1hvp2OE2mINyyI87Cyg7FS3tCQUIeVkfPiNOACtFxi6iP8oeYt-Dge\\\",\n  *                       \\\"y\\\":\\\"qW9VP72uf9rgUU117G7AfTkCMncJbT5scIaIRwBXfqET6FYcq20fwSP7R911J2_t\\\"}\"\n  * \n  * (private key). These are elliptic curve keys encoded in \"JWK\" format. \n  * The main RFC is 7518 (https://datatracker.ietf.org/doc/html/rfc7518#section-6.2),\n  * supervised by IESG except for a tiny addition of one parameter (\"ext\") that is \n  * supervised by the W3C Crypto WG (https://w3c.github.io/webcrypto/#ecdsa).\n  * \n  * We define an internal SB format that encodes/decodes any sort of key to a variable-\n  * length (a32) string. The most important case are JWK keys.\n  * \n  * EC in JWK has a number of parameters, but in this case the only required ones are:\n  * \n  *  crv: the curve (P-384 in this case)\n  *  x: the x coordinate of the public key\n  *  y: the y coordinate of the public key\n  *  d: the private key (if it's a private key)\n  *  kty: the key type (EC in this case)\n  *  ext: the 'extractable' flag\n  *  key_ops: (optional) permitted the key operations\n  * \n  * We define ''SBKey'' as a variable length string with a four-character prefix,\n  * which encodes as follows:\n  * \n  *  \"pNkk\": public key; only x and y are present, the rest implied\n  *  \"Aj3p\": private key: x, y, d are present, the rest implied\n  *  \"T881\": AES 256 key (32 bytes)\n  * \n  * For the AES key, properties will include:\n  * \n  * \"k\": the key itself, encoded as base64\n  * \"alg\": \"A256GCM\"\n  * \"key_ops\": [\"encrypt\", \"decrypt\"]\n  * \"kty\": \"oct\"\n  * \n  * Only the \"k\" property is required, the rest are implied.\n  * \n  * In JWK, x, y, and d are all encoded as 64 characters, or 384 bits.\n  * \n  *\n  *\n*/\n\nenum KeyPrefix {\n  SBAES256Key = \"T881\",\n  SBPrivateKey = \"Aj3p\",\n  SBPublicKey = \"pNkk\"\n}\n\ninterface SBAES256Key {\n  prefix: KeyPrefix.SBAES256Key,\n  k: Base62Encoded\n}\n\ninterface SBPrivateKey {\n  prefix: KeyPrefix.SBPrivateKey,\n  x: Base62Encoded,\n  y: Base62Encoded,\n  d: Base62Encoded\n}\n\ninterface SBPublicKey {\n  prefix: KeyPrefix.SBPublicKey,\n  x: Base62Encoded,\n  y: Base62Encoded\n}\n\nfunction isSBKey(key: any): key is SBKey {\n  return key && Object.values(KeyPrefix).includes(key.prefix);\n}\n\nexport type SBKey = SBAES256Key | SBPrivateKey | SBPublicKey\n\n// private .. only for our code when it is omniscient on types\ntype Key = JsonWebKey | SB384 | CryptoKey | SBKey\n\nclass SBCrypto {  /************************************************************************************/\n\n  #knownKeys: Map<SB384Hash, knownKeysInfo> = new Map()\n\n  /**\n   * Converts a SBKey to a JsonWebKey, if the input is already a JsonWebKey\n   * then it's returned as is.\n   * \n   */\n  SBKeyToJWK(key: SBKey | JsonWebKey): JsonWebKey {\n    if (!isSBKey(key))\n      return key as JsonWebKey\n    switch (key.prefix) {\n      case 'pNkk': {\n        return {\n          crv: \"P-384\",\n          ext: true,\n          key_ops: [],\n          kty: \"EC\",\n          x: key.x,\n          y: key.y\n        }\n      }\n      case 'Aj3p': {\n        return {\n          crv: \"P-384\",\n          d: key.d,\n          ext: true,\n          key_ops: [\"deriveKey\"],\n          kty: \"EC\",\n          x: key.x,\n          y: key.y\n        }\n      }\n      case 'T881': {\n        return {\n          k: key.k,\n          alg: \"A256GCM\",\n          key_ops: [\"encrypt\", \"decrypt\"],\n          kty: \"oct\"\n        }\n      }\n      default: {\n        throw new Error(`SBKeyToJWK() - unknown key prefix: ${(key as SBKey).prefix}`)\n      }\n    }\n  }\n\n  /**\n   * Converts a JsonWebKey to a SBKey, if the input is already a SBKey\n   * then it's returned as is. If the input is not well-formed, then\n   * we return undefined. \n   */\n  JWKToSBKey(key: JsonWebKey): SBKey | undefined {\n    if (!key) return undefined;\n    // Check and convert for AES256 key\n    if (key.kty === \"oct\" && key.alg === \"A256GCM\" && key.k && key.k.length === 43) {\n      return {\n        prefix: KeyPrefix.SBAES256Key,\n        k: base64ToBase62(key.k)\n      };\n    }\n    // Check and convert for EC keys\n    if (key.kty === \"EC\" && key.crv === \"P-384\" && key.x && key.y) {\n      if (key.x.length !== 64 || key.y.length !== 64) return undefined;\n      if (key.d && key.d.length === 64) {\n        return {\n          prefix: KeyPrefix.SBPrivateKey,\n          x: key.x,\n          y: key.y,\n          d: key.d\n        };\n      }\n      return {\n        prefix: KeyPrefix.SBPublicKey,\n        x: key.x,\n        y: key.y\n      };\n    }\n    return undefined;\n  }\n\n  /**\n   * Here we convert SBKey to a serialized string, it's a single\n   * string that begins with the four-character identifying prefix,\n   * and then just a string. The way that string is encoded is as\n   * follows:\n   * \n   * - AES256 key: it is 43x base64, so 256 bits, so can be base62 encoded straight up\n   * \n   * - private key: this is x, y, and d, each are 384 bits, so that's a total \n   *   of 768 bis, which can be encoded as three strings of 43 base62 characters.\n   *   BUT we need to convert all of them to BINARY, and then concatenate them\n   *   as binary, then split that to three equal-length buffers (32 bytes) and\n   *   then convert each to base62.\n   * \n   * - public key: this is x and y, each are 384 bits, and we need to figure out a \n   *   way to encode as a32 (base62) - remember we can only encode a32 in chunks of 256 bits.\n   *   perhaps we do as above but append 128 \"zero\" bits to it, for a total of 1280\n   *   bits, which we can split into four chunks of 256 bits, and do as above.\n   *   \n   *\n   */\n  SBKeyToString(key: SBKey): string {\n    const prefix = key.prefix;\n    // remember throughout that our constraint on base62 is that it's always\n    // a multiple of 256 bits, so we need to split and pad things.\n    // we also consistently need to strip/add the \"a32.\" prefix\n    switch (prefix) {\n      case KeyPrefix.SBAES256Key: {\n        // AES keys are conveniently already 256 bits\n        const buffer = base64ToArrayBuffer((key as SBAES256Key).k);\n        return prefix + arrayBufferToBase62(buffer).slice(4);\n      }\n      case KeyPrefix.SBPublicKey: {\n        // public keys are two 384-bit numbers, which splits into 3x 256 bits\n        const publicKey = key as SBPublicKey;\n        const combined = new Uint8Array(48 * 2);\n        combined.set(base64ToArrayBuffer(publicKey.x), 0);\n        combined.set(base64ToArrayBuffer(publicKey.y), 48);\n        return prefix +\n          arrayBufferToBase62(combined.slice(0, 32).buffer).slice(4) +\n          arrayBufferToBase62(combined.slice(32, 64).buffer).slice(4) +\n          arrayBufferToBase62(combined.slice(64, 96).buffer).slice(4);\n      }\n      case KeyPrefix.SBPrivateKey: {\n        // private keys are a bit cumbersome, we pad with 128 bits of zero\n        const privateKey = key as SBPrivateKey;\n        const combined = new Uint8Array(3 * 48 + 16); // this is 5x 256 bits\n        combined.set(base64ToArrayBuffer(privateKey.x).slice(4), 0);\n        combined.set(base64ToArrayBuffer(privateKey.y).slice(4), 48);\n        combined.set(base64ToArrayBuffer(privateKey.d).slice(4), 96);\n        // it will already be zero-padded\n        return prefix +\n          arrayBufferToBase62(combined.slice(0, 32).buffer).slice(4) +\n          arrayBufferToBase62(combined.slice(32, 64).buffer).slice(4) +\n          arrayBufferToBase62(combined.slice(64, 96).buffer).slice(4) +\n          arrayBufferToBase62(combined.slice(96, 128).buffer).slice(4) +\n          arrayBufferToBase62(combined.slice(128, 160).buffer).slice(4);\n      }\n      default: {\n        throw new Error(\"Unknown SBKey type.\");\n      }\n    }\n  }\n\n  StringToSBKey(input: string): SBKey | undefined {\n    try {\n      if (input.length < 4) return undefined;\n      const prefix = input.slice(0, 4);\n      const data = input.slice(4);\n      switch (prefix) {\n        case KeyPrefix.SBAES256Key: {\n          if (data.length !== 43) return undefined;\n          const k = base62ToArrayBuffer32(\"a32.\" + data);\n          return {\n            prefix: KeyPrefix.SBAES256Key,\n            k: arrayBufferToBase64(k)\n          };\n        }\n        case KeyPrefix.SBPublicKey: {\n          if (data.length !== 86) return undefined;\n          const p1 = new Uint8Array(base62ToArrayBuffer32(\"a32.\" + data.slice(0, 43)));\n          const p2 = new Uint8Array(base62ToArrayBuffer32(\"a32.\" + data.slice(43, 86)));\n          const p3 = new Uint8Array(base62ToArrayBuffer32(\"a32.\" + data.slice(86)));\n          const combined = new Uint8Array(48 * 2);\n          combined.set(p1, 0);\n          combined.set(p2, 32);\n          combined.set(p3, 64);\n          return {\n            prefix: KeyPrefix.SBPublicKey,\n            x: arrayBufferToBase64(combined.slice(0, 48).buffer),\n            y: arrayBufferToBase64(combined.slice(48, 96).buffer)\n          };\n        }\n        case KeyPrefix.SBPrivateKey: {\n          if (data.length !== 215) return undefined;\n          const p1 = new Uint8Array(base62ToArrayBuffer32(\"a32.\" + data.slice(0, 43)));\n          const p2 = new Uint8Array(base62ToArrayBuffer32(\"a32.\" + data.slice(43, 86)));\n          const p3 = new Uint8Array(base62ToArrayBuffer32(\"a32.\" + data.slice(86, 129)));\n          const p4 = new Uint8Array(base62ToArrayBuffer32(\"a32.\" + data.slice(129, 172)));\n          const p5 = new Uint8Array(base62ToArrayBuffer32(\"a32.\" + data.slice(172, 215)));\n          const combined = new Uint8Array(3 * 48 + 16); // this is 5x 256 bits\n          combined.set(p1, 0);\n          combined.set(p2, 32);\n          combined.set(p3, 64);\n          combined.set(p4, 96);\n          combined.set(p5, 128);\n          return {\n            prefix: KeyPrefix.SBPrivateKey,\n            x: arrayBufferToBase64(combined.slice(0, 48).buffer),\n            y: arrayBufferToBase64(combined.slice(48, 96).buffer),\n            d: arrayBufferToBase64(combined.slice(96, 144).buffer)\n          };\n        }\n        default: {\n          return undefined;\n        }\n      }\n    } catch (e) {\n      console.error(\"StringToSBKey() - malformed input, exception: \", e);\n      return undefined;\n    }\n  }\n\n  /**\n   * SBCrypto.addKnownKey()\n   * \n   * Adds any key to the list of known keys; if it's known\n   * but only as a public key, then it will be 'upgraded'.\n   */\n  async addKnownKey(key: Key) {\n    if (!key)\n      // various valid cases are no ops\n      return\n    // check on types first\n    if (isSBKey(key))\n      key = await this.SBKeyToJWK(key)\n    if (typeof key === 'string') {\n      // JsonWebKey can be private or public\n      const hash = await sbCrypto.sb384Hash(key)\n      if (!hash)\n        return\n      if (this.#knownKeys.has(hash)) {\n        // ToDo: check if it's a private key that would upgrade what's there\n        if (DBG) console.log(`addKnownKey() - key already known: ${hash}, skipping upgrade check`)\n      } else {\n        const newInfo: knownKeysInfo = {\n          hash: hash, // also the map hash\n          pubKeyJson: key,\n          key: await sbCrypto.importKey('jwk', key, 'ECDH', true, ['deriveKey'])\n        }\n        this.#knownKeys.set(hash, newInfo)\n      }\n    } else if (key instanceof SB384) {\n      // SB384 is always private\n      await key.ready // just in case\n      const hash = key.hash\n      // todo: perhaps check if it's there, but for now just overwrite\n      const newInfo: knownKeysInfo = {\n        hash: hash, // also the map hash\n        pubKeyJson: key.exportable_pubKey,\n        key: key.privateKey, // exists iff it's a private key\n      }\n      this.#knownKeys.set(hash, newInfo)\n    } else if (key instanceof CryptoKey) {\n      // CryptoKey can be private or public\n      const hash = await this.sb384Hash(key)\n      if (!hash)\n        return\n      if (!this.#knownKeys.has(hash)) {\n        const newInfo: knownKeysInfo = {\n          hash: hash, // also the map hash\n          pubKeyJson: await sbCrypto.exportKey('jwk', key),\n          key: key, // todo: could be public\n        }\n        this.#knownKeys.set(hash, newInfo)\n      }\n    } else {\n      throw new Error(\"addKnownKey() - invalid key type (must be string or SB384-derived)\")\n    }\n  }\n\n  /**\n   * SBCrypto.lookupKeyGlobal()\n   * \n   * Given any sort of SB384Hash, returns the corresponding known key, if any\n   */\n  lookupKeyGlobal(hash: SB384Hash): knownKeysInfo | undefined {\n    return this.#knownKeys.get(hash)\n  }\n  /**\n   * Hashes and splits into two (h1 and h1) signature of data, h1\n   * is used to request (salt, iv) pair and then h2 is used for\n   * encryption (h2, salt, iv).\n   * \n   * Transitioning to internal binary format\n   *\n   * @param buf blob of data to be stored\n   *\n   */\n  generateIdKey(buf: ArrayBuffer): Promise<{ id_binary: ArrayBuffer, key_material: ArrayBuffer }> {\n    return new Promise((resolve, reject) => {\n      try {\n        crypto.subtle.digest('SHA-512', buf).then((digest) => {\n          const _id = digest.slice(0, 32);\n          const _key = digest.slice(32);\n          resolve({\n            id_binary: _id,\n            key_material: _key\n          })\n\n          // resolve({\n          //   id32: stripA32(arrayBuffer32ToBase62(_id)),\n          //   key32: stripA32(arrayBuffer32ToBase62(_key))\n          // })\n        })\n      } catch (e) {\n        reject(e)\n      }\n    })\n  }\n\n  /**\n   * Extracts (generates) public key from a private key.\n   */\n  extractPubKey(privateKey: JsonWebKey): JsonWebKey | null {\n    try {\n      const pubKey: JsonWebKey = { ...privateKey };\n      delete pubKey.d;\n      delete pubKey.dp;\n      delete pubKey.dq;\n      delete pubKey.q;\n      delete pubKey.qi;\n      pubKey.key_ops = [];\n      return pubKey;\n    } catch (e) {\n      console.error(e)\n      return null\n    }\n  }\n\n  /** @private */\n  async #generateHash(rawBytes: ArrayBuffer): Promise<SB384Hash> {\n    try {\n      const MAX_REHASH_ITERATIONS = 160\n      const b62regex = /^[0-9A-Za-z]+$/;\n      let count = 0\n      let hash = arrayBufferToBase64(rawBytes)\n      while (!b62regex.test(hash)) {\n        if (count++ > MAX_REHASH_ITERATIONS) throw new Error(`generateChannelHash() - exceeded ${MAX_REHASH_ITERATIONS} iterations:`)\n        rawBytes = await crypto.subtle.digest('SHA-384', rawBytes)\n        hash = arrayBufferToBase64(rawBytes)\n      }\n      return arrayBufferToBase64(rawBytes)\n    } catch (e) {\n      console.error(\"sb384Hash() failed\", e)\n      console.error(\"tried working from channelBytes:\")\n      console.error(rawBytes)\n      throw new Error(`sb384Hash() exception (${e})`)\n    }\n  }\n\n  // nota bene this does, and should, permanently be backwards compatible.\n  /** @private */\n  async #testHash(channelBytes: ArrayBuffer, channel_id: SBChannelId): Promise<boolean> {\n    const MAX_REHASH_ITERATIONS = 160\n    let count = 0\n    let hash = arrayBufferToBase64(channelBytes)\n    while (hash !== channel_id) {\n      if (count++ > MAX_REHASH_ITERATIONS) return false\n      channelBytes = await crypto.subtle.digest('SHA-384', channelBytes)\n      hash = arrayBufferToBase64(channelBytes)\n    }\n    return true\n  }\n\n  /**\n   * SBCrypto.sb384Hash()\n   * \n   * Takes a JsonWebKey and returns a SB384Hash. If there's a problem, returns undefined.\n   * \n   */\n  async sb384Hash(key?: JsonWebKey | CryptoKey): Promise<SB384Hash | undefined> {\n    if (key instanceof CryptoKey)\n      key = await this.exportKey('jwk', key)\n        .catch(() => {\n          // typically it's a restricted key\n          return undefined\n        })\n    if (!key)\n      return undefined\n    if (key && key.x && key.y) {\n      const xBytes = base64ToArrayBuffer(decodeB64Url(key!.x!))\n      const yBytes = base64ToArrayBuffer(decodeB64Url(key!.y!))\n      const channelBytes = _appendBuffer(xBytes, yBytes)\n      return await this.#generateHash(channelBytes)\n    } else {\n      throw new Error('sb384Hash() - invalid JsonWebKey (missing x and/or y)')\n    }\n  }\n\n  /**\n   * SBCrypto.compareHashWithKey()\n   * \n   * Checks if an existing SB384Hash is 'compatible' with a given key.\n   * \n   * Note that you CAN NOT have a hash, and a key, generate a hash\n   * from that key, and then compare the two. The hash generation per\n   * se will be deterministic and specific AT ANY POINT IN TIME,\n   * but may change over time, and this comparison function will \n   * maintain ability to compare over versions.\n   * \n   * For example, this comparison will accept a simple straight\n   * b64-encoded hash without iteration or other processing.\n   * \n   */\n  async compareHashWithKey(hash: SB384Hash, key: JsonWebKey | null) {\n    if (!hash || !key) return false\n    let x = key.x\n    let y = key.y\n    if (!(x && y)) {\n      try {\n        // we try to be tolerant of code that loses track of if JWK has been parsed or not\n        const tryParse = JSON.parse(key as unknown as string);\n        if (tryParse.x) x = tryParse.x;\n        if (tryParse.y) y = tryParse.y;\n      } catch {\n        return false;\n      }\n    }\n    const xBytes = base64ToArrayBuffer(decodeB64Url(x!))\n    const yBytes = base64ToArrayBuffer(decodeB64Url(y!))\n    const channelBytes = _appendBuffer(xBytes, yBytes)\n    return await this.#testHash(channelBytes, hash)\n  }\n\n\n  /**\n   * 'Compare' two channel IDs. Note that this is not constant time.\n   */\n  async verifyChannelId(owner_key: JsonWebKey, channel_id: SBChannelId): Promise<boolean> {\n    return await this.compareHashWithKey(channel_id, owner_key)\n  }\n\n  /**\n   * SBCrypto.generatekeys()\n   *\n   * Generates standard ``ECDH`` keys using ``P-384``.\n   */\n  async generateKeys() {\n    try {\n      return await crypto.subtle.generateKey({ name: 'ECDH', namedCurve: 'P-384' }, true, ['deriveKey']);\n    } catch (e) {\n      throw new Error('generateKeys() exception (' + e + ')');\n    }\n  }\n\n  /**\n   * SBCrypto.importKey()\n   *\n   * Import keys\n   */\n  async importKey(format: KeyFormat, key: BufferSource | JsonWebKey, type: 'ECDH' | 'AES' | 'PBKDF2', extractable: boolean, keyUsages: KeyUsage[]) {\n    try {\n      let importedKey: CryptoKey\n      const keyAlgorithms = {\n        ECDH: { name: 'ECDH', namedCurve: 'P-384' },\n        AES: { name: 'AES-GCM' },\n        PBKDF2: 'PBKDF2'\n      }\n      if (format === 'jwk') {\n        // sanity check it's a JsonWebKey and not a BufferSource or something else\n        const jsonKey = key as JsonWebKey\n        if (jsonKey.kty === undefined) throw new Error('importKey() - invalid JsonWebKey');\n        if (jsonKey.alg === 'ECDH')\n          jsonKey.alg = undefined; // todo: this seems to be a Deno mismatch w crypto standards?\n        importedKey = await crypto.subtle.importKey('jwk', jsonKey, keyAlgorithms[type], extractable, keyUsages)\n      } else {\n        importedKey = await crypto.subtle.importKey(format, key as BufferSource, keyAlgorithms[type], extractable, keyUsages)\n      }\n      this.addKnownKey(importedKey)\n      return (importedKey)\n    } catch (e) {\n      console.error(`... importKey() error: ${e}:`)\n      console.log(format)\n      console.log(key)\n      console.log(type)\n      console.log(extractable)\n      console.log(keyUsages)\n      throw new Error('importKey() exception (' + e + ')');\n    }\n  }\n\n  /**\n   * SBCrypto.exportKey()\n   * \n   * Export key; note that if there's an issue, this will return undefined.\n   * That can happen normally if for example the key is restricted (and\n   * not extractable).\n   */\n  async exportKey(format: 'jwk', key: CryptoKey) {\n    return await crypto.subtle\n      .exportKey(format, key)\n      .catch(() => {\n        if (DBG) console.warn(`... exportKey() protested, this just means we treat this as undefined`)\n        return undefined\n      })\n  }\n\n  /**\n   * SBCrypto.deriveKey()\n   *\n   * Derive key. Takes a private and public key, and returns a Promise to a cryptoKey for 1:1 communication.\n   */\n  deriveKey(privateKey: CryptoKey, publicKey: CryptoKey, type: string, extractable: boolean, keyUsages: KeyUsage[]): Promise<CryptoKey> {\n    return new Promise(async (resolve, reject) => {\n      const keyAlgorithms: Dictionary<any> = {\n        AES: {\n          name: 'AES-GCM', length: 256\n        }, HMAC: {\n          name: 'HMAC', hash: 'SHA-256', length: 256\n        }\n      };\n      try {\n        resolve(await crypto.subtle.deriveKey({\n          name: 'ECDH',\n          public: publicKey\n        },\n          privateKey,\n          keyAlgorithms[type],\n          extractable,\n          keyUsages));\n      } catch (e) {\n        console.error(e, privateKey, publicKey, type, extractable, keyUsages);\n        reject(e);\n      }\n    });\n  }\n\n  /**\n   * SBCrypto.encrypt()\n   *\n   * Encrypt. if no nonce (iv) is given, will create it. Returns a Promise\n   * that resolves either to raw array buffer or a packaged EncryptedContents.\n   * Note that for the former, nonce must be given.\n   */\n  encrypt(data: BufferSource, key: CryptoKey, _iv?: Uint8Array | null, returnType?: 'encryptedContents'): Promise<EncryptedContents>\n  encrypt(data: BufferSource, key: CryptoKey, _iv?: Uint8Array | null, returnType?: 'arrayBuffer'): Promise<ArrayBuffer>\n  encrypt(data: BufferSource, key: CryptoKey, _iv?: Uint8Array, returnType: 'encryptedContents' | 'arrayBuffer' = 'encryptedContents'): Promise<EncryptedContents | ArrayBuffer> {\n    return new Promise(async (resolve, reject) => {\n      try {\n        if (data === null)\n          reject(new Error('no contents'))\n        const iv: Uint8Array = ((!_iv) || (_iv === null)) ? crypto.getRandomValues(new Uint8Array(12)) : _iv\n        if (typeof data === 'string')\n          data = (new TextEncoder()).encode(data)\n        const encrypted = await crypto.subtle.encrypt({ name: 'AES-GCM', iv: iv }, key, data)\n        if (returnType === 'encryptedContents') {\n          resolve({\n            content: ensureSafe(arrayBufferToBase64(encrypted)),\n            iv: ensureSafe(arrayBufferToBase64(iv))\n          })\n        } else {\n          resolve(encrypted)\n        }\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n\n  wrap(k: CryptoKey, b: string, bodyType: 'string'): Promise<EncryptedContents>\n  wrap(k: CryptoKey, b: ArrayBuffer, bodyType: 'arrayBuffer'): Promise<EncryptedContents>\n  wrap(k: CryptoKey, b: string | ArrayBuffer, bodyType: 'string' | 'arrayBuffer'): Promise<EncryptedContents> {\n    return new Promise<EncryptedContents>((resolve) => {\n      let a\n      if (bodyType === 'string') {\n        a = sbCrypto.str2ab(b as string)\n      } else {\n        a = b as ArrayBuffer\n      }\n      sbCrypto.encrypt(a, k).then((c) => { resolve(c) })\n    })\n  }\n\n  /**\n   * SBCrypto.unwrap\n   *\n   * Decrypts a wrapped object, returns (promise to) decrypted contents\n   * per se (either as a string or arrayBuffer)\n   */\n  unwrap(k: CryptoKey, o: EncryptedContents, returnType: 'string'): Promise<string>\n  unwrap(k: CryptoKey, o: EncryptedContents, returnType: 'arrayBuffer'): Promise<ArrayBuffer>\n  unwrap(k: CryptoKey, o: EncryptedContents, returnType: 'string' | 'arrayBuffer') {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const { content: t, iv: iv } = encryptedContentsMakeBinary(o)\n        const d = await crypto.subtle.decrypt({ name: 'AES-GCM', iv: iv }, k, t)\n        if (returnType === 'string')\n          resolve(new TextDecoder().decode(d))\n        else if (returnType === 'arrayBuffer')\n          resolve(d)\n      } catch (e) {\n        console.error(`unwrap(): unknown issue - rejecting: ${e}`)\n        console.trace()\n        reject(e);\n      }\n    });\n  }\n\n  /**\n   * SBCrypto.sign()\n   *\n   * Sign\n   */\n  sign(secretKey: CryptoKey, contents: string): Promise<string> {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const encoder = new TextEncoder();\n        const encoded = encoder.encode(contents);\n        let sign;\n        try {\n          sign = await crypto.subtle.sign('HMAC', secretKey, encoded)\n          resolve(ensureSafe(arrayBufferToBase64(sign)));\n        } catch (error) {\n          reject(error);\n        }\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * SBCrypto.verify()\n   *\n   * Verify signature.\n   */\n  verify(verifyKey: CryptoKey, sign: string, contents: string) {\n    return new Promise<boolean>((resolve, reject) => {\n      try {\n        crypto.subtle\n          .verify('HMAC',\n            verifyKey,\n            base64ToArrayBuffer(sign),\n            sbCrypto.str2ab(contents))\n          .then((verified) => { resolve(verified) })\n      } catch (e) { reject(WrapError(e)) }\n    })\n  }\n\n  /**\n   * Standardized 'str2ab()' function, string to array buffer.\n   * This assumes on byte per character.\n   *\n   * @param {string} string\n   * @return {Uint8Array} buffer\n   */\n  str2ab(string: string): Uint8Array {\n    return new TextEncoder().encode(string);\n  }\n\n  /**\n   * Standardized 'ab2str()' function, array buffer to string.\n   * This assumes one byte per character.\n   *\n   * @param {Uint8Array} buffer\n   * @return {string} string\n   */\n  ab2str(buffer: Uint8Array): string {\n    return new TextDecoder('utf-8').decode(buffer);\n  }\n\n  /**\n   * SBCrypto.compareKeys()\n   *\n   * Compare JSON keys, true if the 'same', false if different. We consider\n   * them \"equal\" if both have 'x' and 'y' properties and they are the same.\n   * (Which means it doesn't care about which or either being public or private)\n   */\n  compareKeys(key1: Dictionary<any>, key2: Dictionary<any>): boolean {\n    if (key1 != null && key2 != null && typeof key1 === 'object' && typeof key2 === 'object')\n      return key1['x'] === key2['x'] && key1['y'] === key2['y'];\n    return false;\n  }\n\n  /**\n   * SBCrypto.lookupKey()\n   *\n   * Uses compareKeys() to check for presense of a key in a list of keys.\n   * Returns index of key if found, -1 if not found.\n   * \n   */\n  lookupKey(key: JsonWebKey, array: Array<JsonWebKey>): number {\n    for (let i = 0; i < array.length; i++)\n      if (sbCrypto.compareKeys(key, array[i])) return i;\n    return -1;\n  }\n\n  async channelKeyStringsToCryptoKeys(keyStrings: ChannelKeyStrings): Promise<ChannelKeys> {\n    return new Promise(async (resolve, reject) => {\n      let ownerKeyParsed: JsonWebKey = jsonParseWrapper(keyStrings.ownerKey, 'L1513')\n      Promise.all([\n        sbCrypto.importKey('jwk', ownerKeyParsed, 'ECDH', false, []),\n        sbCrypto.importKey('jwk', jsonParseWrapper(keyStrings.encryptionKey, 'L2250'), 'AES', false, ['encrypt', 'decrypt']),\n        sbCrypto.importKey('jwk', jsonParseWrapper(keyStrings.signKey, 'L2251'), 'ECDH', true, ['deriveKey']),\n        sbCrypto.importKey('jwk', sbCrypto.extractPubKey(jsonParseWrapper(keyStrings.signKey, 'L2252'))!, 'ECDH', true, []),\n        // this.identity!.privateKey // we know we have id by now\n      ])\n        .then(async (v) => {\n          if (DBG) console.log(\"++++++++ readyPromise() processed first batch of keys\")\n          const ownerKey = v[0]\n          const encryptionKey = v[1]\n          const signKey = v[2]\n          const publicSignKey = v[3]\n          resolve({\n            ownerKey: ownerKey,\n            ownerPubKeyX: ownerKeyParsed.x!,\n            encryptionKey: encryptionKey,\n            signKey: signKey,\n            // channelSignKey: channelSignKey,\n            publicSignKey: publicSignKey\n          })\n        })\n        .catch((e) => {\n          console.error(`readyPromise(): failed to import keys: ${e}`)\n          reject(e)\n        })\n    })\n\n\n  }\n\n} /* SBCrypto */\n//#endregion - SBCrypto Class\n\n/******************************************************************************************************/\n//#region Decorators\n\n// Decorator\n/** @private */\nfunction Memoize(target: any, propertyKey: string /* ClassGetterDecoratorContext */, descriptor?: PropertyDescriptor) {\n  if ((descriptor) && (descriptor.get)) {\n    let get = descriptor.get\n    descriptor.get = function () {\n      const prop = `__${target.constructor.name}__${propertyKey}__`\n      if (this.hasOwnProperty(prop)) {\n        const returnValue = this[prop as keyof PropertyDescriptor]\n        return (returnValue)\n      } else {\n        const returnValue = get.call(this)\n        Object.defineProperty(this, prop, { configurable: false, enumerable: false, writable: false, value: returnValue })\n        return returnValue\n      }\n    }\n  }\n}\n\n// Decorator\n/** @private */\nfunction Ready(target: any, propertyKey: string /* ClassGetterDecoratorContext */, descriptor?: PropertyDescriptor) {\n  if ((descriptor) && (descriptor.get)) {\n    let get = descriptor.get\n    descriptor.get = function () {\n      const obj = target.constructor.name\n      const prop = `${obj}ReadyFlag`\n      if (prop in this) {\n        const rf = \"readyFlag\" as keyof PropertyDescriptor\n        _sb_assert(this[rf], `${propertyKey} getter accessed but object ${obj} not ready (fatal)`)\n      }\n      const retValue = get.call(this)\n      _sb_assert(retValue != null, `${propertyKey} getter accessed in object type ${obj} but returns NULL (fatal)`)\n      return retValue\n    }\n  }\n}\n\nconst SB_CLASS_ARRAY = ['SBMessage', 'SBObjectHandle'] as const\ntype SB_CLASS_TYPES = typeof SB_CLASS_ARRAY[number]\ntype SB_CLASSES = SBMessage | SBObjectHandle\n\nconst SB_MESSAGE_SYMBOL = Symbol.for('SBMessage')\nconst SB_OBJECT_HANDLE_SYMBOL = Symbol.for('SBObjectHandle')\n\nfunction isSBClass(s: any): boolean {\n  return typeof s === 'string' && SB_CLASS_ARRAY.includes(s as SB_CLASS_TYPES)\n}\n\nfunction SBValidateObject(obj: SBObjectHandle, type: 'SBObjectHandle'): boolean\nfunction SBValidateObject(obj: SBMessage, type: 'SBMessage'): boolean\nfunction SBValidateObject(obj: SB_CLASSES | any, type: SB_CLASS_TYPES): boolean {\n  switch (type) {\n    case 'SBMessage': return SB_MESSAGE_SYMBOL in obj\n    case 'SBObjectHandle': return SB_OBJECT_HANDLE_SYMBOL in obj\n  }\n}\n\n// Decorator\n/** @private */\nfunction VerifyParameters(_target: any, _propertyKey: string /* ClassMethodDecoratorContext */, descriptor?: PropertyDescriptor): any {\n  if ((descriptor) && (descriptor.value)) {\n    const operation = descriptor.value\n    descriptor.value = function (...args: any[]) {\n      for (let x of args) {\n        const m = x.constructor.name\n        if (isSBClass(m)) _sb_assert(SBValidateObject(x, m), `invalid parameter: ${x} (expecting ${m})`)\n      }\n      return operation.call(this, ...args)\n    }\n  }\n}\n\n// // variation of \"ready\" pattern: an object is ready whenever it's validated,\n// // and any setter that might impact this needs to be decorated. \n// function Validate(_target: any, _propertyKey: string, descriptor: PropertyDescriptor) {\n//   const operation = descriptor.value\n//   descriptor.value = function (...args: any[]) {\n//     for (let x of args) {\n//       const m = x.constructor.name\n//       if (isSBClass(m)) _sb_assert(SBValidateObject(x, m), `invalid parameter: ${x} (expecting ${m})`)\n//     }\n//     return operation.call(this, ...args)\n//   }\n// \n\n// Decorator\n/** @private */\nfunction ExceptionReject(target: any, _propertyKey: string /* ClassMethodDecoratorContext */, descriptor?: PropertyDescriptor) {\n  if ((descriptor) && (descriptor.value)) {\n    const operation = descriptor.value\n    descriptor.value = function (...args: any[]) {\n      try {\n        return operation.call(this, ...args)\n      } catch (e) {\n        console.log(`ExceptionReject: ${WrapError(e)}`)\n        console.log(target)\n        console.log(_propertyKey)\n        console.log(descriptor)\n        return new Promise((_resolve, reject) => reject(`Reject: ${WrapError(e)}`))\n      }\n    }\n  }\n}\n\n//#endregion - local decorators\n\n/******************************************************************************************************/\n//#region - SETUP and STARTUP stuff (in progress)\n\n/**\n * This is the GLOBAL SBCrypto object, which is instantiated\n * immediately upon loading the jslib library.\n * \n * You should use this guy, not instantiate your own.\n */\nconst sbCrypto = new SBCrypto();\n\n\n/**\n * List of known servers. Nota bene: known does not mean *trusted*;\n * currently this will be mostly development servers. Please let us\n * know if there are global servers you would like us to add.\n */\nconst SBKnownServers: Array<SBServer> = [\n  {\n    // local servers\n    channel_server: 'http://localhost:3845',\n    channel_ws: 'ws://localhost:3845',\n    storage_server: 'http://localhost:3843',\n    shard_server: 'http://localhost:3841',\n  },\n  {\n    // Preview / Development Servers\n    channel_server: 'https://channel.384.dev',\n    channel_ws: 'wss://channel.384.dev',\n    storage_server: 'https://storage.384.dev',\n    shard_server: 'https://shard.3.8.4.land'\n  },\n  {\n    // This is both \"384.chat\" (production) and \"sn.ac\"\n    channel_server: 'https://r.384co.workers.dev',\n    channel_ws: 'wss://r.384co.workers.dev',\n    storage_server: 'https://s.384co.workers.dev'\n  },\n]\n\nconst knownStorageAndShardServers = [\n  'http://localhost:3841',\n  'http://localhost:3843',\n  'https://shard.3.8.4.land',\n  'https://storage.384.dev',\n  'https://storage.384co.workers.dev',\n  'https://shard.384.dev'\n]\n\n// let availableReadServers = new Promise<Array<string>>((resolve, _reject) => {\n//   const servers = [ 'http://localhost:3841', 'http://localhost:4000' ]\n//   Promise.all(servers.map(async (server) => {\n//     try {\n//       const methods = (await SBFetch(server + '/api/version'));\n//       const methodsJson = await methods.json();\n//       return { server, canRead: methodsJson.read, canWrite: methodsJson.write };\n//     } catch {\n//       return { server, canRead: false, canWrite: false };\n//     }\n//   })).then((capabilities) => {\n//     let readServers = capabilities.filter(c => c.canRead).map(c => c.server);\n//     readServers.push('https://shard.3.8.4.land');\n//     readServers.push('https://storage.384co.workers.dev'); \n//     console.warn(\"NOTE: ignore any 'ERR_CONNECTION_REFUSED' errors immediately above, they were expected\\n\"\n//     + \"(they are due to a limitation in your browser, making it impossible to silently verify connections)\\n\")\n//     resolve(readServers);\n//   });\n// });\n\n// const sbSetup = new Promise(async (resolve, _reject) => {\n//   await availableReadServers;\n//   resolve(availableReadServers)\n\n//   // try {\n//   //   const version = await SBFetch('http://localhost:3841/api/version')\n//   //   console.log('sbSetup() - version:')\n//   //   // let's list all headers:\n//   //   for (let h of (version.headers as any).entries()) {\n//   //     console.log(h)\n//   //   }\n//   //   version.json().then((v) => {\n//   //     console.log(v)\n//   //     resolve(v)\n//   //   })\n//   // } catch (e) {\n//   //   console.error(`sbSetup() - failed to fetch version: ${e}`)\n//   //   reject(e)\n//   // }\n// });\n\n// sbSetup.then((v) => {\n//   console.log(\"sbSetup() - success:\")\n//   console.log(v)\n// }).catch((e) => {\n//   console.error(`sbSetup() - failed to fetch version: ${e}`)\n// })\n\n\n\n//#endregion - SETUP and STARTUP stuff\n\n/******************************************************************************************************/\n//#region - SB384 Class\n\n/**\n *\n * @class\n * @constructor\n * @public\n *\n */\nclass SB384 {\n  ready: Promise<SB384>\n  sb384Ready: Promise<SB384>\n  #SB384ReadyFlag: boolean = false // must be named <class>ReadyFlag\n\n  #exportable_pubKey?: JsonWebKey\n  #exportable_privateKey?: JsonWebKey\n  #privateKey?: CryptoKey\n\n  #hash?: string // generic 'identifier' in the SB universe\n\n  /**\n   * Basic (core) capability object in SB.\n   *\n   * Note that all the getters below will throw an exception if the\n   * corresponding information is not ready.\n   *\n   * Like most SB classes, SB384 follows the \"ready template\" design\n   * pattern: the object is immediately available upon creation,\n   * but isn't \"ready\" until it says it's ready. See `Channel Class`_\n   * example below. Also see Design Note [4]_.\n   * \n   * { @link https://snackabra.io/jslib.html#dn-004-the-ready-pattern }\n   *\n   * @param key a jwk with which to create identity; if not provided,\n   * it will 'mint' (generate) them randomly, in other words it will\n   * default to creating a new identity (\"384\").\n   *\n   */\n  constructor(key: JsonWebKey | null = null) {\n    this.ready = new Promise<SB384>(async (resolve, reject) => {\n      try {\n        if (key) {\n          if (!key.d) {\n            // make sure key.d is present in the key, or it's probably a public key\n            const msg = 'ERROR creating SB384 object: invalid key (must be a PRIVATE key)'\n            console.error(msg)\n            reject(msg)\n          }\n          // we're given a key, and try to use it\n          this.#exportable_privateKey = key\n          const pk = sbCrypto.extractPubKey(key)\n          _sb_assert(pk, 'unable to extract public key')\n          this.#exportable_pubKey = pk!\n          this.#privateKey = await sbCrypto.importKey('jwk', key, 'ECDH', true, ['deriveKey'])\n        } else {\n          // generate a fresh ID\n          const keyPair = await sbCrypto.generateKeys()\n          this.#privateKey = keyPair.privateKey\n          this.#exportable_pubKey = await sbCrypto.exportKey('jwk', keyPair.publicKey)\n          this.#exportable_privateKey = await sbCrypto.exportKey('jwk', keyPair.privateKey)\n        }\n        this.#hash = await sbCrypto.sb384Hash(this.#exportable_pubKey)\n        sbCrypto.addKnownKey(this)\n        this.#SB384ReadyFlag = true\n        resolve(this)\n      } catch (e) {\n        reject('ERROR creating SB384 object failed: ' + WrapError(e))\n      }\n    })\n    this.sb384Ready = this.ready\n  }\n\n  /** @type {boolean}       */ @Memoize get readyFlag() { return this.#SB384ReadyFlag }\n  /** @type {JsonWebKey}    */ @Memoize @Ready get exportable_pubKey() { return this.#exportable_pubKey! }\n  /** @type {JsonWebKey}    */ @Memoize @Ready get exportable_privateKey() { return this.#exportable_privateKey! }\n  /** @type {CryptoKey}     */ @Memoize @Ready get privateKey() { return this.#privateKey! }\n  /** @type {CryptoKeyPair} */ // @Memoize @Ready get keyPair() { return this.#keyPair }\n\n  // note: this is the channelID if this SB384 corresponds to an owner ...\n  /** @type {string}        */ @Memoize @Ready get ownerChannelId() { return this.hash }\n\n  /**\n   * Returns a unique identifier for external use, that will be unique\n   * for any class or object that uses SB384 as it's root.\n   * \n   * This is deterministic, used to identify users, channels, etc.\n   * \n   * The hash is base64 encoding of the SHA-384 hash of the public key,\n   * taking the 'x' and 'y' fields. Note that it is slightly restricted, it only\n   * allows [A-Za-z0-9], eg does not allow the '_' or '-' characters. This makes the\n   * encoding more practical for end-user interactions like copy-paste. This\n   * is accomplished by simply re-hashing until the result is valid. This \n   * reduces the entropy of the channel ID by a neglible amount. \n   * \n   * Note this is not b62 encoding, which we use for 256-bit entities. This\n   * is still ~384 bits (e.g. x and y fields are each 384 bits, but of course\n   * the underlying total entropy isn't that, see <insert lots of fun math crypto\n   * study material heh>).\n   * \n   * NOTE: if you ever need to COMPARE hashes, well short version is that\n   * you cannot do so in the general case. You can use sbCrypto.compareHashWithKey()\n   * to compare a hash with a key, but you cannot compare two hashes. See the\n   * comparison function for more details.\n   */\n  @Memoize @Ready get hash() { return this.#hash! }\n\n  // older approach, used in similar contexts as hash() above\n  @Memoize @Ready get _id() { return JSON.stringify(this.exportable_pubKey!) }\n\n} /* class SB384 */\n//#endregion - SB384 Class\n\n/**\n * Class SBMessage\n *\n * Body should be below 32KiB, though it tolerates up to 64KiB\n * \n * \n *\n * @class\n * @constructor\n * @public\n */\nclass SBMessage {\n  ready\n  channel: Channel\n  contents: SBMessageContents\n  #encryptionKey?: CryptoKey\n  #sendToPubKey?: JsonWebKey\n  [SB_MESSAGE_SYMBOL] = true\n  MAX_SB_BODY_SIZE = 64 * 1024 * 1.5 // allow for base64 overhead plus extra\n\n  /* SBMessage */\n  constructor(channel: Channel, bodyParameter: SBMessageContents | string = '', sendToJsonWebKey?: JsonWebKey) {\n    if (typeof bodyParameter === 'string') {\n      this.contents = { encrypted: false, isVerfied: false, contents: bodyParameter, sign: '', image: '', imageMetaData: {} }\n    } else {\n      this.contents = { encrypted: false, isVerfied: false, contents: '', sign: '', image: bodyParameter.image, imageMetaData: bodyParameter.imageMetaData }\n    }\n    let body = this.contents\n    let bodyJson = JSON.stringify(body)\n    if (sendToJsonWebKey) this.#sendToPubKey = sbCrypto.extractPubKey(sendToJsonWebKey)!\n\n    _sb_assert(bodyJson.length < this.MAX_SB_BODY_SIZE,\n      `SBMessage(): body must be smaller than ${this.MAX_SB_BODY_SIZE / 1024} KiB (we got ${bodyJson.length / 1024})})`)\n    this.channel = channel\n    this.ready = new Promise<SBMessage>((resolve) => {\n      // console.log(channel)\n      channel.channelReady.then(async () => {\n        this.contents.sender_pubKey = this.channel.exportable_pubKey!\n        if (channel.userName) this.contents.sender_username = channel.userName\n        const signKey = this.channel.channelSignKey\n        const sign = sbCrypto.sign(signKey, body.contents)\n        const image_sign = sbCrypto.sign(signKey!, this.contents.image)\n        const imageMetadata_sign = sbCrypto.sign(signKey, JSON.stringify(this.contents.imageMetaData))\n        if (this.#sendToPubKey) {\n          this.#encryptionKey = await sbCrypto.deriveKey(\n            this.channel.privateKey,\n            await sbCrypto.importKey(\"jwk\", this.#sendToPubKey, \"ECDH\", true, []),\n            \"AES\", false, [\"encrypt\", \"decrypt\"]\n          )\n        } else {\n          this.#encryptionKey = this.channel.keys.encryptionKey\n        }\n        Promise.all([sign, image_sign, imageMetadata_sign]).then((values) => {\n          this.contents.sign = values[0]\n          this.contents.image_sign = values[1]\n          this.contents.imageMetadata_sign = values[2]\n          this.contents.imgObjVersion = '2' // default for anything new\n          // NOTE: mtg:adding this breaks messages... but I dont understand why\n          // const isVerfied = await this.channel.api.postPubKey(this.channel.exportable_pubKey!)\n          // console.log('here',isVerfied)\n          // this.contents.isVerfied = isVerfied?.success ? true : false\n          // console.log(this)\n          resolve(this)\n        })\n      })\n    })\n  }\n\n  @Ready get encryptionKey() { return this.#encryptionKey }\n  get sendToPubKey() { return this.#sendToPubKey }\n\n  /**\n   * SBMessage.send()\n   *\n   * @param {SBMessage} message - the message object to send\n   */\n  send() {\n    return new Promise<string>((resolve, reject) => {\n      this.ready.then(() => {\n        this.channel.send(this).then((result) => {\n          if (result === \"success\") {\n            resolve(result)\n          } else {\n            reject(result)\n          }\n        })\n      })\n    })\n    // TODO: i've punted on queue here <--- queueMicrotaks maybe?\n  }\n} /* class SBMessage */\n\n\n/**\n * Channel Class\n *\n * Join a channel, returns channel object.\n *\n * Currently, you must have an identity when connecting, because every single\n * message is signed by sender. TODO is to look at how to provide a 'listening'\n * mode on channels.\n *\n * Most classes in SB follow the \"ready\" template: objects can be used\n * right away, but they decide for themselves if they're ready or not.\n */\nabstract class Channel extends SB384 {\n  /**\n   * Channel Class\n   * \n   * This is the main work horse for channels. However, it is ABSTRACT,\n   * meaning you need a 'concrete' class to use it.\n   * \n   * Currently you have two options:\n   * \n   * You can create a ChannelEndpoint object. That can do everything against\n   * a channel except send/receive messages synchronously.\n   * \n   * The other option is ChannelSocket, which does everything ChannelEndpoint\n   * does, but ALSO connects with a web socket.\n   * \n   * So unless you're actually connecting with intent on interactive, fast\n   * messaging, an endpoint is sufficient. In fact, UNLESS you are going to\n   * do send/receive, you should use ChannelEndpoint, not ChannelSocket.\n   * \n   * In our current thinking, 'Channel' captures pretty much everything, \n   * except how you want (instant) messaging to be hooked up. So for example, our\n   * next class might be 'ChannelP2P', which would be setting up webrtc\n   * data channel connections in a mesh.\n   * \n   * Note that you don't need to worry about what API calls involve race\n   * conditions and which don't, jslib will do that for you.\n   * \n   * @param Snackabra - server to join\n   * @param JsonWebKey - key to use to join (optional)\n   * @param string - the <a href=\"../glossary.html#term-channel-name\">Channel Name</a> to find on that server (optional)\n   * \n   */\n\n  // ready: Promise<Channel>\n  channelReady: Promise<Channel>\n  #ChannelReadyFlag: boolean = false // must be named <class>ReadyFlag\n\n  #sbServer: SBServer\n  motd?: string = ''\n  locked?: boolean = false\n  owner: boolean = false\n  admin: boolean = false\n  adminData?: Dictionary<any> // TODO: make into getter\n\n  verifiedGuest: boolean = false\n  userName: string = ''\n\n  #channelKeys?: ChannelKeys;\n  #channelSignKey?: CryptoKey;\n  #channelId?: string\n\n  #cursor: string = ''; // last (oldest) message key seen\n  #channelApi: string = '';\n  #channelServer: string = '';\n\n  abstract send(message: SBMessage): Promise<string>\n\n  constructor(sbServer: SBServer, key?: JsonWebKey, channelId?: string) {\n    if (DBG2) console.log(\"CONSTRUCTOR new channel\")\n    _sb_assert(channelId, \"Channel(): as of jslib 1.1.x the channelId must be provided\")\n    super(key)\n    this.#sbServer = sbServer\n    this.#channelId = channelId\n    this.#channelApi = sbServer.channel_server + '/api/'\n    this.#channelServer = sbServer.channel_server + '/api/room/'\n\n    this.channelReady = new Promise<Channel>(async (resolve, reject) => {\n      await this.sb384Ready\n      if (!this.#channelId) {\n        reject(\"Channel(): no channel ID provided\")\n      }\n      // xTODO: check all known servers for this channel\n      SBFetch(this.#sbServer.channel_server + '/api/room/' + stripA32(this.#channelId!) + '/getChannelKeys',\n        {\n          method: 'GET',\n          headers: { 'Content-Type': 'application/json' },\n        })\n        .then((response: Response) => {\n          if (!response.ok)\n            reject(\"ChannelEndpoint(): failed to get channel keys (network response not ok)\");\n          return response.json() as unknown as ChannelKeyStrings // continues processing below\n        })\n        .then(async (data) => {\n          if (data.error)\n            reject(\"ChannelEndpoint(): failed to get channel keys (error in response)\");\n          await this.#loadKeys(data)\n          // now we're ready\n          this.#ChannelReadyFlag = true\n          resolve(this)\n        })\n        .catch((e: Error) => { reject(\"ChannelApi Error [1]: \" + WrapError(e)) })\n    })\n  }\n\n  /** @private */\n  async #setKeys(k: ChannelKeys) {\n    this.#channelKeys = k\n    if (DBG) {\n      console.log(\"set channelkeys to 'k':\")\n      console.log(k)\n    }\n    _sb_assert(this.#channelKeys, \"Channel.importKeys: no channel keys (?)\")\n    _sb_assert(this.#channelKeys!.publicSignKey, \"Channel.importKeys: no public sign key (?)\")\n    _sb_assert(this.privateKey, \"Channel.importKeys: no private key (?)\")\n    this.#channelSignKey = await sbCrypto.deriveKey(\n      this.privateKey!, this.#channelKeys.publicSignKey, 'HMAC', false, ['sign', 'verify']\n    )\n  }\n\n  /** @private */\n  async #loadKeys(keyStrings: ChannelKeyStrings): Promise<void> {\n    if (DBG) {\n      console.log(\"loading keys:\")\n      console.log(keyStrings)\n    }\n    await this.#setKeys(await sbCrypto.channelKeyStringsToCryptoKeys(keyStrings))\n  }\n\n  @Memoize @Ready get keys() { return this.#channelKeys! }\n  @Memoize @Ready get sbServer() { return this.#sbServer }\n  @Memoize @Ready get readyFlag(): boolean { return this.#ChannelReadyFlag }\n  @Memoize @Ready get api() { return this } // for compatibility\n  @Memoize @Ready get channelId() { return this.#channelId }\n  @Memoize @Ready get channelSignKey() { return (this.#channelSignKey!) }\n  // @Memoize @Ready get capacity() { return this.#capacity }\n\n  /**\n   * Channel.getLastMessageTimes\n   */\n  getLastMessageTimes() {\n    // xTODO: convert to new API call model\n    return new Promise((resolve, reject) => {\n      SBFetch(this.#channelApi + '/getLastMessageTimes', {\n        method: 'POST', body: JSON.stringify([this.channelId])\n      }).then((response: Response) => {\n        if (!response.ok) {\n          reject(new Error('Network response was not OK'));\n        }\n        return response.json();\n      }).then((message_times) => {\n        resolve(message_times[this.channelId!]);\n      }).catch((e: Error) => {\n        reject(e);\n      });\n    });\n  }\n\n  /**\n   * Channel.getOldMessages\n   * \n   * Will return most recent messages from the channel.\n   * \n   * @param currentMessagesLength - number to fetch (default 100)\n   * @param paginate - if true, will paginate from last request (default false)\n   *\n   */\n  getOldMessages(currentMessagesLength: number = 100, paginate: boolean = false): Promise<Array<ChannelMessage>> {\n    // xTODO: convert to new API call model\n    return new Promise(async (resolve, reject) => {\n      if (!this.channelId) {\n        reject(\"Channel.getOldMessages: no channel ID (?)\")\n      }\n      // make sure channel is ready\n      if (!this.#ChannelReadyFlag) {\n        if (DBG) console.log(\"Channel.getOldMessages: channel not ready (we will wait)\")\n        await (this.channelReady)\n        if (!this.#channelKeys)\n          reject(\"Channel.getOldMessages: no channel keys (?) despite waiting\")\n      }\n      // TODO: we want to cache (merge) these messages into a local cached list (since they are immutable)\n      let cursorOption = '';\n      if (paginate)\n        cursorOption = '&cursor=' + this.#cursor;\n      SBFetch(this.#channelServer + stripA32(this.channelId!) + '/oldMessages?currentMessagesLength=' + currentMessagesLength + cursorOption, {\n        method: 'GET',\n      }).then(async (response: Response) => {\n        if (!response.ok) reject(new Error('Network response was not OK'));\n        return response.json();\n      }).then((messages) => {\n        if (DBG) {\n          console.log(\"getOldMessages\")\n          console.log(messages)\n        }\n        Promise.all(Object\n          .keys(messages)\n          .filter((v) => messages[v].hasOwnProperty('encrypted_contents'))\n          .map((v) => deCryptChannelMessage(v, messages[v].encrypted_contents, this.#channelKeys!)))\n          .then((unfilteredDecryptedMessageArray) => unfilteredDecryptedMessageArray.filter((v): v is ChannelMessage => Boolean(v)))\n          .then((decryptedMessageArray) => {\n            let lastMessage = decryptedMessageArray[decryptedMessageArray.length - 1];\n            if (lastMessage)\n              this.#cursor = lastMessage._id || lastMessage.id || '';\n            if (DBG2) console.log(decryptedMessageArray)\n            resolve(decryptedMessageArray)\n          })\n      }).catch((e: Error) => {\n        reject(e);\n      });\n    });\n  }\n\n  async #callApi(path: string): Promise<any>\n  async #callApi(path: string, body: any): Promise<any>\n  async #callApi(path: string, body?: any): Promise<any> {\n    if (DBG) console.log(\"#callApi:\", path)\n    if (!this.#ChannelReadyFlag) {\n      console.log(\"ChannelApi.#callApi: channel not ready (we will wait)\")\n      await (this.channelReady)\n    }\n    const method = body ? 'POST' : 'GET'\n    return new Promise(async (resolve, reject) => {\n      if (!this.channelId) reject(\"ChannelApi.#callApi: no channel ID (?)\")\n      await (this.ready)\n      let authString = '';\n      const token_data: string = new Date().getTime().toString()\n      authString = token_data + '.' + await sbCrypto.sign(this.channelSignKey, token_data)\n      let init: RequestInit = {\n        method: method,\n        headers: {\n          'Content-Type': 'application/json',\n          'authorization': authString\n        }\n      }\n      if (body)\n        init.body = JSON.stringify(body);\n      await (this.ready)\n      SBFetch(this.#channelServer + stripA32(this.channelId!) + path, init)\n        .then(async (response: Response) => {\n          const retValue = await response.json()\n          if ((!response.ok) || (retValue.error)) {\n            let apiErrorMsg = 'Network or Server error on Channel API call'\n            if (response.status) apiErrorMsg += ' [' + response.status + ']'\n            if (retValue.error) apiErrorMsg += ': ' + retValue.error\n            reject(new Error(apiErrorMsg))\n          } else {\n            resolve(retValue)\n          }\n        })\n        .catch((e: Error) => { reject(\"ChannelApi (SBFetch) Error [2]: \" + WrapError(e)) })\n    })\n  }\n\n  /**\n   * Update (set) the capacity of the channel; Owner only\n   */\n  @Ready updateCapacity(capacity: number) { return this.#callApi('/updateRoomCapacity?capacity=' + capacity) }\n  /**\n   * getCapacity\n   */\n  @Ready getCapacity() { return (this.#callApi('/getRoomCapacity')) }\n  /**\n   * getStorageLimit (current storage budget)\n   */\n  @Ready getStorageLimit() { return (this.#callApi('/getStorageLimit')) }\n  /**\n   * getMother\n   * \n   * Get the channelID from which this channel was budded. Note that\n   * this is only accessible by Owner (as well as hosting server)\n   */\n  @Ready getMother() { return (this.#callApi('/getMother')) }\n  /**\n   * getJoinRequests\n   */\n  @Ready getJoinRequests() { return this.#callApi('/getJoinRequests') }\n  /**\n   * isLocked\n   */\n  @ExceptionReject isLocked() { return new Promise<boolean>((resolve) => (this.#callApi('/roomLocked')).then((d) => resolve(d.locked === true))) }\n  /**\n   * Set message of the day\n   */\n  @Ready setMOTD(motd: string) { return this.#callApi('/motd', { motd: motd }) }\n  /**\n   * Channel.getAdminData\n   */\n  @Ready getAdminData(): Promise<ChannelAdminData> { return this.#callApi('/getAdminData') }\n\n  /**\n   * Channel.downloadData\n   */\n  @Ready downloadData() {\n    return new Promise((resolve, reject) => {\n      this.#callApi('/downloadData')\n        .then((data: Dictionary<any>) => {\n          console.log(\"From downloadData:\")\n          console.log(data);\n          Promise.all(Object\n            .keys(data)\n            .filter((v) => {\n              const regex = new RegExp(this.channelId as string);\n              if (v.match(regex)) {\n                const message = jsonParseWrapper(data[v], \"L3318\")\n                if (message.hasOwnProperty('encrypted_contents')) {\n                  if (DBG) console.log(\"Received message: \", message)\n                  return message;\n                }\n              }\n            })\n            .map((v) => {\n              const message = jsonParseWrapper(data[v], \"L3327\")\n              if (DBG2) console.log(v, message.encrypted_contents, this.keys)\n              return deCryptChannelMessage(v, message.encrypted_contents, this.keys)\n            }))\n            .then((unfilteredDecryptedMessageArray) => unfilteredDecryptedMessageArray.filter((v): v is ChannelMessage => Boolean(v)))\n            .then((decryptedMessageArray) => {\n              let storage: any = {}\n              decryptedMessageArray.forEach((message) => {\n                if (!message.control && message.imageMetaData!.imageId) {\n                  const f_control_msg = decryptedMessageArray.find((ctrl_msg) => ctrl_msg.id && ctrl_msg.id == message.imageMetaData!.imageId)\n                  const p_control_msg = decryptedMessageArray.find((ctrl_msg) => ctrl_msg.id && ctrl_msg.id == message.imageMetaData!.previewId)\n                  storage[`${message.imageMetaData!.imageId}.f`] = f_control_msg?.verificationToken\n                  storage[`${message.imageMetaData!.previewId}.p`] = p_control_msg?.verificationToken\n                }\n              })\n              resolve({ storage: storage, channel: data })\n            })\n        }).catch((error: Error) => {\n          reject(error);\n        });\n    });\n  }\n\n  @Ready uploadChannel(channelData: ChannelData) {\n    return this.#callApi('/uploadRoom', channelData)\n  }\n\n  @Ready authorize(ownerPublicKey: Dictionary<any>, serverSecret: string) {\n    return this.#callApi('/authorizeRoom', { roomId: this.channelId, SERVER_SECRET: serverSecret, ownerKey: ownerPublicKey })\n  }\n\n  // deprecated - this is now implicitly done on first connect\n  @Ready postPubKey(_exportable_pubKey: JsonWebKey): Promise<{ success: boolean }> {\n    throw new Error(\"postPubKey() deprecated\")\n  }\n\n  @Ready storageRequest(byteLength: number): Promise<Dictionary<any>> {\n    return this.#callApi('/storageRequest?size=' + byteLength)\n  }\n\n  /**\n   * Channel.lock()\n   * \n   * Locks the channel, so that new visitors need an \"ack\" to join..\n   * \n   */\n  @Ready lock() {\n    console.warn(\"WARNING: lock() on channel api has not been tested/debugged fully ..\")\n    return new Promise(async (resolve, reject) => {\n      if (this.keys.lockedKey == null && this.admin) {\n        const _locked_key: CryptoKey = await crypto.subtle.generateKey({\n          name: 'AES-GCM', length: 256\n        }, true, ['encrypt', 'decrypt']);\n        const _exportable_locked_key: Dictionary<any> = await crypto.subtle.exportKey('jwk', _locked_key);\n        this.#callApi('/lockRoom')\n          .then((data: Dictionary<any>) => {\n            if (data.locked) {\n              this.acceptVisitor(JSON.stringify(this.exportable_pubKey!))\n                .then(() => {\n                  resolve({ locked: data.locked, lockedKey: _exportable_locked_key })\n                })\n            }\n          })\n          .catch((error: Error) => { reject(error) });\n      } else {\n        reject(new Error('no lock key or not admin'));\n      }\n    });\n  }\n\n  // TODO: test this guy, i doubt if it's working post-re-factor\n  @Ready acceptVisitor(pubKey: string) {\n    console.warn(\"WARNING: acceptVisitor() on channel api has not been tested/debugged fully ..\")\n    // todo: assert that you're owner\n    return new Promise(async (resolve, reject) => {\n      if (!this.privateKey /* this.keys.privateKey */)\n        reject(new Error(\"acceptVisitor(): no private key\"))\n      const shared_key = await sbCrypto.deriveKey(\n        this.privateKey /* this.keys.privateKey! */,\n        await sbCrypto.importKey('jwk', jsonParseWrapper(pubKey, 'L2276'), 'ECDH', false, []), 'AES', false, ['encrypt', 'decrypt']\n      );\n      const _encrypted_locked_key = await sbCrypto.encrypt(sbCrypto.str2ab(JSON.stringify(this.keys.lockedKey!)), shared_key)\n      resolve(this.#callApi('/acceptVisitor',\n        {\n          pubKey: pubKey, lockedKey: JSON.stringify(_encrypted_locked_key)\n        }))\n    });\n  }\n\n  // 2023.05.06:\n  // In previous hosting strategy, the concept was that the host / SSO would\n  // create and allocate a channel, but the SSO would keep track of owner key;\n  // thus we needed a mechanism to rotate the owner key, should the user\n  // wish to not have the SSO have access.  That way on a per-hosting service\n  // basis, the provider could decide policy (eg an enterprise might disallow\n  // owner key rotation).  In our new (2023) design, we have generalized channels\n  // to be (much) more than a \"room\".  In the new design, channels are also\n  // carriers of api and storage budget, and to control all the keys, a user\n  // can \"budd()\" off a channel provided by server. Thus in the new design,\n  // owner keys are NEVER rotated (other keys can be rotated). \n  @Ready ownerKeyRotation() {\n    throw new Error(\"ownerKeyRotation() replaced by new budd() approach\")\n  }\n\n  /**\n   * returns a storage token (promise); basic consumption of channel budget\n   */\n  getStorageToken(size: number): Promise<string> {\n    return new Promise((resolve, reject) => {\n      this.#callApi(`/storageRequest?size=${size}`)\n        .then((storageTokenReq) => {\n          if (storageTokenReq.hasOwnProperty('error')) reject(`storage token request error (${storageTokenReq.error})`)\n          resolve(JSON.stringify(storageTokenReq))\n        })\n        .catch((e: Error) => { reject(\"ChannelApi (getStorageToken) Error [3]: \" + WrapError(e)) })\n    });\n  }\n\n  // ToDo: if both keys and storage are specified, should we check for server secret?\n\n  /**\n   * \"budd\" will spin a channel off an existing one.\n   * You need to provide one of the following combinations of info:\n   * \n   * - nothing: create new channel and transfer all storage budget\n   * - just storage amount: creates new channel with that amount, returns new channel\n   * - just a target channel: moves all storage budget to that channel\n   * - just keys: creates new channel with those keys and transfers all storage budget\n   * - keys and storage amount: creates new channel with those keys and that storage amount\n   * \n   * In the first (special) case you can just call budd(), in the other\n   * cases you need to fill out the 'options' object.\n   * \n   * Another way to remember the above: all combinations are valid except\n   * both a target channel and assigning keys.\n   * \n   * Note: if you're specifying the target channel, then the return values will\n   * not include the private key (that return value will be empty).\n   * \n   * Same channels as mother and target will be a no-op, regardless of other\n   * parameters.\n   * \n   * Note: if you provide a value for 'storage', it cannot be undefined. If you\n   * wish it to be Infinity, then you need to omit the property from options.\n   * \n   * Future: negative amount of storage leaves that amount behind, the rest is transferred\n   * \n   */\n  budd(): Promise<SBChannelHandle> // clone and full plunder\n  budd(options:\n    {\n      keys?: JsonWebKey;\n      storage?: number;\n      targetChannel?: SBChannelId;\n    }): Promise<SBChannelHandle> // clone with specified keys, storage, and target channel\n  @Ready budd(options?:\n    {\n      keys?: JsonWebKey;\n      storage?: number;\n      targetChannel?: SBChannelId;\n    }): Promise<SBChannelHandle> {\n    let { keys, storage, targetChannel } = options ?? {};\n    return new Promise<SBChannelHandle>(async (resolve, reject) => {\n      if ((options) && (options.hasOwnProperty('storage')) && (options.storage === undefined))\n        // this catches the case where callee intended storage to have a value but somehow it didn't\n        reject(\"If you omit 'storage' it defaults to Infinity, but you cannot set 'storage' to undefined\")\n      try {\n        if (!storage) storage = Infinity;\n        if (targetChannel) {\n          // just a straight up transfer of budget\n          if (this.#channelId == targetChannel) throw new Error(\"[budd()]: You can't specify the same channel as targetChannel\")\n          if (keys) throw new Error(\"[budd()]: You can't specify both a target channel and keys\");\n          resolve(this.#callApi(`/budd?targetChannel=${targetChannel}&transferBudget=${storage}`))\n        } else {\n          // we are creating a new channel\n          const { channelData, exportable_privateKey } = await newChannelData(keys ? keys : null);\n          let resp: Dictionary<any> = await this.#callApi(`/budd?targetChannel=${channelData.roomId}&transferBudget=${storage}`, channelData)\n          if (resp.success) {\n            resolve({ channelId: channelData.roomId!, key: exportable_privateKey })\n          } else {\n            reject(JSON.stringify(resp));\n          }\n        }\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n\n  // // currently not used by webclient, so these are not hooked up\n  // notifications() { }\n  // getPubKeys() { }\n  // ownerUnread() { }\n  // registerDevice() { }\n\n} /* class Channel */\n//#region\n\n// catch and call out if this is missing\nfunction noMessageHandler(_m: ChannelMessage): void { _sb_assert(false, \"NO MESSAGE HANDLER\"); }\n\n/**\n * ChannelSocket\n */\nexport class ChannelSocket extends Channel {\n  ready: Promise<ChannelSocket>\n  channelSocketReady: Promise<ChannelSocket>\n  #ChannelSocketReadyFlag: boolean = false // must be named <class>ReadyFlag\n\n  #ws: WSProtocolOptions\n  #sbServer: SBServer\n  #onMessage = noMessageHandler // the user message handler\n  #ack: Map<string, (value: string | PromiseLike<string>) => void> = new Map()\n  #traceSocket: boolean = false // should not be true in production\n  #resolveFirstMessage: (value: ChannelSocket | PromiseLike<ChannelSocket>) => void = () => { _sb_exception('L2461', 'this should never be called') }\n  #firstMessageEventHandlerReference: (e: MessageEvent<any>) => void = (_e: MessageEvent<any>) => { _sb_exception('L2462', 'this should never be called') }\n\n  /**\n   * \n   * ChannelSocket constructor\n   * \n   * This extends Channel. Use this instead of ChannelEndpoint if you\n   * are going to be sending/receiving messages.\n   * \n   * You send by calling channel.send(msg: SBMessage | string), i.e.\n   * you can send a quick string.\n   * \n   * You can set your message handler upon creation, or later by using\n   * channel.onMessage = (m: ChannelMessage) => { ... }.\n   * \n   * This implementation uses websockeds to connect all participating\n   * clients through a single servlet (somewhere), with very fast\n   * forwarding.\n   * \n   * You don't need to worry about managing resources, like closing it,\n   * or checking if it's open. It will close based on server behavior,\n   * eg it's up to the server to close the connection based on inactivity.\n   * The ChannelSocket will re-open if you try to send against a closed\n   * connection. You can check status with channelSocket.status if you\n   * like, but it shouldn't be necessary.\n   * \n   * Messages are delivered as type ChannelMessage. Usually they are\n   * simple blobs of data that are encrypted: the ChannelSocket will\n   * decrypt them for you. It also handles a simple ack/nack mechanism\n   * with the server transparently.\n   * \n   * Be aware that if ChannelSocket doesn't know how to handle a certain\n   * message, it will generally just forward it to you as-is. \n   * \n   * @param sbServer \n   * @param onMessage \n   * @param key \n   * @param channelId \n   */\n  constructor(sbServer: SBServer, onMessage: (m: ChannelMessage) => void, key?: JsonWebKey, channelId?: string) {\n    super(sbServer, key, channelId /*, identity ? identity : new Identity() */) // initialize 'channel' parent\n    _sb_assert(sbServer.channel_ws, 'ChannelSocket(): no websocket server name provided')\n    _sb_assert(onMessage, 'ChannelSocket(): no onMessage handler provided')\n    const url = sbServer.channel_ws + '/api/room/' + channelId + '/websocket'\n    this.#onMessage = onMessage\n    this.#sbServer = sbServer\n    this.#ws = {\n      url: url,\n      // websocket: new WebSocket(url),\n      ready: false,\n      closed: false,\n      timeout: 2000\n    }\n    this.ready = this.channelSocketReady = this.#channelSocketReadyFactory()\n  }\n\n  #channelSocketReadyFactory() {\n    if (DBG) console.log(\"++++ CREATING ChannelSocket.readyPromise()\")\n    return new Promise<ChannelSocket>((resolve, reject) => {\n      if (DBG) console.log(\"++++ STARTED ChannelSocket.readyPromise()\")\n      this.#resolveFirstMessage = resolve\n      const url = this.#ws.url\n      if (DBG) { console.log(\"++++++++ readyPromise() has url:\"); console.log(url); }\n      if (!this.#ws.websocket) this.#ws.websocket = new WebSocket(this.#ws.url)\n      if (this.#ws.websocket.readyState === 3) {\n        // it's been closed\n        this.#ws.websocket = new WebSocket(url)\n      } else if (this.#ws.websocket.readyState === 2) {\n        console.warn(\"STRANGE - trying to use a ChannelSocket that is in the process of closing ...\")\n        this.#ws.websocket = new WebSocket(url)\n      }\n      this.#ws.websocket.addEventListener('open', () => {\n        this.#ws.closed = false\n        // need to make sure parent is ready (and has keys)\n        this.channelReady.then(() => {\n          _sb_assert(this.exportable_pubKey, \"ChannelSocket.readyPromise(): no exportable pub key?\")\n          this.#ws.init = { name: JSON.stringify(this.exportable_pubKey) }\n          if (DBG) { console.log(\"++++++++ readyPromise() constructed init:\"); console.log(this.#ws.init); }\n          this.#ws.websocket!.send(JSON.stringify(this.#ws.init)) // this should trigger a response with keys\n        })\n      })\n      this.#firstMessageEventHandlerReference = this.#firstMessageEventHandler.bind(this)\n      this.#ws.websocket.addEventListener('message', this.#firstMessageEventHandlerReference);\n      this.#ws.websocket.addEventListener('close', (e: CloseEvent) => {\n        this.#ws.closed = true\n        if (!e.wasClean) {\n          console.log(`ChannelSocket() was closed (and NOT cleanly: ${e.reason} from ${this.#sbServer.channel_server}`)\n        } else {\n          if (e.reason.includes(\"does not have an owner\"))\n            reject(`No such channel on this server (${this.#sbServer.channel_server})`)\n          else console.log('ChannelSocket() was closed (cleanly): ', e.reason)\n        }\n        reject('wbSocket() closed before it was opened (?)')\n      })\n      this.#ws.websocket.addEventListener('error', (e) => {\n        this.#ws.closed = true\n        console.log('ChannelSocket() error: ', e)\n        reject('ChannelSocket creation error (see log)')\n      })\n      // let us set a timeout to catch and make sure this thing resoles within 0.5 seconds\n      // todo: add as a decorator for ready-template style constructors\n      setTimeout(() => {\n        if (!this.#ChannelSocketReadyFlag) {\n          console.warn(\"ChannelSocket() - this socket is not resolving (waited 10s) ...\")\n          console.log(this)\n          reject('ChannelSocket() - this socket is not resolving (waited 10s) ...')\n        } else {\n          if (DBG) {\n            console.log(\"ChannelSocket() - this socket resolved\")\n            console.log(this)\n          }\n        }\n      }, 10000)\n    })\n\n  }\n\n  /** @private */\n  async #processMessage(msg: any) {\n    let m = msg.data\n    if (this.#traceSocket) {\n      console.log(\"... raw unwrapped message:\")\n      console.log(structuredClone(m))\n    }\n    const data = jsonParseWrapper(m, 'L1489')\n    if (this.#traceSocket) {\n      console.log(\"... json unwrapped version of raw message:\")\n      console.log(Object.assign({}, data))\n    }\n    if (typeof this.#onMessage !== 'function')\n      _sb_exception('ChannelSocket', 'received message but there is no handler')\n\n    const message = data as ChannelMessage\n    try {\n      // messages are structured a bit funky for historical reasons\n      const m01 = Object.entries(message)[0][1]\n\n      if (Object.keys(m01)[0] === 'encrypted_contents') {\n        if (DBG) {\n          console.log(\"++++++++ #processMessage: received message:\")\n          console.log(m01.encrypted_contents.content)\n        }\n\n        // check if this message is one that we've recently sent\n        const hash = await crypto.subtle.digest('SHA-256', new TextEncoder().encode(m01.encrypted_contents.content))\n        const ack_id = arrayBufferToBase64(hash)\n        if (DBG2) console.log(\"Received message with hash:\", ack_id)\n        const r = this.#ack.get(ack_id)\n        if (r) {\n          if (this.#traceSocket) console.log(`++++++++ #processMessage: found matching ack for id ${ack_id}`)\n          this.#ack.delete(ack_id)\n          r(\"success\") // we first resolve that outstanding send (and then also deliver message)\n        }\n\n        const m00 = Object.entries(data)[0][0]\n        // the 'iv' field as incoming should be base64 encoded, with 16 b64\n        // characters translating here to 12 bytes\n        const iv_b64 = m01.encrypted_contents.iv\n        // open question: if there are any issues decrypting, should we forward as-is?\n        if ((iv_b64) && (_assertBase64(iv_b64)) && (iv_b64.length == 16)) {\n          m01.encrypted_contents.iv = base64ToArrayBuffer(iv_b64)\n          try {\n            const m = await deCryptChannelMessage(m00, m01.encrypted_contents, this.keys)\n            if (!m)\n              return // skip if there's an issue\n            if (this.#traceSocket) {\n              console.log(\"++++++++ #processMessage: passing to message handler:\")\n              console.log(Object.assign({}, m))\n            }\n            // we process 'whispers' here, they're 1-1 messages, and can be skipped if not for us\n\n\n            this.#onMessage(m)\n          } catch {\n            console.warn('Error decrypting message, dropping (ignoring) message')\n          }\n        } else {\n          console.error('#processMessage: - iv is malformed, should be 16-char b64 string (ignoring)')\n        }\n      } else {\n        // other (future) message types would be parsed here\n        console.warn(\"++++++++ #processMessage: can't decipher message, passing along unchanged:\")\n        console.log(Object.assign({}, message))\n        this.onMessage(message)\n      }\n    } catch (e) {\n      console.log(`++++++++ #processMessage: caught exception while decyphering (${e}), passing it along unchanged`)\n      this.onMessage(message)\n      // console.error(`#processmessage: cannot handle locked channels yet (${e})`)\n      // TODO: locked key might never resolve (if we don't have it)\n      // TODO: ... generally speaking need to test/fix locked channels\n      // unwrapped = await sbCrypto.unwrap(this.keys.lockedKey, message.encrypted_contents, 'string')\n    }\n  }\n\n  #insideFirstMessageHandler(e: MessageEvent) {\n    console.warn(\"WARNING: firstMessageEventHandler() called recursively (?)\")\n    console.warn(e)\n  }\n\n  // we use (bound) message handlers orchestrate who handles first message (and only once)\n  #firstMessageEventHandler(e: MessageEvent) {\n    if (this.#traceSocket) console.log(\"FIRST MESSAGE HANDLER CALLED\")\n    const blocker = this.#insideFirstMessageHandler.bind(this)\n    this.#ws.websocket!.addEventListener('message', blocker)\n    this.#ws.websocket!.removeEventListener('message', this.#firstMessageEventHandlerReference)\n    // first time should be a handshake of keys, they should match what we have;\n    // there may be other information in the message (eg motd, roomLocked)\n    if (DBG) { console.log(\"++++++++ readyPromise() received ChannelKeysMessage:\"); console.log(e); }\n    const message = jsonParseWrapper(e.data, 'L2239') as ChannelKeysMessage\n    if (DBG) console.log(message)\n    _sb_assert(message.ready, 'got roomKeys but channel reports it is not ready (?)')\n    this.motd = message.motd\n    this.locked = message.roomLocked\n    const exportable_owner_pubKey = jsonParseWrapper(message.keys.ownerKey, 'L2246')\n    // just small sanity check on owner key (x marks the spot)\n    _sb_assert(this.keys.ownerPubKeyX === exportable_owner_pubKey.x, 'ChannelSocket.readyPromise(): owner key mismatch??')\n    _sb_assert(this.readyFlag, '#ChannelReadyFlag is false, parent not ready (?)')\n    // this sets us as owner only if the keys match\n\n    this.owner = sbCrypto.compareKeys(exportable_owner_pubKey, this.exportable_pubKey!)\n    // TODO: we have mostly lost the \"admin\" concept (need adminData?)\n    // this.adminData = await this.api.getAdminData()\n    // @psm: we want to reserve 'admin' for future SSO use\n    // this.admin = this.owner\n    this.admin = false\n    // once we've gotten our keys, we substitute the main message handler\n    this.#ws.websocket!.addEventListener('message', this.#processMessage.bind(this))\n    this.#ws.websocket!.removeEventListener('message', blocker)\n    if (DBG) console.log(\"++++++++ readyPromise() all done - resolving!\")\n    this.#ChannelSocketReadyFlag = true\n    this.#resolveFirstMessage(this)\n  }\n\n  get status() {\n    if (!this.#ws.websocket) return 'CLOSED'\n    else switch (this.#ws.websocket.readyState) {\n      case 0: return 'CONNECTING'\n      case 1: return 'OPEN'\n      case 2: return 'CLOSING'\n      default: return 'CLOSED'\n    }\n  }\n\n  set onMessage(f: (m: ChannelMessage) => void) { this.#onMessage = f }\n  @Ready get onMessage() { return this.#onMessage }\n\n  /** Enables debug output */\n  set enableTrace(b: boolean) {\n    this.#traceSocket = b;\n    if (b) console.log(\"==== jslib ChannelSocket: Tracing enabled ====\")\n  }\n\n  /**\n    * ChannelSocket.send()\n    *\n    * Returns a promise that resolves to \"success\" when sent,\n    * or an error message if it fails.\n    */\n  @VerifyParameters\n  send(msg: SBMessage | string): Promise<string> {\n    let message: SBMessage = typeof msg === 'string' ? new SBMessage(this, msg) : msg\n    _sb_assert(this.#ws.websocket, \"ChannelSocket.send() called before ready\")\n    if (this.#ws.closed) {\n      if (this.#traceSocket) console.info(\"send() triggered reset of #readyPromise() (normal)\")\n      this.ready = this.channelSocketReady = this.#channelSocketReadyFactory()\n      this.#ChannelSocketReadyFlag = true\n    }\n    return new Promise((resolve, reject) => {\n      message.ready.then((message) => { // message needs to be ready\n        this.ready.then(() => { // so does channel socket\n          if (!this.#ChannelSocketReadyFlag) reject(\"ChannelSocket.send() is confused - ready or not?\")\n          switch (this.#ws.websocket!.readyState) {\n            case 1: // OPEN\n              if (this.#traceSocket) {\n                console.log(\"++++++++ ChannelSocket.send(): Wrapping message contents:\")\n                console.log(Object.assign({}, message.contents))\n              }\n              sbCrypto.wrap(message.encryptionKey!, JSON.stringify(message.contents), 'string')\n                .then((wrappedMessage) => {\n                  const m = JSON.stringify({\n                    encrypted_contents: wrappedMessage,\n                    recipient: message.sendToPubKey ? message.sendToPubKey : undefined\n                  })\n                  if (this.#traceSocket) {\n                    console.log(\"++++++++ ChannelSocket.send(): sending message:\")\n                    console.log((wrappedMessage.content as string).slice(0, 100) + \"  ...  \" + (wrappedMessage.content as string).slice(-100))\n                  }\n                  crypto.subtle.digest('SHA-256', new TextEncoder().encode(wrappedMessage.content as string))\n                    .then((hash) => {\n                      const messageHash = arrayBufferToBase64(hash)\n                      if (this.#traceSocket) {\n                        console.log(\"++++++++ ChannelSocket.send():Which has hash:\")\n                        console.log(messageHash)\n                      }\n                      // const ackPayload = { timestamp: Date.now(), type: 'ack', _id: _id }\n                      this.#ack.set(messageHash, resolve)\n                      this.#ws.websocket!.send(m)\n                      // TODO: not sure why we needed separate 'ack' interaction, just resolve on seeing message back?\n                      // this.#ws.websocket!.send(JSON.stringify(ackPayload));\n                      setTimeout(() => {\n                        if (this.#ack.has(messageHash)) {\n                          this.#ack.delete(messageHash)\n                          const msg = `Websocket request timed out (no ack) after ${this.#ws.timeout}ms (${messageHash})`\n                          console.error(msg)\n                          reject(msg)\n                        } else {\n                          // normal behavior\n                          if (this.#traceSocket) console.log(\"++++++++ ChannelSocket.send() completed sending\")\n                          resolve(\"success\")\n                        }\n                      }, this.#ws.timeout)\n                    })\n                })\n              break\n            case 3: // CLOSED\n            case 0: // CONNECTING\n            case 2: // CLOSING\n              const errMsg = 'socket not OPEN - either CLOSED or in the state of CONNECTING/CLOSING'\n              // _sb_exception('ChannelSocket', errMsg)\n              reject(errMsg)\n          }\n        })\n      })\n    })\n  }\n\n  /** @type {JsonWebKey} */ @Memoize @Ready get exportable_owner_pubKey() { return this.keys.ownerKey }\n\n} /* class ChannelSocket */\n\n\n//# region - classes ChannelEndpoint\n/**\n *\n * ChannelEndpoint\n *\n * Gives access to a Channel API (without needing to connect to socket).\n * It's fully functional except it won't send or receive messages\n * (obviously, that's what a socket is for, but we might add send/receive\n * in the future for non-socket use cases)\n */\nexport class ChannelEndpoint extends Channel {\n  constructor(sbServer: SBServer, key?: JsonWebKey, channelId?: string) {\n    super(sbServer, key, channelId)\n  }\n\n  send(_m: SBMessage | string, _messageType?: 'string' | 'SBMessage'): Promise<string> {\n    return new Promise<string>((_resolve, reject) => {\n      reject('ChannelEndpoint.send(): send outside ChannelSocket not yet implemented')\n    })\n  }\n\n  set onMessage(_f: CallableFunction) {\n    _sb_assert(false, \"ChannelEndpoint.onMessage: send/receive outside ChannelSocket not yet implemented\")\n  }\n}\n//#endregion - classes ChannelEndpoint\n\n\nasync function deCryptChannelMessage(m00: string, m01: EncryptedContents, keys: ChannelKeys) {\n  const z = messageIdRegex.exec(m00)\n  let encryptionKey = keys.encryptionKey // default\n  if (z) {\n    let m: ChannelEncryptedMessage = {\n      type: 'encrypted',\n      channelID: z[1],\n      timestampPrefix: z[2],\n      _id: z[1] + z[2],\n      encrypted_contents: encryptedContentsMakeBinary(m01)\n    }\n    const unwrapped = await sbCrypto.unwrap(encryptionKey, m.encrypted_contents!, 'string')\n    let m2: ChannelMessage = { ...m, ...jsonParseWrapper(unwrapped, 'L1977') };\n    if (m2.contents) {\n      m2.text = m2.contents\n      // if(!m2?.contents?.hasOwnProperty('isVerfied')){\n      //   m2.contents!.isVerified\n      // }\n    }\n    m2.user = {\n      name: m2.sender_username ? m2.sender_username : 'Unknown',\n      _id: m2.sender_pubKey\n    }\n\n    if ((m2.verificationToken) && (!m2.sender_pubKey)) {\n      console.error('ERROR: message with verification token is lacking sender identity (cannot be verified).')\n      return (undefined)\n    }\n\n    // todo: we could speed this up by caching imported keys from known senders\n    const senderPubKey = await sbCrypto.importKey('jwk', m2.sender_pubKey!, 'ECDH', true, [])\n    const verifyKey = await sbCrypto.deriveKey(keys.signKey, senderPubKey, 'HMAC', false, ['sign', 'verify'])\n    const v = await sbCrypto.verify(verifyKey, m2.sign!, m2.contents!)\n\n    if (!v) {\n      console.error(\"***** signature is NOT correct for message (rejecting)\")\n      console.log(\"verifyKey:\")\n      console.log(Object.assign({}, verifyKey))\n      console.log(\"m2.sign\")\n      console.log(Object.assign({}, m2.sign))\n      console.log(\"m2.contents\")\n      console.log(structuredClone(m2.contents))\n      console.log(\"Message:\")\n      console.log(Object.assign({}, m2))\n      console.trace()\n      return (undefined)\n    }\n\n    // if it's a whisper, we unwrap from text to whisper\n    if (m2.whispered === true) {\n      // TODO TODO: add the whisper \n\n    }\n\n    return (m2)\n  } else {\n    console.log(\"++++++++ #processMessage: ERROR - cannot parse channel ID / timestamp, invalid message\")\n    console.log(Object.assign({}, m00))\n    console.log(Object.assign({}, m01))\n    return (undefined)\n  }\n} // deCryptChannelMessage()\n\n/**\n * Basic object handle for a shard (all storage).\n * \n * To RETRIEVE a shard, you need id and verification.\n * \n * To DECRYPT a shard, you need key, iv, and salt. Current\n * generation of shard servers will provide (iv, salt) upon\n * request if (and only if) you have id and verification.\n * \n * Note that id32/key32 are array32 encoded (a32). (Both \n * id and key are 256-bit entities).\n * \n * 'verification' is a 64-bit integer, encoded as a string\n * of up 23 characters: it is four 16-bit integers, either\n * joined by '.' or simply concatenated. Currently all four\n * values are random, future generation only first three\n * are guaranteed to be random, the fourth may be \"designed\".\n * \n * \n * @typedef {Object} SBObjectHandleClass\n * @property {boolean} [SB_OBJECT_HANDLE_SYMBOL] - flag to indicate this is an SBObjectHandle\n * @property {string} version - version of this object\n * @property {SBObjectType} type - type of object\n * @property {string} id - id of object\n * @property {string} key - key of object\n * @property {Base62Encoded} [id32] - optional: array32 format of id\n * @property {Base62Encoded} [key32] - optional: array32 format of key\n * @property {Promise<string>|string} verification - and currently you also need to keep track of this,\n * but you can start sharing / communicating the\n * object before it's resolved: among other things it\n * serves as a 'write-through' verification\n * @property {Uint8Array|string} [iv] - you'll need these in case you want to track an object\n * across future (storage) servers, but as long as you\n * are within the same SB servers you can request them.\n * @property {Uint8Array|string} [salt] - you'll need these in case you want to track an object\n * across future (storage) servers, but as long as you\n * are within the same SB servers you can request them.\n * @property {string} [fileName] - by convention will be \"PAYLOAD\" if it's a set of objects\n * @property {string} [dateAndTime] - optional: time of shard creation\n * @property {string} [shardServer] - optionally direct a shard to a specific server (especially for reads)\n * @property {string} [fileType] - optional: file type (mime)\n * @property {number} [lastModified] - optional: last modified time (of underlying file, if any)\n * @property {number} [actualSize] - optional: actual size of underlying file, if any\n * @property {number} [savedSize] - optional: size of shard (may be different from actualSize)\n * \n */\nexport class SBObjectHandle implements Interfaces.SBObjectHandle_base {\n  version: SBObjectHandleVersions = currentSBOHVersion;\n  #_type: SBObjectType = 'b';\n\n  // internal: these are 32-byte binary values\n  #id_binary?: ArrayBuffer;\n  #key_binary?: ArrayBuffer;\n\n  #verification?: Promise<string> | string;\n  shardServer?: string;\n  iv?: Uint8Array | string;\n  salt?: Uint8Array | string;\n\n  // the rest are conveniences, should probably migrate to SBFileHandle\n  fileName?: string;\n  dateAndTime?: string;\n  fileType?: string;\n  lastModified?: number;\n  actualSize?: number;\n  savedSize?: number;\n\n  constructor(options: Interfaces.SBObjectHandle) {\n    const {\n      version, type, id, key, verification, iv, salt, fileName, dateAndTime,\n      shardServer, fileType, lastModified, actualSize, savedSize,\n    } = options;\n\n    if (type) this.#_type = type\n\n    if (version) {\n      this.version = version\n    } else {\n      // if no version is specified, we try to guess based on BOTH key and id\n      // there is a 6.5% chance that we will guess wrong if it's b62 but which\n      // happens to base b62 tests\n      if ((key) && (id)) {\n        if (isBase62Encoded(key) && isBase62Encoded(id)) {\n          this.version = '2'\n        } else if (isBase64Encoded(key) && isBase64Encoded(id)) {\n          this.version = '1'\n        } else {\n          throw new Error('Unable to determine version from key and id')\n        }\n      } else {\n        // if neither key nor id is specified, we assume version 2\n        this.version = '2'\n      }\n\n    }\n\n    if (id) this.id = id; // use setter\n    if (key) this.key = key; // use setter\n\n    if (verification) this.verification = verification;\n\n    this.iv = iv;\n    this.salt = salt;\n    this.fileName = fileName;\n    this.dateAndTime = dateAndTime;\n    this.shardServer = shardServer;\n    this.fileType = fileType;\n    this.lastModified = lastModified;\n    this.actualSize = actualSize;\n    this.savedSize = savedSize;\n  }\n\n  set id_binary(value: ArrayBuffer) {\n    if (!value) throw new Error('Invalid id_binary');\n    // make sure it is exactly 32 bytes\n    if (value.byteLength !== 32) throw new Error('Invalid id_binary length');\n    this.#id_binary = value;\n    // Dynamically define the getter for id64 when idBinary is set\n    Object.defineProperty(this, 'id64', {\n      get: () => {\n        return arrayBufferToBase64(this.#id_binary!);\n      },\n      enumerable: false,  // Or false if you don't want it to be serialized\n      configurable: false // Allows this property to be redefined or deleted\n    });\n    // same in base62\n    Object.defineProperty(this, 'id32', {\n      get: () => {\n        return arrayBufferToBase62(this.#id_binary!);\n      },\n      enumerable: false,  // Or false if you don't want it to be serialized\n      configurable: false // Allows this property to be redefined or deleted\n    });\n  }\n\n  // same as above for key_binary\n  set key_binary(value: ArrayBuffer) {\n    if (!value) throw new Error('Invalid key_binary');\n    // make sure it is exactly 32 bytes\n    if (value.byteLength !== 32) throw new Error('Invalid key_binary length');\n    this.#key_binary = value;\n    // Dynamically define the getter for key64 when keyBinary is set\n    Object.defineProperty(this, 'key64', {\n      get: () => {\n        return arrayBufferToBase64(this.#key_binary!);\n      },\n      enumerable: false,  // Or false if you don't want it to be serialized\n      configurable: false // Allows this property to be redefined or deleted\n    });\n    // same in base62\n    Object.defineProperty(this, 'key32', {\n      get: () => {\n        return arrayBufferToBase62(this.#key_binary!);\n      },\n      enumerable: false,  // Or false if you don't want it to be serialized\n      configurable: false // Allows this property to be redefined or deleted\n    });\n  }\n\n  set id(value: ArrayBuffer | string | Base62Encoded) {\n    if (typeof value === 'string') {\n      if (this.version === '1') {\n        if (isBase64Encoded(value)) {\n          this.id_binary = base64ToArrayBuffer(value);\n        } else {\n          throw new Error('Requested version 1, but id is not b64');\n        }\n      } else if (this.version === '2') {\n        if (isBase62Encoded(value)) {\n          this.id_binary = base62ToArrayBuffer32(value);\n        } else {\n          throw new Error('Requested version 2, but id is not b62');\n        }\n      }\n    } else if (value instanceof ArrayBuffer) {\n      // assert it is 32 bytes\n      if (value.byteLength !== 32) throw new Error('Invalid ID length');\n      this.id_binary = value;\n    } else {\n      throw new Error('Invalid ID type');\n    }\n  }\n\n  // same as above but for key\n  set key(value: ArrayBuffer | string | Base62Encoded) {\n    if (typeof value === 'string') {\n      if (this.version === '1') {\n        if (isBase64Encoded(value)) {\n          this.#key_binary = base64ToArrayBuffer(value);\n        } else {\n          throw new Error('Requested version 1, but key is not b64');\n        }\n      } else if (this.version === '2') {\n        if (isBase62Encoded(value)) {\n          this.#key_binary = base62ToArrayBuffer32(value);\n        } else {\n          throw new Error('Requested version 2, but key is not b62');\n        }\n      }\n    } else if (value instanceof ArrayBuffer) {\n      // assert it is 32 bytes\n      if (value.byteLength !== 32) throw new Error('Invalid key length');\n      this.#key_binary = value;\n    } else {\n      throw new Error('Invalid key type');\n    }\n  }\n\n  // the getter for id returns based on what version we are\n  // we stripA32() because this is also used by JSON.stringify()\n  // (unless we want to write a custom serializer ...)\n  get id(): string {\n    _sb_assert(this.#id_binary, 'object handle id is undefined');\n    if (this.version === '1') {\n      return arrayBufferToBase64(this.#id_binary!);\n    } else if (this.version === '2') {\n      return arrayBufferToBase62(this.#id_binary!);\n    } else {\n      throw new Error('Invalid or missing version (internal error, should not happen)');\n    }\n  }\n\n  // same as above but for key\n  get key(): string {\n    _sb_assert(this.#key_binary, 'object handle key is undefined');\n    if (this.version === '1') {\n      return arrayBufferToBase64(this.#key_binary!);\n    } else if (this.version === '2') {\n      return arrayBufferToBase62(this.#key_binary!);\n    } else {\n      throw new Error('Invalid or missing version (internal error, should not happen)');\n    }\n  }\n\n  // convenience getters - these are placeholders for type definitions\n  get id64(): string { throw new Error('Invalid id_binary'); }\n  get id32(): Base62Encoded { throw new Error('Invalid id_binary'); }\n  get key64(): string { throw new Error('Invalid key_binary'); }\n  get key32(): Base62Encoded { throw new Error('Invalid key_binary'); }\n\n  set verification(value: Promise<string> | string) {\n    this.#verification = value; /* this.#setId32(); */\n  }\n  get verification(): Promise<string> | string {\n    _sb_assert(this.#verification, 'object handle verification is undefined');\n    return this.#verification!;\n  }\n\n  get type(): SBObjectType { return this.#_type; }\n\n}\n\n/**\n * Storage API\n * @class\n * @constructor\n * @public\n */\nclass StorageApi {\n  server: string;\n  channelServer: string;\n  shardServer?: string;\n  sbServer: SBServer;\n\n  // constructor(server: string, channelServer: string, shardServer?: string) {\n  constructor(sbServer: SBServer) {\n    const { storage_server, channel_server, shard_server } = sbServer\n    this.server = storage_server + '/api/v1';\n    this.channelServer = channel_server + '/api/room/'\n    if (shard_server) this.shardServer = shard_server + '/api/v1'\n    this.sbServer = sbServer\n  }\n\n  /**\n   * Pads object up to closest permitted size boundaries;\n   * currently that means a minimum of 4KB and a maximum of\n   * of 1 MB, after which it rounds up to closest MB.\n   *\n   * @param buf blob of data to be eventually stored\n   */\n  /** @private */\n  #padBuf(buf: ArrayBuffer) {\n    const image_size = buf.byteLength; let _target\n    // pick the size to be rounding up to\n    if ((image_size + 4) < 4096) _target = 4096 // smallest size\n    else if ((image_size + 4) < 1048576) _target = 2 ** Math.ceil(Math.log2(image_size + 4)) // in between\n    else _target = (Math.ceil((image_size + 4) / 1048576)) * 1048576 // largest size\n    // append the padding buffer\n    let finalArray = _appendBuffer(buf, (new Uint8Array(_target - image_size)).buffer);\n    // set the (original) size in the last 4 bytes\n    (new DataView(finalArray)).setUint32(_target - 4, image_size)\n    if (DBG2) console.log(\"#padBuf bytes:\", finalArray.slice(-4));\n    return finalArray\n  }\n\n  /**\n   * The actual size of the object is encoded in the\n   * last 4 bytes of the buffer. This function removes\n   * all the padding and returns the actual object.\n   */\n  /** @private */\n  #unpadData(data_buffer: ArrayBuffer): ArrayBuffer {\n    const tail = data_buffer.slice(-4)\n    var _size = new DataView(tail).getUint32(0)\n    const _little_endian = new DataView(tail).getUint32(0, true)\n    if (_little_endian < _size) {\n      if (DBG2) console.warn(\"#unpadData - size of shard encoded as little endian (fixed upon read)\")\n      _size = _little_endian\n    }\n    if (DBG2) {\n      console.log(`#unpadData - size of object is ${_size}`)\n      // console.log(tail)\n    }\n    return data_buffer.slice(0, _size);\n  }\n\n  /** @private */\n  #getObjectKey(fileHashBuffer: BufferSource, _salt: ArrayBuffer): Promise<CryptoKey> {\n    return new Promise((resolve, reject) => {\n      try {\n        sbCrypto.importKey('raw', fileHashBuffer /* base64ToArrayBuffer(decodeURIComponent(fileHash))*/,\n          'PBKDF2', false, ['deriveBits', 'deriveKey']).then((keyMaterial) => {\n            // @psm TODO - Support deriving from PBKDF2 in sbCrypto.deriveKey function\n            crypto.subtle.deriveKey({\n              'name': 'PBKDF2', // salt: crypto.getRandomValues(new Uint8Array(16)),\n              'salt': _salt,\n              'iterations': 100000, // small is fine, we want it snappy\n              'hash': 'SHA-256'\n            }, keyMaterial, { 'name': 'AES-GCM', 'length': 256 }, true, ['encrypt', 'decrypt']).then((key) => {\n              // console.log(key)\n              resolve(key)\n            })\n          })\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n\n  // // returns a storage token (promise); basic consumption of channel budget\n  // getStorageToken(roomId: SBChannelId, size: number): Promise<string> {\n  //   return new Promise((resolve, reject) => {\n  //     SBFetch(this.channelServer + stripA32(roomId) + '/storageRequest?size=' + size)\n  //       .then((r) => r.json())\n  //       .then((storageTokenReq) => {\n  //         if (storageTokenReq.hasOwnProperty('error')) reject(`storage token request error (${storageTokenReq.error})`)\n  //         resolve(JSON.stringify(storageTokenReq))\n  //       })\n  //       .catch((e) => {\n  //         const msg = `getStorageToken] storage token request failed: ${e}`\n  //         console.error(msg)\n  //         reject(msg)\n  //       });\n  //   });\n  // }\n\n  /** @private\n   * get \"permission\" to store in the form of a token\n   */\n  #_allocateObject(image_id: ArrayBuffer, type: SBObjectType): Promise<{ salt: Uint8Array, iv: Uint8Array }> {\n    return new Promise((resolve, reject) => {\n      SBFetch(this.server + \"/storeRequest?name=\" + arrayBufferToBase62(image_id) + \"&type=\" + type)\n        .then((r) => { /* console.log('got storage reply:'); console.log(r); */ return r.arrayBuffer(); })\n        .then((b) => {\n          const par = extractPayload(b)\n          resolve({ salt: new Uint8Array(par.salt), iv: new Uint8Array(par.iv) })\n        })\n        .catch((e) => {\n          console.warn(`**** ERROR: ${e}`)\n          reject(e)\n        })\n    })\n  }\n\n  // this returns a promise to the verification string  \n  async #_storeObject(\n    image: ArrayBuffer,\n    image_id: Base62Encoded,\n    keyData: ArrayBuffer,\n    type: SBObjectType,\n    // roomId: SBChannelId,\n    budgetChannel: ChannelEndpoint,\n    iv: Uint8Array,\n    salt: Uint8Array\n  ): Promise<string> {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const key = await this.#getObjectKey(keyData, salt)\n        const data = await sbCrypto.encrypt(image, key, iv, 'arrayBuffer')\n        const storageToken = await budgetChannel.getStorageToken(data.byteLength)\n        const resp_json = await this.storeObject(type, image_id, iv, salt, storageToken, data)\n        if (resp_json.error) reject(`storeObject() failed: ${resp_json.error}`)\n        if (resp_json.image_id != stripA32(image_id)) reject(`received imageId ${resp_json.image_id} but expected ${image_id}`)\n        resolve(resp_json.verification_token)\n      } catch (e) {\n        const msg = `storeObject() failed: ${e}`\n        console.error(msg)\n        reject(msg)\n      }\n    })\n  }\n\n  /**\n   * StorageApi.storeData()\n   * \n   * Low level of shard uploading - this needs to have all the details. You would\n   * generally not call this directly, but rather use storeData().\n   */\n  storeObject(\n    type: string,\n    fileId: Base62Encoded,\n    iv: Uint8Array,\n    salt: Uint8Array,\n    storageToken: string,\n    data: ArrayBuffer): Promise<Dictionary<any>> {\n    // async function uploadImage(storageToken, encrypt_data, type, image_id, data)\n    return new Promise((resolve, reject) => {\n      // if the first parameter is NOT of type string, then the callee probably meant to use storeData()\n      if (typeof type !== 'string') {\n        const errMsg = \"NEW in 1.2.x - storeData() and storeObject() have switched places, you probably meant to use storeData()\"\n        console.error(errMsg)\n        reject(\"errMsg\")\n      }\n\n      SBFetch(this.server + '/storeData?type=' + type + '&key=' + stripA32(fileId), { // ToDo: bit of a hack in handling \"a32\"\n        // psm: need to clean up these types\n        method: 'POST',\n        body: assemblePayload({\n          iv: iv,\n          salt: salt,\n          image: data,\n          storageToken: (new TextEncoder()).encode(storageToken),\n          vid: crypto.getRandomValues(new Uint8Array(48))\n        })\n      })\n        .then((response: Response) => {\n          if (!response.ok) { reject('response from storage server was not OK') }\n          return response.json()\n        })\n        .then((data) => {\n          resolve(data)\n        }).catch((error: Error) => {\n          reject(error)\n        });\n    });\n  }\n\n  /**\n   * StorageApi.storeData\n   * \n   * Main high level work horse: besides buffer and type of data,\n   * it only needs the roomId (channel). Assigned meta data is\n   * optional.\n   * \n   * This will eventually call storeObject().\n   * \n   * It is a bit outdated ... it accepts metadata for historical reasons\n   */\n  storeData(buf: BodyInit | Uint8Array, type: SBObjectType, roomId: SBChannelId | ChannelEndpoint, metadata?: SBObjectMetadata): Promise<Interfaces.SBObjectHandle>\n  {\n    // used to be integrated with image uploading and matching control message, for reference:\n    // export async function saveImage(sbImage, roomId, sendSystemMessage)\n    return new Promise((resolve, reject) => {\n      // if the first parameter is of type string, then the callee probably meant to use storeData()\n      if (typeof buf === 'string') {\n        const errMsg = \"NEW in 1.2.x - storeData() and storeObject() have switched places, you probably meant to use storeObject()\"\n        console.error(errMsg)\n        reject(\"errMsg\")\n      }\n      if (buf instanceof Uint8Array) {\n        if (DBG2) console.log('converting Uint8Array to ArrayBuffer')\n        buf = new Uint8Array(buf).buffer\n      }\n      if (!(buf instanceof ArrayBuffer) && buf.constructor.name != 'ArrayBuffer') {\n        if (DBG2) console.log('buf must be an ArrayBuffer:'); console.log(buf);\n        reject('buf must be an ArrayBuffer')\n      }\n      const bufSize = (buf as ArrayBuffer).byteLength\n      if (metadata) {\n        // i think this is old/ancient?\n        console.warn(\"storeData() called with metadata - this is deprecated (let us know how/where this is needed)\")\n        // metadata.id = stripA32(metadata.id)\n        // metadata.key = stripA32(metadata.key)\n        reject(\"storeData() called with metadata - this is deprecated\")\n      }\n\n      // our budget channel is either directly provided, or we create a new channel object from the roomId\n      const channel = (roomId instanceof ChannelEndpoint) ? roomId : new ChannelEndpoint(this.sbServer, undefined, roomId)\n\n      const paddedBuf = this.#padBuf(buf as ArrayBuffer)\n      sbCrypto.generateIdKey(paddedBuf).then((fullHash) => {\n        // return { full: { id: fullHash.id, key: fullHash.key }, preview: { id: previewHash.id, key: previewHash.key } }\n        this.#_allocateObject(fullHash.id_binary, type)\n          .then((p) => {\n            // storage server returns the salt and nonce it wants us to use\n            const id32 = arrayBufferToBase62(fullHash.id_binary)\n            const key32 = arrayBufferToBase62(fullHash.key_material)\n            const r: Interfaces.SBObjectHandle = {\n              [SB_OBJECT_HANDLE_SYMBOL]: true,\n              version: currentSBOHVersion,\n              type: type,\n              // id: fullHash.id64,\n              // key: fullHash.key64,\n              // id: base64ToBase62(fullHash.id32),\n              // key: base64ToBase62(fullHash.key32),\n              id: id32,\n              key: key32,\n              iv: p.iv,\n              salt: p.salt,\n              actualSize: bufSize,\n              verification: this.#_storeObject(paddedBuf, id32, fullHash.key_material, type, channel, p.iv, p.salt)\n            }\n            resolve(r)\n          })\n          .catch((e) => reject(e))\n      })\n    })\n  }\n\n  // for future reference:\n  //   StorageApi().storeRequest\n  // is now internal-only (#_allocateObject)\n\n  /** @private */\n  #processData(payload: ArrayBuffer, h: SBObjectHandle): Promise<ArrayBuffer> {\n    return new Promise((resolve, reject) => {\n      try {\n        let j = jsonParseWrapper(sbCrypto.ab2str(new Uint8Array(payload)), 'L3062')\n        // normal operation is to break on the JSON.parse() and continue to finally clause\n        if (j.error) reject(`#processData() error: ${j.error}`)\n      } catch (e) {\n        // do nothing - this is expected\n      } finally {\n        const data = extractPayload(payload)\n        if (DBG) {\n          console.log(\"Payload (#processData) is:\")\n          console.log(data)\n        }\n        // payload includes nonce and salt\n        const iv = new Uint8Array(data.iv)\n        const salt = new Uint8Array(data.salt)\n        // we accept b64 versions\n        const handleIV: Uint8Array | undefined = (!h.iv) ? undefined : (typeof h.iv === 'string') ? base64ToArrayBuffer(h.iv) : h.iv\n        const handleSalt: Uint8Array | undefined = (!h.salt) ? undefined : (typeof h.salt === 'string') ? base64ToArrayBuffer(h.salt) : h.salt\n\n        if ((handleIV) && (!compareBuffers(iv, handleIV))) {\n          console.error(\"WARNING: nonce from server differs from local copy\")\n          console.log(`object ID: ${h.id}`)\n          console.log(` local iv: ${arrayBufferToBase64(handleIV)}`)\n          console.log(`server iv: ${arrayBufferToBase64(data.iv)}`)\n        }\n        if ((handleSalt) && (!compareBuffers(salt, handleSalt))) {\n          console.error(\"WARNING: salt from server differs from local copy (will use server)\")\n          if (!h.salt) {\n            console.log(\"h.salt is undefined\")\n          } else if (typeof h.salt === 'string') {\n            console.log(\"h.salt is in string form (unprocessed):\")\n            console.log(h.salt)\n          } else {\n            console.log(\"h.salt is in arrayBuffer or Uint8Array\")\n            console.log(\"h.salt as b64:\")\n            console.log(arrayBufferToBase64(h.salt))\n            console.log(\"h.salt unprocessed:\")\n            console.log(h.salt)\n          }\n          console.log(\"handleSalt as b64:\")\n          console.log(arrayBufferToBase64(handleSalt))\n          console.log(\"handleSalt unprocessed:\")\n          console.log(handleSalt)\n        }\n        if (DBG2) {\n          console.log(\"will use nonce and salt of:\")\n          console.log(`iv: ${arrayBufferToBase64(iv)}`)\n          console.log(`salt : ${arrayBufferToBase64(salt)}`)\n        }\n        // const image_key: CryptoKey = await this.#getObjectKey(imageMetaData!.previewKey!, salt)\n        var h_key_material\n        if (h.version === '1') {\n          h_key_material = base64ToArrayBuffer(h.key)\n        } else if (h.version === '2') {\n          h_key_material = base62ToArrayBuffer32(h.key)\n        } else {\n          throw new Error('Invalid or missing version (internal error, should not happen)');\n        }\n        this.#getObjectKey(h_key_material, salt).then((image_key) => {\n          // TODO: test this, it used to call ab2str()? how could that work?\n          // const encrypted_image = sbCrypto.ab2str(new Uint8Array(data.image))\n          // const encrypted_image = new Uint8Array(data.image)\n          const encrypted_image = data.image;\n          if (DBG2) {\n            console.log(\"data.image:      \"); console.log(data.image)\n            console.log(\"encrypted_image: \"); console.log(encrypted_image)\n          }\n          // const padded_img: ArrayBuffer = await sbCrypto.unwrap(image_key, { content: encrypted_image, iv: iv }, 'arrayBuffer')\n          sbCrypto.unwrap(image_key, { content: encrypted_image, iv: iv }, 'arrayBuffer').then((padded_img: ArrayBuffer) => {\n            const img: ArrayBuffer = this.#unpadData(padded_img)\n            // psm: issues should throw i think\n            // if (img.error) {\n            //   console.error('(Image error: ' + img.error + ')');\n            //   throw new Error('Failed to fetch data - authentication or formatting error');\n            // }\n            if (DBG) { console.log(\"#processData(), unwrapped img: \"); console.log(img) }\n            resolve(img)\n          })\n        })\n      }\n    })\n  }\n\n  // any failure conditions returns 'null', facilitating trying multiple servers\n  async #_fetchData(useServer: string, url: string, h: SBObjectHandle, returnType: 'string' | 'arrayBuffer'): Promise<string | ArrayBuffer | null> {\n    return new Promise((resolve, _reject) => {\n      try {\n        const body = { method: 'GET' }\n        SBFetch(useServer + url, body)\n          .then((response: Response) => {\n            if (!response.ok) return (null)\n            return response.arrayBuffer()\n          })\n          .then((payload: ArrayBuffer | null) => {\n            if (payload === null) return (null)\n            return this.#processData(payload, h)\n          })\n          .then((payload) => {\n            if (payload === null) resolve (null)\n            if (returnType === 'string') resolve(sbCrypto.ab2str(new Uint8Array(payload!)))\n            else resolve(payload)\n          })\n          .catch((_error: Error) => {\n            // reject(error)\n            resolve(null)\n          });\n      } catch (e) {\n        resolve(null)\n      }\n    });\n  }\n\n\n  /**\n   * StorageApi().fetchData()\n   *\n   * This assumes you have a complete SBObjectHandle. Note that\n   * if you only have the 'id' and 'verification' fields, you\n   * can reconstruct / request the rest. The current interface\n   * will return both nonce, salt, and encrypted data.\n   *\n   * @param h SBObjectHandle - the object to fetch\n   * @param returnType 'string' | 'arrayBuffer' - the type of data to return (default: 'arrayBuffer')\n   * @returns Promise<ArrayBuffer | string> - the shard data\n   */\n  fetchData(handle: Interfaces.SBObjectHandle, returnType: 'string'): Promise<string>\n  fetchData(handle: Interfaces.SBObjectHandle, returnType?: 'arrayBuffer'): Promise<ArrayBuffer>\n  fetchData(handle: Interfaces.SBObjectHandle, returnType: 'string' | 'arrayBuffer' = 'arrayBuffer'): Promise<ArrayBuffer | string> {\n    // TODO: change SBObjectHandle from being an interface to being a class\n    // update: we have an object class, but still using interface; still a todo here\n    // how to nicely validate 'h'\n    // _sb_assert(SBValidateObject(h, 'SBObjectHandle'), \"fetchData() ERROR: parameter is not an SBOBjectHandle\")\n    // if (typeof h.verification === 'string') h.verification = new Promise<string>((resolve) => { resolve(h.verification); })\n    // _sb_assert(verificationToken, \"fetchData(): missing verification token (?)\")\n\n    return new Promise(async (resolve, reject) => {\n      const h = new SBObjectHandle(handle)\n      if (!h) reject('SBObjectHandle is null or undefined')\n      const verificationToken = await h.verification\n      const useServer = h.shardServer ? h.shardServer + '/api/v1' : (this.shardServer ? this.shardServer : this.server)\n      if (DBG) console.log(\"fetchData(), fetching from server: \" + useServer)\n      const queryString = '/fetchData?id=' + h.id + '&type=' + h.type + '&verification_token=' + verificationToken\n\n      // SBFetch(useServer + '/fetchData?id=' + h.id + '&type=' + h.type + '&verification_token=' + verificationToken, { method: 'GET' })\n      const result = await this.#_fetchData(useServer, queryString, h, returnType)\n      if (result) resolve(result)\n\n      // upon failure we farm out and try all known servers\n      // ToDo: add an interface where we accumulated knowledge of more servers\n      for (let i = 0; i < knownStorageAndShardServers.length; i++) {\n        const tryServer = knownStorageAndShardServers[i] + '/api/v1'\n        if (tryServer !== useServer) {\n          const result = await this.#_fetchData(tryServer, queryString, h, returnType)\n          if (result) resolve(result)\n        }\n      }\n      reject('fetchData() failed - tried all servers')\n    })\n  }\n\n\n\n\n  /**\n   * StorageApi().retrieveData()\n   * retrieves an object from storage\n   */\n  async retrieveImage(\n    imageMetaData: ImageMetaData,\n    controlMessages: Array<ChannelMessage>,\n    imageId?: string,\n    imageKey?: string,\n    imageType?: SBObjectType,\n    imgObjVersion?: SBObjectHandleVersions): Promise<Dictionary<any>> {\n    console.trace(\"retrieveImage()\")\n    console.log(imageMetaData)\n    const id = imageId ? imageId : imageMetaData.previewId;\n    const key = imageKey ? imageKey : imageMetaData.previewKey;\n    const type = imageType ? imageType : 'p';\n    const objVersion = imgObjVersion ? imgObjVersion : (imageMetaData.imgObjVersion ? imageMetaData.imgObjVersion : '2');\n\n    const control_msg = controlMessages.find((ctrl_msg) => ctrl_msg.id && ctrl_msg.id == id)\n    console.log(control_msg)\n    if (control_msg) {\n      _sb_assert(control_msg.verificationToken, \"retrieveImage(): verificationToken missing (?)\")\n      _sb_assert(control_msg.id, \"retrieveImage(): id missing (?)\")\n      const obj: Interfaces.SBObjectHandle = {\n        type: type,\n        version: objVersion,\n        id: control_msg.id!,\n        key: key!,\n        verification: new Promise((resolve, reject) => {\n          if (control_msg.verificationToken)\n            resolve(control_msg.verificationToken)\n          else\n            reject(\"retrieveImage(): verificationToken missing (?)\")\n        })\n      }\n      const img = await this.fetchData(obj)\n      console.log(img)\n      return { 'url': 'data:image/jpeg;base64,' + arrayBufferToBase64(img, 'b64') };\n    } else {\n      return { 'error': 'Failed to fetch data - missing control message for that image' };\n    }\n  }\n\n  /* Unused Currently\n  migrateStorage() {\n  }\n  fetchDataMigration() {\n  }\n   */\n\n} /* class StorageApi */\n\n\n/**\n * Class Snackabra\n */\nclass Snackabra {\n  #storage!: StorageApi\n  #channel!: Channel\n  #preferredServer?: SBServer\n  #version = version\n\n  /**\n  * @param args - optional object with URLs of preferred servers.\n  * \n  * Note that 'new Snackabra()' is guaranteed synchronous. You can optionally call\n  * without a parameter in which case SB will ping known servers.\n  * \n  *   * @example\n  * ```typescript\n  *     const sb = new Snackabra({\n  *     channel_server: 'http://localhost:3845',\n  *     channel_ws: 'ws://localhost:3845',\n  *     storage_server: 'http://localhost:3843',\n  *     shard_server: 'http://localhost:3841',\n  *     })\n  * ```\n  * \n  * @param DEBUG - optional boolean to enable debug logging\n  */\n  constructor(sbServer?: SBServer, DEBUG: boolean = false) {\n    console.warn(`==== CREATING Snackabra object generation: ${this.version} ====`)\n    if (sbServer) {\n      this.#preferredServer = Object.assign({}, sbServer)\n      // this.#storage = new StorageApi(args.storage_server, args.channel_server, args.shard_server ? args.shard_server : undefined)\n      this.#storage = new StorageApi(sbServer)\n      if (DEBUG) DBG = true\n      if (DBG) console.warn(\"++++ Snackabra constructor ++++ setting DBG to TRUE ++++\");\n    }\n\n  }\n\n\n  /**\n   * Connects to :term:`Channel Name` on this SB config.\n   * Returns a channel socket promise right away, but it\n   * will not be ready until the ``ready`` promise is resolved.\n   * \n   * Note that if you have a preferred server then the channel\n   * object will be returned right away, but the ``ready`` promise\n   * will still be pending. If you do not have a preferred server,\n   * then the ``ready`` promise will be resolved when at least\n   * one of the known servers is responding and ready.\n   * \n   * @param channelName - the name of the channel to connect to\n   * @param key - optional key to use for encryption/decryption\n   * @param channelId - optional channel id to use for encryption/decryption\n   * @returns a channel object\n   */\n  connect(onMessage: (m: ChannelMessage) => void, key?: JsonWebKey, channelId?: string /*, identity?: SB384 */): Promise<ChannelSocket> {\n    if (DBG) {\n      console.log(\"++++ Snackabra.connect() ++++\")\n      if (key) console.log(key)\n      if (channelId) console.log(channelId)\n    }\n    return new Promise<ChannelSocket>(async (resolve) => {\n      if (this.#preferredServer)\n        // if we have a preferred server then we do not have to wait for 'ready'\n        resolve(new ChannelSocket(this.#preferredServer!, onMessage, key, channelId))\n      else\n        // otherwise we have to wait for at least one of them to be 'ready', or we won't know which one to use\n        resolve(Promise.any(SBKnownServers.map((s) => (new ChannelSocket(s, onMessage, key, channelId)).ready)))\n    })\n  }\n\n  // if there's a 'preferred' (only) server then we we can return a promise right away\n  // return new Promise<ChannelSocket>((resolve, reject) => {\n\n  // else Promise.any(SBKnownServers.map((s) => (new ChannelSocket(s, onMessage, key, channelId))))\n  //   .then((c) => { console.log(\"Got channel:\"); console.log(c); resolve(c.ready); })\n  //   .catch((e) => { console.log(\"No known servers responding to channel\"); reject(e); })\n\n  // Promise.any(this.#preferredServer\n  //   ? [new ChannelSocket(this.#preferredServer!, onMessage, key, channelId)]\n  //   : SBKnownServers.map((s) => (new ChannelSocket(s, onMessage, key, channelId))))\n  //   .then((c) => { console.log(\"Got channel:\"); console.log(c); resolve(c); })\n  //   .catch((e) => { console.log(\"No known servers responding to channel\"); reject(e); })\n  /// })\n  // }\n\n  /**\n   * Creates a new channel. Currently uses trivial authentication.\n   * Returns a promise to a ''SBChannelHandle'' object\n   * (which includes the :term:`Channel Name`).\n   * Note that this method does not connect to the channel,\n   * it just creates (authorizes) it.\n   * \n   * @param sbServer - the server to use\n   * @param serverSecret - the server secret (dev only)\n   * @param keys - optional keys to use for encryption/decryption\n   * @param budgetChannel - NECESSARY unless local/dev; provides a channel to pay for storage\n   * \n   * Note that if you have a full budget channel, you can budd off it (which\n   * will take all the storage). Providing a budget channel here will allows\n   * you to create new channels when a 'guest' on some channel (for example).\n   */\n  create(sbServer: SBServer, serverSecretOrBudgetChannel?: string | ChannelEndpoint, keys?: JsonWebKey): Promise<SBChannelHandle> {\n    return new Promise<SBChannelHandle>(async (resolve, reject) => {\n      try {\n        const { channelData, exportable_privateKey } = await newChannelData(keys ? keys : null)\n        if (!channelData.roomId) {\n          throw new Error('Unable to determine roomId from key and id (it is empty)')\n        }\n        const budgetChannel = (serverSecretOrBudgetChannel instanceof ChannelEndpoint) ? serverSecretOrBudgetChannel : undefined\n        if (serverSecretOrBudgetChannel && typeof serverSecretOrBudgetChannel === 'string') channelData.SERVER_SECRET = serverSecretOrBudgetChannel\n        if (budgetChannel) {\n          const storageToken = await budgetChannel.getStorageToken(NEW_CHANNEL_MINIMUM_BUDGET)\n          if (!storageToken) reject('[create channel] Failed to get storage token for the provided channel')\n          channelData.storageToken = storageToken\n        }\n        const data: Uint8Array = new TextEncoder().encode(JSON.stringify(channelData));\n        let resp: Dictionary<any> = await SBFetch(sbServer.channel_server + '/api/room/' + stripA32(channelData.roomId) + '/uploadRoom', {\n          method: 'POST',\n          body: data\n        });\n        resp = await resp.json();\n        if (resp.success) {\n          // await this.connect(channelId, identity);\n          // _localStorage.setItem(channelId, JSON.stringify(exportable_privateKey)) // TODO\n          resolve({ channelId: channelData.roomId!, key: exportable_privateKey, server: sbServer.channel_server })\n        } else {\n          reject(JSON.stringify(resp));\n        }\n      } catch (e) {\n        const msg = `create() failed: ${e}`\n        console.error(msg)\n        reject(msg);\n      }\n    });\n  }\n\n  /**\n   * Connects to a channel.\n   */\n  get channel(): Channel {\n    return this.#channel;\n  }\n\n  /**\n   * Returns the storage API.\n   */\n  get storage(): StorageApi {\n    return this.#storage;\n  }\n\n  /**\n   * Returns the crypto API.\n   */\n  get crypto(): SBCrypto {\n    return sbCrypto;\n  }\n\n  get version(): string {\n    return this.#version;\n  }\n\n\n} /* class Snackabra */\n\n/******************************************************************************************************/\n//#region - exporting stuff\nexport type {\n  ChannelData,\n  ChannelKeyStrings,\n  ImageMetaData\n}\n\nexport {\n  Channel,\n  // ChannelApi,\n  SBMessage,\n  Snackabra,\n  SBCrypto,\n  SB384,\n  arrayBufferToBase64,\n  sbCrypto,\n  version,\n};\n\nexport var SB = {\n  Snackabra: Snackabra,\n  SBMessage: SBMessage,\n  Channel: Channel,\n  SBCrypto: SBCrypto,\n  SB384: SB384,\n  arrayBufferToBase64: arrayBufferToBase64,\n  sbCrypto: sbCrypto,\n  version: version\n};\n\nif (!(globalThis as any).SB)\n  (globalThis as any).SB = SB;\nconsole.warn(`==== SNACKABRA jslib loaded ${(globalThis as any).SB.version} ====`); // we warn for benefit of Deno\n//#endregion - exporting stuff\n", "// (c) 2023 384 (tm)\n\nimport { base64ToArrayBuffer } from '../utils/b64';\nimport { Interfaces, SBPayload, base62ToArrayBuffer32 } from '../snackabra/snackabra';\n\n// starting \"v02\" on 2023-04-22\n// intention:\n// - switch to async model\n// - switch to pure b62 encoding only\n// - direct support for \"app loading\"\n\nfunction deCryptShard(data: SBPayload): Promise<ArrayBuffer> {\n    return new Promise((resolve, reject) => {\n        crypto.subtle.importKey(\"raw\", data.shardKey, \"PBKDF2\", false, ['deriveBits', 'deriveKey'])\n            .then((keyMaterial) => {\n                crypto.subtle.deriveKey({\n                    'name': 'PBKDF2',\n                    'salt': data.salt,\n                    'iterations': 100000,\n                    'hash': 'SHA-256'\n                }, keyMaterial, { 'name': 'AES-GCM', 'length': 256 }, true, ['encrypt', 'decrypt'])\n                    .then((key) => {\n                        crypto.subtle.decrypt({ name: 'AES-GCM', iv: data.iv }, key, data.image)\n                            .then((padded) => {\n                                let actualSize = new DataView(padded.slice(-4)).getUint32(0)\n                                resolve(padded.slice(0, actualSize));\n                            }).catch(() => { reject('error decrypting shard'); })\n                    }).catch(() => { reject('unable to derive key'); })\n            })\n            .catch(() => { reject('unable to import key') })\n    })\n}\n\n// NOTE: this is a slightly stripped-down duplicate of \"extractPayload\" in snackabra.ts\nexport function extractPayload(payload: ArrayBuffer): SBPayload {\n    const metadataSize = new Uint32Array(payload.slice(0, 4))[0];\n    const decoder = new TextDecoder();\n    const _metadata = JSON.parse(decoder.decode(payload.slice(4, 4 + metadataSize)))\n    const startIndex = 4 + metadataSize;\n    const data: SBPayload = {}\n    for (let i = 1; i < Object.keys(_metadata).length; i++) {\n        const _index = i.toString();\n        if (_metadata[_index]) {\n            const propertyStartIndex = _metadata[_index]['start'];\n            const size = _metadata[_index]['size'];\n            const entry = _metadata[_index]\n            data[entry['name']] = payload.slice(startIndex + propertyStartIndex, startIndex + propertyStartIndex + size);\n        } else {\n            console.log(`found nothing for index ${i}`)\n        }\n    }\n    return data;\n}\n\nexport function loadShard(shard: Interfaces.SBObjectHandle) {\n    return new Promise<ArrayBuffer>((resolve, reject) => {\n        if (!shard.shardServer) {\n            console.error(\"shardServer not found (2.0 change: required)\")\n            throw new Error(\"shardServer not found (2.0 change: required)\")\n        }\n        const codeShardFetch = `${shard.shardServer!}/api/v1/fetchData?id=${shard.id}&type=p&verification_token=${shard.verification}`\n        fetch(codeShardFetch)\n            .then((res) => res.arrayBuffer())\n            .then((payload) => {\n                let data = extractPayload(payload)\n                if (shard.version == '1') {\n                    data.shardKey = base64ToArrayBuffer(shard.key)\n                } else if (shard.version == '2') {\n                    data.shardKey = base62ToArrayBuffer32(shard.key!)\n                } else {\n                    reject(`unknown or missing shard version: ${shard}`)\n                }\n                deCryptShard(data).then((decrypted) => {\n                    resolve(decrypted);\n                }).catch(() => { reject('unable to decrypt'); })\n            })\n            .catch((err) => {\n                if (`${err}`.match('\"ror\":\"cann\"')) reject('shard not found')\n                else reject(`failed to fetch or process shard: ${err}`)\n            })\n    })\n}\n\nexport function loadLibraryCode(shard: Interfaces.SBObjectHandle) {\n    return new Promise<void>((resolve, reject) => {\n        loadShard(shard)\n            .then((decrypted) => {\n                let jslibText = new TextDecoder(\"utf-8\").decode(decrypted);\n                const script = document.createElement('script');\n                script.textContent = jslibText;\n                document.head.append(script);\n                console.log(\"'window.SB' object (library loaded) should be available in the console.\")\n                resolve()\n            })\n            .catch(() => { reject('unable to fetch shard'); })\n    })\n}\n\nexport function bootstrapJsLib() {\n\n    const jsLib = (\n        (window as any).configuration \n        && (window as any).configuration.jslibShardHandle)\n        ? (window as any).configuration.jslibShardHandle\n        : {\n\n            // '2.0.0 (pre) build 03'\n            version: \"2\",\n            type: \"p\",\n            id: \"6bpz2xOwq9eCG9ZZzF4P0LMoydo89lgJg2TkJFvZvKx\",\n            key: \"GxQ6at56Lv1p8V8AFZqQZur4MEKyiZzEMFpiyPnZYv0\",\n            actualSize: 247612,\n            verification: \"8117233191337661625\",\n            fileName: \"384.iife.js\",\n            shardServer: \"https://shard.3.8.4.land\",\n            lastModified: 1701294057573,\n\n            // // '2.0.0 (pre) build 02'\n            // \"version\": \"2\",\n            // \"type\": \"p\",\n            // \"id\": \"dkB8uvB7Sh49L5unSh81YPALE0j1lAH0FHt1DyCOMf0\",\n            // \"key\": \"p1HZ2pGJoNZ5kimwGNuAVi9qwniVbipuq1Mvm8eOZTW\",\n            // \"actualSize\": 48055,\n            // \"verification\": \"2786953871388969929\",\n            // \"fileName\": \"snackabra.min.js\",\n            // \"dateAndTime\": \"2023-11-05T04:59:22.006Z\",\n            // \"fileType\": \"text/javascript\",\n            // \"lastModified\": 1699160331210,\n            // \"shardServer\": \"https://shard.3.8.4.land\"\n\n            // // we need to keep some old copies ... for bootstrap debugging\n            // // '1.1.24 build 02'\n            // version: \"1\",\n            // type: \"p\",\n            // id: \"e_XZgkn6bpmxMXLXd_wn-Xl8ZZzFYrXNDgLTV9Ow4KY\",\n            // key: \"JzII-03YYCf0lu43ySWZ2a4Z8nDuGb_eHN-T9UiUOis\",\n            // verification: \"121034925793945795\"\n\n            // \"version\": \"1\",\n            // \"type\": \"p\",\n            // \"id\": \"fIyzdNScN7MCv58GS5tTmIJCFcR2g3j4qn6Otw8QqW4\",\n            // \"key\": \"uZAr9ozF92rhRijlFIci-Aobosh6yMGRVWjrB8osyRw\",\n            // \"actualSize\": 40142,\n            // \"verification\": \"48906636302226264130\",\n            // \"fileName\": \"snackabra.min.js\",\n            // \"dateAndTime\": \"2023-04-24T22:00:25.952Z\",\n            // \"fileType\": \"text/javascript\",\n            // \"lastModified\": 1682373567992\n        }\n\n    console.log(\"[boot.loadshard] ++++ Using the following shard to load the library: \", jsLib);\n\n    return loadLibraryCode(jsLib);\n}\n", "// (c) 2023 384 (tm)\n\n// parsing properly into TLD and TLD+1 is a bit tricky, generally sites\n// use libraries (we want to avoid that), or the full list from github at:\n// https://github.com/publicsuffix/list/blob/master/public_suffix_list.dat\n// which is 15K entries.\n\n// below we use a small list of the most common TLDs, and then a list of\n// the most common SLDs for each of those TLDs.  This is not perfect, but\n// should work for most cases. Let us know what we missed.\n\nconst singleTLDs = new Set([\n    'localhost',\n    'io', 'dev', 'app', 'land', 'ac', 'lk', 'cc',\n    'com', 'net', 'org', 'jp', 'de', 'fr', 'br', 'it', 'ru', 'es', 'me', 'gov',\n    'pl', 'ca', 'in', 'nl', 'edu', 'eu', 'ch', 'id', 'at', 'kr', 'cz', 'mx',\n    'be', 'se', 'tr', 'tw', 'al', 'ua', 'ir', 'vn', 'cl', 'sk', 'to', 'no',\n    'fi', 'us', 'pt', 'dk', 'ar', 'hu', 'tk', 'gr', 'il', 'sg', 'ru',\n]);\n\nconst tldsWithSLDs = {\n    'uk': ['co', 'ac', 'gov', 'org', 'net'],\n    'au': ['com', 'net', 'org', 'edu', 'gov'],\n    'nz': ['co', 'org', 'net', 'edu', 'gov', 'ac', 'gen', 'kiwi', 'maori'],\n    'br': ['com', 'net', 'org', 'gov', 'edu', 'mil'],\n    'jp': ['co', 'ac', 'go', 'or', 'ne'],\n    'kr': ['co', 'go', 'ne', 'or', 're'],\n    'ar': ['com', 'net', 'org', 'gov', 'edu', 'mil'],\n    'il': ['co', 'ac', 'org', 'net', 'gov'],\n    'sg': ['com', 'net', 'org', 'gov', 'edu', 'per'],\n};\n\nconst ipv4Regex = /^\\d{1,3}(\\.\\d{1,3}){3}$/;\n\nexport function getDomainDetails(hostname: string = globalThis.location?.hostname ?? null) {\n    const errorResult = { baseDomain: null, subdomain: null, port: null };\n\n    if (!hostname) { console.error(\"[getDomainDeatils] cannot read location\"); return errorResult; }\n    const parts = hostname.split('.').reverse();\n    if (parts.length === 0) { console.error(\"[getDomainDeatils] cannot parse location\"); return errorResult; }\n    const topLevel = parts[0];\n    const port = globalThis.location?.port ?? null;\n\n    if (parts.length === 1) {\n        if (topLevel === 'localhost') {\n            return { baseDomain: hostname, subdomain: null, port: port };\n        } else {\n            // for now, only localhost allowed as singleton\n            console.error(\"[getDomainDeatils] singleton TLD not on allowed list\");\n            return errorResult;\n        }\n    }\n\n    if (ipv4Regex.test(parts.slice(0, 4).reverse().join('.'))) {\n        // we support ipv4 addresses, but not ipv6\n        const baseDomain = parts.slice(0, 4).reverse().join('.');\n        const subdomain = parts.length > 4 ? parts.slice(4).reverse().join('.') : null;\n        return { baseDomain, subdomain, port: port ?? null };\n    }\n    \n    let baseDomain = null;\n    let subdomain = null;\n\n    if (topLevel === 'localhost') {\n        baseDomain = parts.slice(0, 1).reverse().join('.');\n        subdomain = parts.slice(1).reverse().join('.') || null;\n    } else if (singleTLDs.has(topLevel)) {\n        // we know length is at least 2\n        baseDomain = parts.slice(0, 2).reverse().join('.');\n        subdomain = parts.slice(2).reverse().join('.') || null;\n    } else {\n        if (parts.length < 3) { return { baseDomain: null, subdomain: null, port: port }; }\n        const secondLevel = parts[1]\n        const slds = tldsWithSLDs[topLevel as keyof typeof tldsWithSLDs];\n        if (slds && slds.includes(secondLevel)) {\n            baseDomain = parts.slice(0, 3).reverse().join('.')\n            subdomain = parts.slice(3).reverse().join('.') || null;\n        } else {\n            console.error(\"[getDomainDeatils] unknown TLD\");\n            return errorResult;\n        }\n    }\n    return { baseDomain, subdomain, port: port };\n}\n\n\n// for testing:\n\n// (globalThis as any).getDomainDetails = getDomainDetails\n\n// interface TestCase {\n//     input: string;\n//     expected: {\n//         baseDomain: string | null;\n//         subdomain: string | null;\n//     };\n// }\n\n// const testCases: TestCase[] = [\n//     { input: \"\", expected: { baseDomain: null, subdomain: null } },\n//     { input: (null as unknown as string), expected: { baseDomain: null, subdomain: null } },\n//     { input: \"example.com\", expected: { baseDomain: \"example.com\", subdomain: null } },\n//     { input: \"subdomain.example.net\", expected: { baseDomain: \"example.net\", subdomain: \"subdomain\" } },\n//     { input: \"deep.subdomain.example.org\", expected: { baseDomain: \"example.org\", subdomain: \"deep.subdomain\" } },\n//     { input: \"example.co.uk\", expected: { baseDomain: \"example.co.uk\", subdomain: null } },\n//     { input: \"subdomain.example.co.uk\", expected: { baseDomain: \"example.co.uk\", subdomain: \"subdomain\" } },\n//     { input: \"localhost\", expected: { baseDomain: \"localhost\", subdomain: null } },\n//     { input: \"xyz.localhost\", expected: { baseDomain: \"localhost\", subdomain: \"xyz\" } },\n//     { input: \"192.168.1.1\", expected: { baseDomain: \"192.168.1.1\", subdomain: null } },\n//     { input: \"server.168.1.1\", expected: { baseDomain: null, subdomain: null } },\n//     { input: \"subdomain.192.168.1.1\", expected: { baseDomain: \"192.168.1.1\", subdomain: \"subdomain\" } },\n//     { input: \"s1.s2.192.168.1.1\", expected: { baseDomain: \"192.168.1.1\", subdomain: \"s1.s2\" } },\n//     { input: \"example.me\", expected: { baseDomain: \"example.me\", subdomain: null } },\n//     { input: \"subdomain.example.me\", expected: { baseDomain: \"example.me\", subdomain: \"subdomain\" } },\n//     { input: \"example.xyz\", expected: { baseDomain: null, subdomain: null } },\n//     { input: \"subdomain.example.xyz\", expected: { baseDomain: null, subdomain: null } },\n//     { input: \"a.b.c.example.com\", expected: { baseDomain: \"example.com\", subdomain: \"a.b.c\" } },\n//     { input: \"uk\", expected: { baseDomain: null, subdomain: null } }, // Second-level domain without a main domain\n//     { input: \"co.uk\", expected: { baseDomain: null, subdomain: null } }, // Second-level domain without a main domain\n//     { input: \"example\", expected: { baseDomain: null, subdomain: null } }, // Single word, no TLD\n//     { input: \"example.invalidtld\", expected: { baseDomain: null, subdomain: null } }, // Invalid TLD\n//     { input: \"example.localhost\", expected: { baseDomain: \"localhost\", subdomain: \"example\" } }, // Localhost with subdomain\n//     { input: \"s1.s2.s3.localhost\", expected: { baseDomain: \"localhost\", subdomain: \"s1.s2.s3\" } }, // Localhost with subdomain\n//     { input: \"localhost.localhost.localhost\", expected: { baseDomain: \"localhost\", subdomain: \"localhost.localhost\" } }, // Localhost with subdomain\n\n// ];\n\n// function runTestCases() {\n//     testCases.forEach((testCase, index) => {\n//         const { input, expected } = testCase;\n//         const result = getDomainDetails(input);\n//         if (!result) {\n//             console.error(`Test case ${index + 1} failed. Input: ${input}, Expected: ${JSON.stringify(expected)}, Got: ${result}`);\n//         } else {\n//             console.assert(result.baseDomain === expected.baseDomain && result.subdomain === expected.subdomain, `Test case ${index + 1} failed. Input: ${input}, Expected: ${JSON.stringify(expected)}, Got: ${JSON.stringify(result)}`);\n//         }\n//     });\n// }\n\n// // Run the tests\n// runTestCases();", "import { Interfaces } from \"../snackabra/snackabra\"\n\nimport { loadShard } from \"./loadShard\"\nimport { getDomainDetails } from \"./tld\"\n\nconst SKIP_OBSERVE = false; // for testing, disables '1'\nconst SKIP_SCAN = false;    // for testing, disables '2'\n\n// ToDo: these might be config options upon creating the loader loader,\n// otherwise we risk committing versions that are too lenient\n// console.log(\"==== BootstrapLoader: countermeasures enabled:\")\nif (SKIP_OBSERVE) console.warn(\"==== BootstrapLoader: 1. MutationObserver disabled (make sure this is not production)\")\nif (SKIP_SCAN) console.warn(\"==== BootstrapLoader: 2. Immediate and repeated scans disabled (make sure this is not production)\")\n\n\nexport class bootstrapLoaderClass {\n    DEBUG: boolean        // enable for detailed countermeasure logging\n\n    baseDomain: string        // the base domain of where we are being served from\n    subdomain: string | null  // the subdomain of the app (if any)\n    port: string              // the port of the app\n\n    // \"we\" are the loader loader; here is current loader:\n    loaderShard: Interfaces.SBObjectHandle;\n\n    reportScans = 0; // don't report for ever\n\n    // we try to make sure that we ourselves aren't blocked\n    securedTimeout = window.setTimeout.bind(window);\n\n    disconnectObserver: () => void;\n\n    tagScan = () => {\n        if (SKIP_SCAN) return;\n        const scriptTags = document.querySelectorAll(\"script\");\n        for (let i = 0; i < scriptTags.length; i++) {\n            if (scriptTags[i].src) {\n                if (scriptTags[i].src.startsWith('blob:')) {\n                    if (this.DEBUG) console.log(`==== BootstrapLoader (immediate scan): Allowing (blob) script tag: ${scriptTags[i].src}`);\n                } else {\n                    const url = new URL(scriptTags[i].src);\n                    // if any reason for problem parsing url, we strip it\n                    if (!url) {\n                        console.warn(`==== BootstrapLoader (immediate scan): Removing external script tag (failed to parse it). Tried sourcing: ${scriptTags[i].src}`);\n                        scriptTags[i].remove;\n                    } else {\n                        // if it has same base domain, we allow it\n                        const { baseDomain } = getDomainDetails();\n                        if (baseDomain === this.baseDomain) {\n                            if (this.DEBUG) console.log(`==== BootstrapLoader (immediate scan): Allowing (hosted) script tag: ${scriptTags[i].src}`);\n                        } else {\n                            console.warn(`==== BootstrapLoader (immediate scan): Removing external script tag. Tried sourcing: ${scriptTags[i].src}`);\n                            scriptTags[i].remove;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    timedScan = () => {\n        this.tagScan();\n        queueMicrotask(() => this.tagScan());\n        this.reportScans++;\n        if (this.reportScans < 10) // first second, frequent\n            this.securedTimeout(this.timedScan, 100);\n        else if (this.reportScans < 20) // next 10 seconds, less frequent\n            this.securedTimeout(this.timedScan, 1000);\n        else if (this.DEBUG)\n            console.log('==== BootstrapLoader (scan): Stopping regular scans for external script tags.')\n    }\n\n    removeExternalScripts = () => {\n        this.securedTimeout(this.timedScan, 0); // first check soon\n\n        if (SKIP_OBSERVE) return () => { };\n        const observer = new MutationObserver((mutations) => {\n            mutations.forEach((mutation) => {\n                if (mutation.type === 'childList') {\n                    mutation.addedNodes.forEach((node) => {\n                        if (node.nodeName === 'SCRIPT' && node instanceof HTMLScriptElement) {\n                            if (node.src) {\n                                console.warn(`==== BootstrapLoader (MutationObserver): Removing external script tag. Tried sourcing: ${node.src}`);\n                                // we need to destroy the node to have a chance of stopping it from being executed\n                                // modifying it (eg modifying \"src\") will not necessarily work\n                                node.remove();\n                                // leave breadcrumbs, and play interference\n                                const newScript = document.createElement('script');\n                                newScript.setAttribute(\"sb384counterMeasure\", \"blocked\");\n                                // this next line supposedly has error\n                                // TS2488: Type 'NamedNodeMap' must have a '[Symbol.iterator]()' method that returns an iterator.\n                                // but ... i don't think so?  overriding for now.  TODO.\n                                // @ts-ignore\n                                for (const attr of node.attributes) {\n                                    if (attr.name !== 'src') {\n                                        newScript.setAttribute(attr.name, attr.value);\n                                    }\n                                }\n                                mutation.target.appendChild(newScript);\n                            } else if (this.DEBUG) {\n                                console.log(`==== BootstrapLoader (MutationObserver): Allowing script tag: ${node.innerHTML.slice(0, 300)}...`);\n                            }\n                        }\n                    });\n                }\n            });\n        });\n\n        // Start observing the body for changes\n        observer.observe(document.body, {\n            childList: true,\n            subtree: true,\n        });\n\n        // Return a function to disconnect the observer\n        return () => observer.disconnect();\n    }\n\n    // the third and last line of defense is \"monkey patched scorched earth\":\n    // we know the code in this loader loader employs no timers or event \n    // listeners, so we block anything like that. this does not catch\n    // everything, there are obscure corners like performance monitors\n    // and web sockets that we don't look for (yet).\n    scorchedEarth = () => {\n        if (this.DEBUG) console.log(\"==== BootstrapLoader: SCORCHED EARTH\")\n        class LogAttemptMutationObserver implements MutationObserver {\n            observe(_target: Node, _options?: MutationObserverInit): void {\n                logAttempt(\"MutationObserver\");\n            }\n            disconnect(): void { }\n            takeRecords(): MutationRecord[] {\n                return [];\n            }\n        }\n        const originals = {\n            addEventListener: window.addEventListener.bind(window),\n            setTimeout: window.setTimeout.bind(window),\n            setInterval: window.setInterval.bind(window),\n            MutationObserver: window.MutationObserver,\n            dispatchEvent: window.dispatchEvent.bind(window)\n        };\n        const logAttempt = (methodName: string) => {\n            console.warn(`==== BootstrapLoader: Attempted to use \"${methodName}\" during scorched earth period (blocked).`);\n            return -1;\n        };\n        window.addEventListener = () => logAttempt('addEventListener');\n        (window.setTimeout as any) = () => logAttempt('setTimeout');\n        (window.setInterval as any) = () => logAttempt('setInterval');\n        window.MutationObserver = LogAttemptMutationObserver;\n        window.dispatchEvent = function (event: Event) {\n            logAttempt('dispatchEvent');\n            console.log(event);\n            return true; // faking it\n        };\n        // restoring is done as close as possible to activating the loader\n        let restoreWebApi = () => {\n            // setting things back in place.  an alternative design is\n            // to have a \"hand off\" to the loader itself\n            this.tagScan(); // last chance, heh\n            window.addEventListener = originals.addEventListener;\n            window.setTimeout = originals.setTimeout;\n            window.setInterval = originals.setInterval;\n            window.dispatchEvent = originals.dispatchEvent;\n            window.MutationObserver = originals.MutationObserver;\n            if (this.DEBUG) console.log('==== BootstrapLoader: Original methods restored');\n        }\n        if (this.DEBUG) console.log(\"==== BootstrapLoader: LOADING the loader\")\n        loadShard(this.loaderShard)\n            .then((decrypted) => {\n                if (this.DEBUG) console.log(\"==== [END] BootstrapLoader: LOADING the loader\")\n                restoreWebApi();\n                this.disconnectObserver();\n                queueMicrotask(() => this.tagScan());\n                document.open()\n                document.write(new TextDecoder(\"utf-8\").decode(decrypted))\n                document.close()\n                console.log(\"==== [END] BootstrapLoader: done, handing over to loader\")\n            })\n            .catch(() => { document.body.style.visibility = \"visible\"; });\n    }\n\n    constructor(loaderShard: Interfaces.SBObjectHandle, debug: boolean = false) {\n        this.DEBUG = debug;\n        this.loaderShard = loaderShard;\n\n        const { baseDomain, subdomain, port } = getDomainDetails();\n        if (!baseDomain) {\n            throw new Error(\"unable to determine base domain\")\n        }\n        if (this.DEBUG) {\n            console.log(\"==== BootstrapLoader: domain details:\")\n            console.log({ baseDomain, subdomain, port })\n        }\n        this.baseDomain = baseDomain;\n        this.subdomain = subdomain;\n        this.port = port;\n\n        // hide visuals as fast as we can\n        document.body.style.visibility = \"hidden\";\n        console.log(\"==== [BEGIN] BootstrapLoader: starting\")\n\n        // the rest of this script section are manipulation countermeasures\n        // the loader loader has zero external dependencies, so anything\n        // that shows up as an internal script tag is suspect (and stripped)\n\n        // there are three independent measures:\n        // 1. mutation observer\n        // 2. immediate and repeated scans\n        // 3. disabling much of web API (\"scorched earth\")\n        // when testing you can disable 1 and/or 2:\n\n        if (this.DEBUG) console.log(\"==== BootstrapLoader: 3. Debug logging enabled\")\n\n        // by the way, as far as we *currently* are aware, the order\n        // that these measures kick in appear to be 1,2,3. that's why\n        // we don't have a disable debug method for 3. \n\n        // these measures leverage that we have a carefully designed\n        // handoff between the loader-loader and the loader, and we\n        // know exactly what web API or resources that are needed,\n        // so we can disable everything else.\n\n        // // UPDATE: perhaps, but, for now the focus is on launching to a subdomain\n        // // before we get into any of that, we need to make sure that\n        // // that a change to hash value will trigger a reload; otherwise\n        // // the browser may treat a new 'app' as an old one and not\n        // // reload, which will cause this loader-loader to not recur \n        // function createHashChangeHandler() {\n        //     let lastHash: string = window.location.hash;\n        //     function hashChangeHandler() {\n        //         if (window.location.hash !== lastHash) {\n        //             lastHash = window.location.hash;\n        //             window.removeEventListener('hashchange', hashChangeHandler); // avoid stacking\n        //             window.location.assign(window.location.href);\n        //         }\n        //     }\n        //     return hashChangeHandler;\n        // }\n        // window.addEventListener('hashchange', createHashChangeHandler());\n\n        if (this.DEBUG) console.log(\"==== BootstrapLoader: starting countermeasures\")\n        this.tagScan();\n        queueMicrotask(() => this.tagScan());\n        this.disconnectObserver = this.removeExternalScripts();\n        this.scorchedEarth();\n        if (this.DEBUG) console.log(\"==== ALL DONE ... \")\n    }\n}\n", "// (c) 2023 384 (tm)\n\nimport { SBObjectHandle } from 'src/snackabra/snackabra';\nimport { SBFileSystem } from '../file/system';\n\nconst DEBUG = true;\nconst DEBUG2 = true;\n\n// let serviceWorkerFunctional = false;\n// (window as any).serviceWorkerFunctional = serviceWorkerFunctional;\n\nlet serverPrefix;\nif (window.location) {\n    serverPrefix = window.location.protocol + \"//\" + window.location.host\n    if (DEBUG2) console.log(\"[SBServiceWorker] serverPrefix: \", serverPrefix);\n} else {\n    serverPrefix = undefined;\n}\n\n// here is how we might prime it:\n\n// // note that the actual data is in globalBufferMap.get(uniqueShardId)\n// for (const key of this.finalFileList.keys()) {\n//     let entry = this.finalFileList.get(key);\n//     if (entry.type !== \"directory\") {\n//         if (DEBUG2) console.log(`... kicking off cacheResource for ${key} (${entry.path + entry.name})`)\n//         cacheResource(entry.path + entry.name, entry.uniqueShardId, entry.type, this.globalBufferMap);\n//     }\n// }\n\n\nexport class SBServiceWorker {\n    sb384cachePromise: Promise<Cache | undefined>;\n    sbfs: SBFileSystem;\n    serviceWorkerReadyPromise: Promise<void>;\n\n    constructor(sbfs: SBFileSystem) {\n        this.sbfs = sbfs;\n        this.sb384cachePromise = caches.open('sb384cache')\n            this.serviceWorkerReadyPromise = new Promise((resolve, reject) => {        \n            this.setupServiceWorker()\n            .then(() => {\n                console.log(\"[SBServiceWorker] ++++ service worker setup complete\")\n                resolve();\n            })\n            .catch((err) => {\n                console.error(\"[SBServiceWorker] Error setting up service worker: \" + err)\n                reject(err);\n            })\n        });\n    }\n\n    async setupServiceWorker() {\n        console.log(\"[SBServiceWorker] ++++ setting up file helper service worker\")\n        try {\n            if ('serviceWorker' in navigator) {\n                await navigator.serviceWorker.register('service-worker.js');\n                if (DEBUG) console.log('[SBServiceWorker] ++++ Service Worker registered');\n                navigator.serviceWorker.addEventListener('message', function (event) {\n                    if (DEBUG) console.log(\"[SBServiceWorker] ++++ Service worker event: \" + event.data);\n\n                });\n            }\n        } catch (e) {\n            console.log(\"[SBServiceWorker] Error registering service worker: \" + e);\n        }\n    }\n\n    // ToDo: alternatively we should be messaging the service worker with the\n    //       metadata and then have the service worker fetch the data from the\n    //       server (and cache it) only upon request. perhaps that should be a\n    //       separate interface (eg cacheResourceDeferred());\n    \n    async cacheResource(fileName: string, mimeType: string, handle: SBObjectHandle): Promise<void> {\n        await this.serviceWorkerReadyPromise;\n        if (fileName === \"/service-worker.js\" /* fileName.endsWith(\"service-worker.js\") */) {\n            console.log(\"[SBServiceWorker] **** special override: self-virtualizing service worker (/service-worker.js)\")\n            return Promise.resolve();\n        }\n        if (fileName === \"/index.html\") {\n            console.log(\"[SBServiceWorker] **** special override: index.html can also be accessed as '/'\")\n            await this.cacheResource(\"/\", mimeType, handle);\n        }\n        if (DEBUG) console.log(`[SBServiceWorker] Caching resource '${fileName}' mimeType '${mimeType}' with handle '${handle}'`);\n        const cache = (await this.sb384cachePromise);\n        if (!cache) {\n            console.error(\"[SBServiceWorker] cache is null ... cannot cache any resources\")\n            return Promise.resolve();\n        }\n        this.sbfs.server.storage.fetchData(handle)\n        .then((arrayBuffer) => {        \n            // Create a Response object with the ArrayBuffer and MIME type\n            const response = new Response(arrayBuffer, {\n                status: 200, // this part seems to be browser/OS dependent\n                headers: { 'Content-Type': mimeType },\n            });\n            // Add the Response to the cache using the file name as the key\n            cache.put(fileName, response); // this is asynch\n        })\n        .catch((err) => {\n            console.error(`[SBServiceWorker] Error fetching data for handle ${handle}: ${err}`)\n        });\n    }\n\n    // // older approach, when being tested from inside multifile handler (where a globalbuffer map was available)\n    // async cacheResource(fileName: string, uniqueShardId: string, mimeType: string, bufferMap: Map<any, any>): Promise<void> {\n    //     if (!serviceWorkerFunctional) {\n    //         console.error(\"service worker is not operational\")\n    //         return Promise.resolve();\n    //     }\n    //     if (fileName === \"/service-worker.js\" /* fileName.endsWith(\"service-worker.js\") */) {\n    //         console.log(\"**** special override: self-virtualizing service worker (/service-worker.js)\")\n    //         return Promise.resolve();\n    //     }\n    //     if (fileName === \"/index.html\") {\n    //         console.log(\"**** special override: index.html can also be accessed as '/'\")\n    //         await this.cacheResource(\"/\", uniqueShardId, mimeType, bufferMap);\n    //     }\n    //     if (DEBUG) console.log(`Caching resource '${fileName}' with uniqueShardId '${uniqueShardId}' and mimeType '${mimeType}'`);\n    //     const cache = (await this.sb384cachePromise);\n    //     let arrayBuffer = bufferMap.get(uniqueShardId);\n\n    //     // Create a Response object with the ArrayBuffer and MIME type\n    //     const response = new Response(arrayBuffer, {\n    //         status: 200, // this part seems to be browser/OS dependent\n    //         headers: { 'Content-Type': mimeType },\n    //     });\n    //     // Add the Response to the cache using the file name as the key\n    //     await cache!.put(fileName, response);\n    // }\n\n}", "// (c) 2023 384 (tm)\n\nimport { loadShard, bootstrapJsLib } from './loadShard';\nimport { bootstrapLoaderClass } from './loaderLoader';\nimport { getDomainDetails } from './tld';\nimport { SBServiceWorker } from './serviceWorker';\n\nexport const boot = {\n    loadShard: loadShard,\n    bootstrapJsLib: bootstrapJsLib,\n    boostrapLoaderClass: bootstrapLoaderClass,\n    getDomainDetails: getDomainDetails,\n    serviceWorker: SBServiceWorker\n};\n", "// (c) 2023 384 (tm)\n\n// export const base62mi05 = \"012345ABCDMPQRTVXJrEYWH8GLN7dkfu\" // \"v05.02\"\n// export const base62mi05 = \"0123456789ADMQRTXJrEYWCPBdHLNukf\" // \"v05.03\"\n\nexport const base62mi05 = \"0123456789ADMRTXQjrEyWCLBdHpNufk\" // \"v05.04\"\n\nconst base62 = base62mi05;\nconst base62Regex = new RegExp(`^[${base62}]{4}$`);\n\nexport const strongpinVersion = \"0.5.6\";\n\n// TODO: strongpin generation should support provision of extra entropy,\n//       in the same manner as strongphrase. we've prepared for it, but\n//       it's not implemented yet. extra entropy can be any string\n\n// generates a correctly-formed strongpin\nexport async function generateStrongPin(extraEntropy?: string) {\n    if (extraEntropy && extraEntropy.length > 0) {\n        throw new Error('Not supported yet');\n    }\n    const num = Math.floor(Math.random() * Math.pow(2, 19));\n    const encoded = encode(num);\n    return { num, encoded };\n}\n\n// convenience wrapper, generates standardized 4x4 strongpin, concatenated (and spaced)\nexport async function generateStrongPin16(): Promise<string> {\n    return (await Promise.all(Array(4).fill(null).map(() => generateStrongPin())))\n    .map(result => result.encoded)\n    .join(' ');\n}\n\n// encodes a 19-bit number into a 4-character string\nexport function encode(num: number): string {\n    const charMap = base62;\n    if (num < 0 || num > 0x7ffff)\n        throw new Error('Input number is out of range. Expected a 19-bit integer.');\n    let bitsArr15 = [\n        (num >> 14) & 0x1f,\n        (num >> 9) & 0x1f,\n        (num >> 4) & 0x1f,\n        (num) & 0x0f\n    ];\n    bitsArr15[3] |= (bitsArr15[0] ^ bitsArr15[1] ^ bitsArr15[2]) & 0x10;\n    return bitsArr15.map(val => charMap[val]).join('');\n}\n\n// does a \"pre-processing\", if there are substitions to be suggested,\n// it will perform them.  the callee should check if the returned\n// string has changed, in which case you should confirm with the user\n// something like 'did you mean to type this?'.  if the returned\n// string is the same as the input string, then there are no\n// substitutions to be made (unamgibuous).\nexport function process(str: string): string {\n    // if (!/^[a-zA-Z0-9]{4}$/.test(str))\n    //     throw new Error(`Invalid input string. Expected a 4-character alphanumeric string (got \"${str}\").`);\n\n    const substitutions: { [key: string]: string } = {\n        // deliberately overly clear mapping\n        \"o\": \"0\", \"O\": \"0\", \"i\": \"1\", \"I\": \"1\",\n        \"l\": \"1\", \"z\": \"2\", \"Z\": \"2\", \"s\": \"5\",\n        \"S\": \"5\", \"b\": \"6\", \"c\": \"C\", \"m\": \"M\",\n        \"P\": \"p\", \"a\": \"9\", \"g\": \"9\", \"q\": \"9\",\n        \"t\": \"T\", \"V\": \"u\", \"v\": \"u\", \"x\": \"X\",\n        \"J\": \"j\", \"e\": \"E\", \"F\": \"f\", \"Y\": \"y\",\n        \"w\": \"W\", \"h\": \"N\", \"n\": \"N\", \"G\": \"6\",\n        \"K\": \"k\", \"U\": \"u\"\n    }\n    let processedStr = '';\n    for (let char of str)\n        processedStr += substitutions[char] || char;\n    return processedStr;\n}\n\n// will take a (correctly formed) 4-character string and return the\n// original 19-bit number.  if the parity is incorrect, it will\n// return null, meaning, one of the four characters were typed in\n// incorrectly - for example, an \"8\" was entered that should be a \"B\".\n// the callee should check for null and ask the user something like\n// 'are you sure about these four characters?'.\nexport function decode(encoded: string): number | null {\n    if (!base62Regex.test(encoded))\n        throw new Error(`Input string contains invalid characters (${encoded}).`);\n    let bin = Array.from(encoded)\n        .map(c => base62.indexOf(c))\n    if (bin.reduce((a, b) => (a ^ b)) & 0x10)\n        return null;\n    return (((bin[0] * 32 + bin[1]) * 32 + bin[2]) * 16 + (bin[3] & 0x0f));\n}\n", "// (c) 2023 384 (tm)\n\nimport { encode, decode, generateStrongPin, generateStrongPin16, process } from './strongpin';\n\n// ... replaced by actual font!\n// import { strongpinFont } from './strongpin.font';\nimport { SBCrypto } from '../snackabra/snackabra';\n\nimport { getRandomValues } from '../snackabra/snackabra';\n\nexport const crypto = {\n    strongpin : {\n        encode,\n        decode,\n        generate: generateStrongPin,\n        generate16: generateStrongPin16,\n        process,\n        // font: strongpinFont,\n    },\n    sbCrypto: new SBCrypto(),\n    getRandomValues,\n};\n", "// (c) 2023 384 (tm)\n\n// const DEBUG = true;\nconst DEBUG2 = false;\n\nexport const version = \"0.0.8\";\n\nconst SUGGESTED_PHRASE_LENGTH = 3;\nconst PBKDF2_10M_ITERATIONS = 10 * 1000 * 1000;\n\ntype Params = { extraEntropy?: string; words?: number };\n\n/**\n * generatePassPhrase()\n * \n * Generates a passphrase from a list of 16K words. Results in 14 bits of reasonably\n * strong entropy per word. 3 (the default) should be fine for most purposes.\n * \n * Parameters can be passed as a string (optional extra entropy), number (number of pass phrase words),\n * or if you want to specify both, as an object with the following properties:\n * \n * @example\n * {\n *  extraEntropy: \"some extra entropy\",\n *  words: 3\n * }\n * \n * Number of words defaults to '3', and extraEntropy defaults to none (duh),\n * so you can also just call it without any parameters. It will return the phrase with\n * the words separated by spaces.\n * \n * Note that the word list only contains lower case letters and words. Also please \n * note there may still be a few undesirable words in the list, please notify us\n * if you find any. \n * \n * Generally, for a user interface, you should generally not allow the user\n * to hit \"regenerate\", instead we would suggest that you generate a set of phrases,\n * and they can pick one. That way you are more likely to constrain the loss of\n * entropy (which would be ln2() of number of choices). A good number is probably 4,\n * which with a choice of 3 words will total 40 bits of entropy, a general good amount.\n * \n * The 'user provided entropy' can either be another external source (eg random.org),\n * or some biometric data (eg mouse movements, keystrokes, etc), or simply offering\n * the user to type in a bunch of \"random\" characters on their keyboard. Regardless,\n * this code does not assume any particular quality of that additional entropy, it\n * can be terrible and it won't matter (much).\n * \n * For VERY strong phrases, we would suggest five (5) words, and allow the user to\n * chose among 8 phrases. \n * \n */\nexport async function generatePassPhrase(params?: string | number | Params): Promise<string> {\n    let extraEntropy: string | undefined;\n    let words: number | undefined;\n\n    const RND_BUFFER_SIZE = 32; // 256 bits\n    const MAX_WORDS = 16; // 256 bits divided by 16\n    const WORD_LIST_SIZE_LN2 = 14; // 2^14 = 16384\n    const WORD_LIST_SIZE = 2 ** WORD_LIST_SIZE_LN2;\n\n    if (typeof params === 'string') {\n        extraEntropy = params;\n    } else if (typeof params === 'number') {\n        words = params;\n    } else if (params) {\n        extraEntropy = params.extraEntropy;\n        words = params.words;\n    }\n\n    if (!words || words < 1) words = SUGGESTED_PHRASE_LENGTH;\n    if (words > MAX_WORDS) throw new Error(`Too many words requested, max is ${MAX_WORDS}.`);\n\n    // sanity check make sure our word array is the expected size\n    if (words16K_v03.length !== WORD_LIST_SIZE) throw new Error(\"Word list is not the expected size (16x1024).\")\n\n    // Generate 256 random bits from crypto\n    const randomValues = window.crypto.getRandomValues(new Uint8Array(RND_BUFFER_SIZE));\n\n    let entropySource = randomValues;\n\n    // If extraEntropy is provided, hash it and append to the randomValues, and then hash the result\n    if (extraEntropy) {\n        const encoder = new TextEncoder();\n        const extraEntropyHash = await window.crypto.subtle.digest('SHA-256', encoder.encode(extraEntropy));\n\n        const combinedEntropySource = new Uint8Array([...randomValues, ...new Uint8Array(extraEntropyHash)]);\n        entropySource = new Uint8Array(await window.crypto.subtle.digest('SHA-256', combinedEntropySource));\n    }\n\n    // Create a Uint16 view of the entropy source\n    const indices = new Uint16Array(entropySource.buffer);\n\n    // Map the indices to words and join them into a passphrase\n    const passphrase = Array.from(indices, i => words16K_v03[i & (WORD_LIST_SIZE - 1)]).slice(0, words).join(' ');\n\n    return passphrase;\n};\n\n// export function generatePassPhrase(extraEntropy?: string, words = SUGGESTED_PHRASE_LENGTH) {\n//     // sanity check make sure our word array is the expected size\n//     if (words16K_v03.length !== WORD_LIST_SIZE) throw new Error(\"Word list is not the expected size (16x1024).\")\n\n//     // Create an array to hold random indices\n//     const randomIndices = new Uint16Array(words);\n\n//     // Fill the array with random 14-bit numbers\n//     window.crypto.getRandomValues(randomIndices);\n\n//     // Map the indices to words and join them into a passphrase\n//     return Array.from(randomIndices, i => words16K_v03[i & (WORD_LIST_SIZE - 1)]).join(' ');\n// };\n\n/**\n * generateStrongKey()\n * \n * @param passphrase \n * \n * Uses PBKDF2 (10M iterations, SHA-256) to generate a strong key from a passphrase.\n * Returns an object with the following properties:\n * \n * @example\n * {\n *  phrase: \"passphrase\",  // whatever passphrase was used\n *  key: CryptoKey,\n *  salt: Uint8Array(16),\n *  iterations: 10000000\n * }\n * \n * @see https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveKey\n * \n * Roughly speaking, 10M is considered very strong. 1M is considered strong. 100K is considered\n * reasonable. 10K is considered weak. 1K is considered very weak. Currently this cannot\n * be overriden by the caller, since modern clients should handle this fine. If you need\n * a quicker generator, we suggest you create a new function that is clearly named as\n * such (eg 'generateQuickAndDirtyWeakKey()').\n * \n */\nexport async function generateStrongKey(passphrase?: string) {\n    // Generate a random salt\n    const salt = window.crypto.getRandomValues(new Uint8Array(16));\n    if (!passphrase) passphrase = await generatePassPhrase(SUGGESTED_PHRASE_LENGTH);\n    return await _generateKey(passphrase, salt, PBKDF2_10M_ITERATIONS);\n}\n\n/**\n * recreateStrongKey()\n * \n * Takes precise parameters (typically from a previous call to generateStrongKey())\n * and recreates the strong key.  You should not use this to create a new key\n * unless you are sure you know what you are doing ... use generateStrongKey() instead.\n * \n * @param passphrase \n * @param salt \n * @param iterations \n */\nexport async function recreateStrongKey(passphrase: string, salt: Uint8Array, iterations: number) {\n    // todo: some sanity checking of parameters\n    return await _generateKey(passphrase, salt, iterations);\n}\n\nasync function _generateKey(passphrase: string, salt: Uint8Array, iterations: number) {\n    const encoder = new TextEncoder();\n    const passphraseKey = encoder.encode(passphrase);\n\n    // Import the passphrase into a CryptoKey\n    const baseKey = await window.crypto.subtle.importKey(\n        'raw',\n        passphraseKey,\n        { name: 'PBKDF2' },\n        false,\n        ['deriveBits', 'deriveKey']\n    );\n\n    // Derive a strong key\n    const strongKey = await window.crypto.subtle.deriveKey(\n        {\n            name: 'PBKDF2',\n            salt: salt,\n            iterations: iterations,\n            hash: 'SHA-256'\n        },\n        baseKey,\n        // You can define the specifics of your derived key\n        { name: 'AES-GCM', length: 256 },\n        true,\n        ['encrypt', 'decrypt']\n    );\n\n    const returnKey = {\n        phrase: passphrase,\n        key: strongKey,\n        salt: salt,\n        iterations: iterations,\n    }\n\n    if (DEBUG2) {\n        console.log(\"Strong key generated: \");\n        console.log(returnKey);\n    }\n    return returnKey;\n}\n\n// todo:\n// alternative design for three-word phrase generation is to pick three words\n// and a single digit (2-9).  that's 45 bits, or 9 characters of base32mi.\n// thus for example a user could pick between \"unloading proposed lenny 7\"\n// or the equivalent \"LU8 3Rd 2f5\".  \n//\n// for much stronger phrase, five words is 70 bits, or 14 characters of base32mi.\n// eg NNNN-NNNNN-NNNNN (4, 5, 5) eg \"Ej07 T04F7 b9LeR\"\n\n// 1024 rows of 16 words, or 16K words.  14 bits per word.  3 words should be fine.  \n// This is 'v03' of word list projects developed at the Magnusson Institute, (c) MI 2021, used with permission (also available under MIT license)\n// See documentation and attendant commentary at https://github.com/Magnusson-Institute/passphrase.us\nconst words16K_v03 = [\n    \"that\", \"this\", \"have\", \"they\", \"what\", \"from\", \"there\", \"about\", \"know\", \"just\", \"said\", \"like\", \"will\", \"when\", \"more\", \"people\",\n    \"right\", \"time\", \"could\", \"into\", \"going\", \"other\", \"then\", \"because\", \"yeah\", \"these\", \"want\", \"good\", \"also\", \"over\", \"only\", \"come\",\n    \"very\", \"even\", \"first\", \"where\", \"most\", \"make\", \"down\", \"much\", \"those\", \"many\", \"okay\", \"take\", \"before\", \"need\", \"such\", \"little\",\n    \"work\", \"still\", \"never\", \"last\", \"year\", \"world\", \"life\", \"around\", \"tell\", \"mean\", \"between\", \"state\", \"thing\", \"both\", \"same\", \"long\",\n    \"another\", \"great\", \"three\", \"again\", \"each\", \"school\", \"home\", \"love\", \"help\", \"away\", \"thought\", \"doing\", \"find\", \"sure\", \"give\", \"used\",\n    \"always\", \"better\", \"since\", \"next\", \"today\", \"night\", \"thank\", \"place\", \"during\", \"kind\", \"maybe\", \"best\", \"anything\", \"found\", \"must\", \"family\",\n    \"point\", \"left\", \"sorry\", \"talk\", \"percent\", \"nothing\", \"head\", \"under\", \"city\", \"feel\", \"keep\", \"public\", \"high\", \"country\", \"social\", \"enough\",\n    \"call\", \"room\", \"believe\", \"mother\", \"until\", \"face\", \"once\", \"hand\", \"please\", \"case\", \"system\", \"million\", \"group\", \"father\", \"course\", \"number\",\n    \"game\", \"real\", \"someone\", \"woman\", \"health\", \"getting\", \"small\", \"water\", \"news\", \"name\", \"second\", \"change\", \"business\", \"power\", \"door\", \"story\",\n    \"often\", \"data\", \"team\", \"company\", \"question\", \"book\", \"among\", \"problem\", \"later\", \"hard\", \"already\", \"wait\", \"making\", \"person\", \"together\", \"young\",\n    \"side\", \"morning\", \"play\", \"example\", \"program\", \"able\", \"become\", \"open\", \"almost\", \"behind\", \"table\", \"live\", \"start\", \"else\", \"human\", \"john\",\n    \"early\", \"five\", \"whole\", \"history\", \"across\", \"remember\", \"idea\", \"mind\", \"process\", \"wrong\", \"season\", \"rather\", \"police\", \"control\", \"although\", \"general\",\n    \"girl\", \"everyone\", \"body\", \"leave\", \"party\", \"line\", \"large\", \"pretty\", \"child\", \"light\", \"office\", \"music\", \"nice\", \"move\", \"level\", \"fine\",\n    \"order\", \"food\", \"front\", \"stay\", \"matter\", \"either\", \"moment\", \"toward\", \"future\", \"local\", \"area\", \"sense\", \"issue\", \"hope\", \"anyone\", \"possible\",\n    \"baby\", \"voice\", \"taking\", \"turn\", \"reason\", \"close\", \"half\", \"deal\", \"student\", \"friend\", \"inside\", \"major\", \"federal\", \"service\", \"gone\", \"street\",\n    \"myself\", \"market\", \"hair\", \"sort\", \"guess\", \"bring\", \"post\", \"gave\", \"provide\", \"figure\", \"security\", \"heart\", \"outside\", \"cause\", \"tonight\", \"bush\",\n    \"wife\", \"hold\", \"model\", \"south\", \"north\", \"report\", \"phone\", \"thus\", \"above\", \"ready\", \"soon\", \"media\", \"special\", \"watch\", \"couple\", \"tried\",\n    \"available\", \"current\", \"evidence\", \"energy\", \"goes\", \"view\", \"happy\", \"science\", \"stuff\", \"field\", \"alone\", \"space\", \"easy\", \"middle\", \"photo\", \"town\",\n    \"hello\", \"month\", \"result\", \"vote\", \"park\", \"answer\", \"present\", \"common\", \"certain\", \"road\", \"west\", \"interest\", \"upon\", \"herself\", \"similar\", \"practice\",\n    \"cost\", \"nature\", \"force\", \"test\", \"sound\", \"short\", \"include\", \"series\", \"brought\", \"congress\", \"language\", \"strong\", \"risk\", \"near\", \"check\", \"agree\",\n    \"list\", \"physical\", \"nation\", \"share\", \"project\", \"video\", \"culture\", \"film\", \"action\", \"private\", \"position\", \"blood\", \"learn\", \"miss\", \"total\", \"floor\",\n    \"economy\", \"industry\", \"earth\", \"record\", \"stand\", \"green\", \"truth\", \"movie\", \"brother\", \"wall\", \"rate\", \"fall\", \"board\", \"increase\", \"husband\", \"forward\",\n    \"ahead\", \"kept\", \"defense\", \"return\", \"price\", \"note\", \"window\", \"effects\", \"response\", \"walk\", \"summer\", \"focus\", \"blue\", \"paper\", \"average\", \"east\",\n    \"type\", \"beyond\", \"quality\", \"daughter\", \"step\", \"design\", \"coach\", \"blog\", \"tomorrow\", \"final\", \"hour\", \"staff\", \"drive\", \"ability\", \"race\", \"simple\",\n    \"section\", \"access\", \"entire\", \"cold\", \"various\", \"century\", \"subject\", \"mouth\", \"chief\", \"begin\", \"page\", \"speak\", \"author\", \"brown\", \"consider\", \"minute\",\n    \"choice\", \"review\", \"write\", \"cool\", \"doctor\", \"anyway\", \"senator\", \"offer\", \"excuse\", \"seven\", \"legal\", \"amount\", \"main\", \"sleep\", \"giving\", \"huge\",\n    \"theory\", \"impact\", \"success\", \"worth\", \"friday\", \"perfect\", \"hurt\", \"onto\", \"range\", \"stopped\", \"online\", \"crazy\", \"sitting\", \"welcome\", \"trade\", \"wish\",\n    \"picture\", \"size\", \"below\", \"eight\", \"sister\", \"shut\", \"sign\", \"piece\", \"june\", \"term\", \"member\", \"allow\", \"follow\", \"cover\", \"image\", \"worry\",\n    \"save\", \"judge\", \"march\", \"source\", \"hospital\", \"trust\", \"effort\", \"heat\", \"original\", \"saturday\", \"kitchen\", \"expect\", \"pass\", \"spend\", \"union\", \"july\",\n    \"forget\", \"smile\", \"safe\", \"build\", \"hate\", \"glass\", \"message\", \"popular\", \"river\", \"account\", \"anybody\", \"skin\", \"debate\", \"honey\", \"trouble\", \"dinner\",\n    \"send\", \"address\", \"daily\", \"ball\", \"credit\", \"region\", \"caught\", \"goal\", \"afraid\", \"october\", \"army\", \"budget\", \"club\", \"text\", \"search\", \"anymore\",\n    \"visit\", \"senior\", \"unless\", \"peace\", \"primary\", \"female\", \"version\", \"civil\", \"leader\", \"sample\", \"drink\", \"scene\", \"funny\", \"april\", \"income\", \"fish\",\n    \"chair\", \"shown\", \"material\", \"favorite\", \"monday\", \"brain\", \"network\", \"explain\", \"property\", \"nuclear\", \"degree\", \"song\", \"tuesday\", \"freedom\", \"marriage\", \"basic\",\n    \"wonder\", \"stage\", \"lady\", \"scale\", \"develop\", \"base\", \"rich\", \"spring\", \"fresh\", \"coffee\", \"clean\", \"september\", \"opinion\", \"bottom\", \"stock\", \"hundred\",\n    \"title\", \"choose\", \"radio\", \"claim\", \"survey\", \"rule\", \"negative\", \"rose\", \"capital\", \"normal\", \"island\", \"easily\", \"letter\", \"dream\", \"surface\", \"wide\",\n    \"trial\", \"purpose\", \"suggest\", \"sell\", \"direct\", \"protect\", \"weekend\", \"yesterday\", \"pull\", \"measure\", \"mass\", \"thursday\", \"remain\", \"seat\", \"appear\", \"labor\",\n    \"amazing\", \"camera\", \"museum\", \"method\", \"tree\", \"alive\", \"trip\", \"patient\", \"plus\", \"shoulder\", \"grow\", \"secret\", \"firm\", \"style\", \"avoid\", \"strategy\",\n    \"edge\", \"gold\", \"heavy\", \"quick\", \"charge\", \"neither\", \"travel\", \"enjoy\", \"produce\", \"captain\", \"gender\", \"hotel\", \"task\", \"round\", \"sweet\", \"track\",\n    \"apple\", \"afternoon\", \"require\", \"truly\", \"correct\", \"hill\", \"actual\", \"ship\", \"catch\", \"annual\", \"screen\", \"moral\", \"vice\", \"lake\", \"benefit\", \"drop\",\n    \"glad\", \"quiet\", \"beach\", \"filled\", \"empty\", \"memory\", \"ride\", \"card\", \"january\", \"tiny\", \"release\", \"google\", \"reform\", \"warm\", \"dance\", \"garden\",\n    \"reduce\", \"speed\", \"rise\", \"grew\", \"neck\", \"improve\", \"slow\", \"raise\", \"prison\", \"winter\", \"extra\", \"battle\", \"august\", \"receive\", \"salt\", \"spot\",\n    \"ended\", \"foot\", \"worst\", \"library\", \"spirit\", \"code\", \"mountain\", \"distance\", \"exercise\", \"regular\", \"broken\", \"join\", \"throw\", \"machine\", \"carry\", \"stone\",\n    \"chest\", \"desk\", \"aware\", \"demand\", \"camp\", \"wear\", \"identify\", \"crowd\", \"magazine\", \"artist\", \"target\", \"paying\", \"novel\", \"decide\", \"gotten\", \"notice\",\n    \"link\", \"smart\", \"cook\", \"path\", \"advice\", \"surprise\", \"cash\", \"email\", \"twice\", \"guard\", \"snow\", \"solution\", \"spread\", \"unique\", \"bright\", \"faculty\",\n    \"train\", \"urban\", \"dress\", \"uncle\", \"lucky\", \"eating\", \"truck\", \"dude\", \"evil\", \"planet\", \"weather\", \"square\", \"decade\", \"wild\", \"damage\", \"supreme\",\n    \"prevent\", \"mention\", \"host\", \"animal\", \"teach\", \"obvious\", \"master\", \"december\", \"push\", \"balance\", \"useful\", \"file\", \"agent\", \"exist\", \"initial\", \"soft\",\n    \"finish\", \"victory\", \"rain\", \"tired\", \"birth\", \"youth\", \"nose\", \"wine\", \"digital\", \"moon\", \"shop\", \"suit\", \"option\", \"sugar\", \"valley\", \"border\",\n    \"exchange\", \"lunch\", \"core\", \"clip\", \"jury\", \"domestic\", \"lying\", \"forest\", \"unit\", \"equal\", \"boat\", \"plenty\", \"yellow\", \"apart\", \"owner\", \"democracy\",\n    \"stick\", \"wake\", \"double\", \"tall\", \"visual\", \"traffic\", \"coast\", \"proud\", \"soul\", \"busy\", \"weird\", \"famous\", \"mistake\", \"wood\", \"village\", \"cross\",\n    \"guide\", \"self\", \"flight\", \"quarter\", \"aside\", \"ring\", \"chicken\", \"voting\", \"till\", \"shirt\", \"ladies\", \"waste\", \"horse\", \"theater\", \"laugh\", \"universe\",\n    \"ensure\", \"gain\", \"smoke\", \"barely\", \"plastic\", \"sport\", \"pair\", \"february\", \"sight\", \"taste\", \"remove\", \"stuck\", \"reference\", \"match\", \"gift\", \"supply\",\n    \"farm\", \"blame\", \"boss\", \"pattern\", \"super\", \"fuel\", \"object\", \"wedding\", \"fault\", \"carefully\", \"silver\", \"indicate\", \"mama\", \"reaction\", \"seek\", \"feature\",\n    \"metal\", \"enter\", \"twenty\", \"user\", \"ought\", \"usual\", \"describe\", \"buddy\", \"parent\", \"argue\", \"beauty\", \"magic\", \"click\", \"twitter\", \"device\", \"shift\",\n    \"bunch\", \"golf\", \"assume\", \"finger\", \"achieve\", \"drew\", \"draw\", \"bridge\", \"calm\", \"silent\", \"ancient\", \"kiss\", \"tool\", \"flat\", \"drove\", \"typical\",\n    \"occur\", \"quote\", \"rising\", \"display\", \"print\", \"meat\", \"orange\", \"admit\", \"rural\", \"accident\", \"pepper\", \"pool\", \"length\", \"grace\", \"solar\", \"vehicle\",\n    \"giant\", \"fashion\", \"crew\", \"estate\", \"treat\", \"tape\", \"amendment\", \"jump\", \"faster\", \"struggle\", \"suspect\", \"cream\", \"reflect\", \"rice\", \"rare\", \"jimmy\",\n    \"afford\", \"cheese\", \"album\", \"topic\", \"milk\", \"hurry\", \"cognitive\", \"ocean\", \"grant\", \"aunt\", \"mirror\", \"solid\", \"limit\", \"copy\", \"episode\", \"outcome\",\n    \"chapter\", \"bird\", \"acts\", \"transfer\", \"affected\", \"facing\", \"numerous\", \"airport\", \"promote\", \"loud\", \"awesome\", \"flying\", \"attitude\", \"darkness\", \"vast\", \"conduct\",\n    \"upper\", \"frame\", \"danger\", \"strike\", \"pink\", \"upset\", \"stadium\", \"panel\", \"brand\", \"relief\", \"emphasis\", \"category\", \"injury\", \"diet\", \"jersey\", \"gulf\",\n    \"dust\", \"client\", \"joke\", \"escape\", \"wealth\", \"coat\", \"alright\", \"grass\", \"santa\", \"brief\", \"mobile\", \"circle\", \"encourage\", \"alcohol\", \"feed\", \"noise\",\n    \"wave\", \"stairs\", \"advance\", \"engine\", \"plate\", \"document\", \"purchase\", \"sudden\", \"zone\", \"crying\", \"draft\", \"resource\", \"unable\", \"quit\", \"engage\", \"anger\",\n    \"tone\", \"festival\", \"element\", \"latter\", \"motion\", \"gore\", \"decline\", \"chosen\", \"deeply\", \"pregnant\", \"talent\", \"hidden\", \"express\", \"armed\", \"stomach\", \"spokesman\",\n    \"session\", \"winner\", \"landscape\", \"sauce\", \"narrow\", \"duty\", \"error\", \"bike\", \"capable\", \"fruit\", \"grab\", \"actor\", \"rush\", \"lesson\", \"bread\", \"sing\",\n    \"journey\", \"avenue\", \"butter\", \"steel\", \"kick\", \"route\", \"volume\", \"turkey\", \"minimum\", \"cycle\", \"electric\", \"yard\", \"detail\", \"gaze\", \"holiday\", \"trend\",\n    \"theme\", \"cheap\", \"mixture\", \"roof\", \"junior\", \"cute\", \"relax\", \"asleep\", \"witness\", \"iron\", \"jacket\", \"prepare\", \"carbon\", \"skill\", \"mixed\", \"sand\",\n    \"sentence\", \"shadow\", \"fifth\", \"manage\", \"dean\", \"disagree\", \"unusual\", \"hero\", \"hungry\", \"replace\", \"anxiety\", \"height\", \"prefer\", \"zero\", \"creek\", \"smooth\",\n    \"proof\", \"iphone\", \"innocent\", \"mail\", \"juice\", \"item\", \"split\", \"aspect\", \"crucial\", \"cable\", \"arrest\", \"attend\", \"aids\", \"recall\", \"swear\", \"fiction\",\n    \"ticket\", \"pacific\", \"update\", \"index\", \"shock\", \"desert\", \"profit\", \"nurse\", \"thirty\", \"math\", \"minor\", \"substance\", \"dirt\", \"loan\", \"monitor\", \"entry\",\n    \"cloud\", \"hence\", \"savings\", \"ending\", \"awful\", \"angle\", \"reveal\", \"boots\", \"comfort\", \"ongoing\", \"gate\", \"fiscal\", \"sheriff\", \"ordinary\", \"stir\", \"deliver\",\n    \"bone\", \"solve\", \"fiber\", \"license\", \"olympic\", \"portion\", \"cried\", \"random\", \"navy\", \"cake\", \"select\", \"shame\", \"lift\", \"ignore\", \"exact\", \"garlic\",\n    \"pilot\", \"marine\", \"ultimate\", \"shaking\", \"veteran\", \"gallery\", \"sake\", \"wheel\", \"define\", \"citizen\", \"hunt\", \"inner\", \"maximum\", \"liberty\", \"lock\", \"fool\",\n    \"swing\", \"unknown\", \"rough\", \"switch\", \"foster\", \"upstairs\", \"royal\", \"illness\", \"logic\", \"wisdom\", \"column\", \"corn\", \"repeat\", \"prayer\", \"plot\", \"sheet\",\n    \"riding\", \"clock\", \"efficient\", \"drama\", \"stable\", \"suffer\", \"ceiling\", \"pride\", \"mystery\", \"obtain\", \"brilliant\", \"knee\", \"couch\", \"oven\", \"curious\", \"deputy\",\n    \"earn\", \"belt\", \"expand\", \"palm\", \"frozen\", \"analyst\", \"dating\", \"champion\", \"phrase\", \"slept\", \"menu\", \"sequence\", \"dynamic\", \"cousin\", \"knock\", \"essay\",\n    \"gear\", \"discover\", \"elite\", \"rescue\", \"load\", \"silly\", \"ugly\", \"flash\", \"wash\", \"scope\", \"deck\", \"olive\", \"kingdom\", \"dawn\", \"muscle\", \"domain\",\n    \"priority\", \"divorce\", \"twelve\", \"evaluate\", \"soldier\", \"dining\", \"depth\", \"ethics\", \"involve\", \"vital\", \"rapid\", \"motor\", \"tower\", \"virus\", \"burden\", \"hire\",\n    \"deer\", \"flag\", \"tank\", \"rely\", \"chase\", \"combine\", \"trick\", \"prize\", \"fame\", \"wing\", \"baking\", \"monster\", \"lawsuit\", \"wolf\", \"retail\", \"salad\",\n    \"remind\", \"connect\", \"pitch\", \"atlantic\", \"alien\", \"payment\", \"wire\", \"colonial\", \"layer\", \"forum\", \"concert\", \"whoever\", \"wise\", \"fence\", \"enhance\", \"recipe\",\n    \"tissue\", \"bench\", \"dish\", \"dole\", \"soccer\", \"badly\", \"wound\", \"pause\", \"darling\", \"uniform\", \"glance\", \"settle\", \"chef\", \"empirical\", \"brush\", \"broadcast\",\n    \"ghost\", \"chronic\", \"pentagon\", \"valid\", \"fantasy\", \"garage\", \"lemon\", \"frequent\", \"disorder\", \"mutual\", \"rent\", \"humor\", \"climb\", \"liquid\", \"auto\", \"arrive\",\n    \"affair\", \"seed\", \"diabetes\", \"convince\", \"powder\", \"fitness\", \"penalty\", \"label\", \"heritage\", \"candy\", \"deny\", \"stole\", \"yield\", \"collect\", \"fortune\", \"pope\",\n    \"extend\", \"jeans\", \"mortality\", \"tail\", \"duke\", \"stem\", \"decrease\", \"implement\", \"virtual\", \"inquiry\", \"jazz\", \"soup\", \"delay\", \"assist\", \"awake\", \"abstract\",\n    \"pizza\", \"galaxy\", \"predict\", \"sixth\", \"boost\", \"midnight\", \"burst\", \"gospel\", \"cabin\", \"android\", \"shell\", \"craft\", \"gradually\", \"poem\", \"spatial\", \"racing\",\n    \"ipad\", \"opera\", \"onion\", \"actress\", \"cotton\", \"slip\", \"lyrics\", \"utility\", \"rookie\", \"depend\", \"ideology\", \"eliminate\", \"bacteria\", \"inch\", \"gather\", \"coping\",\n    \"input\", \"tobacco\", \"exit\", \"judicial\", \"refuse\", \"horror\", \"sacred\", \"robin\", \"differ\", \"scheme\", \"anchor\", \"lawn\", \"slide\", \"backed\", \"arena\", \"invest\",\n    \"trash\", \"failing\", \"output\", \"wage\", \"clay\", \"dried\", \"exhibit\", \"genius\", \"acid\", \"beef\", \"bullet\", \"flavor\", \"enable\", \"eager\", \"abroad\", \"biology\",\n    \"clinic\", \"panic\", \"mask\", \"aging\", \"script\", \"embrace\", \"permit\", \"sword\", \"elevator\", \"lily\", \"grip\", \"nominee\", \"lonely\", \"tennis\", \"slight\", \"eligible\",\n    \"gentle\", \"ranch\", \"globe\", \"tube\", \"glory\", \"chip\", \"banking\", \"insane\", \"blade\", \"essence\", \"venture\", \"spin\", \"boring\", \"outdoor\", \"density\", \"fancy\",\n    \"timing\", \"carol\", \"brave\", \"rally\", \"cliff\", \"repair\", \"fabric\", \"saint\", \"flower\", \"tackle\", \"habit\", \"amid\", \"endless\", \"symbol\", \"spell\", \"spare\",\n    \"immune\", \"alert\", \"ridge\", \"rope\", \"garbage\", \"harbor\", \"guilt\", \"piano\", \"guitar\", \"myth\", \"alpha\", \"shed\", \"genuine\", \"observe\", \"excess\", \"alarm\",\n    \"segment\", \"faint\", \"ritual\", \"gravity\", \"width\", \"blanket\", \"manual\", \"drank\", \"oxygen\", \"bitter\", \"pound\", \"oxford\", \"mouse\", \"cruise\", \"attract\", \"chaos\",\n    \"tent\", \"rail\", \"crystal\", \"duration\", \"chemicals\", \"luxury\", \"cure\", \"trigger\", \"comic\", \"wrap\", \"praise\", \"ranked\", \"upcoming\", \"mandate\", \"breeze\", \"emerge\",\n    \"purse\", \"punch\", \"twin\", \"cave\", \"swept\", \"salmon\", \"canyon\", \"feminist\", \"gesture\", \"cloth\", \"reward\", \"phoenix\", \"monetary\", \"castle\", \"swung\", \"rifle\",\n    \"regret\", \"silk\", \"swim\", \"rage\", \"hockey\", \"precise\", \"outer\", \"buffalo\", \"submit\", \"grocery\", \"divide\", \"emotion\", \"invite\", \"skirt\", \"census\", \"tiger\",\n    \"wrist\", \"grill\", \"spray\", \"miracle\", \"patch\", \"resist\", \"tunnel\", \"brick\", \"tactics\", \"poet\", \"confirm\", \"palace\", \"shoe\", \"crop\", \"custom\", \"glow\",\n    \"caring\", \"bath\", \"thumb\", \"rival\", \"sadly\", \"pipe\", \"grief\", \"hood\", \"neutral\", \"liability\", \"pension\", \"genre\", \"install\", \"margin\", \"barn\", \"legend\",\n    \"clause\", \"outlook\", \"stimulus\", \"bless\", \"awkward\", \"harsh\", \"carpet\", \"dragon\", \"jealous\", \"lens\", \"folk\", \"alike\", \"diamond\", \"romance\", \"patrol\", \"adjust\",\n    \"mercy\", \"tribe\", \"curve\", \"parade\", \"tightly\", \"cluster\", \"cattle\", \"critic\", \"skull\", \"nerve\", \"whisper\", \"fluid\", \"alley\", \"trap\", \"casual\", \"rocket\",\n    \"rubber\", \"snake\", \"usage\", \"duck\", \"toss\", \"useless\", \"gorgeous\", \"pork\", \"basket\", \"detect\", \"vertical\", \"scare\", \"hint\", \"blast\", \"clever\", \"pastor\",\n    \"bubble\", \"twist\", \"athlete\", \"rhythm\", \"snap\", \"penny\", \"premium\", \"syndrome\", \"eaten\", \"delta\", \"tomato\", \"dutch\", \"tshirt\", \"slice\", \"unfair\", \"pole\",\n    \"dose\", \"fork\", \"dignity\", \"elegant\", \"grain\", \"lazy\", \"medal\", \"skiing\", \"geography\", \"harvest\", \"ruined\", \"orbit\", \"arise\", \"canvas\", \"blend\", \"inform\",\n    \"aged\", \"urge\", \"leaf\", \"negotiate\", \"eternal\", \"cage\", \"upgrade\", \"damp\", \"aluminum\", \"tragic\", \"alter\", \"barrel\", \"acquire\", \"liar\", \"bonus\", \"verdict\",\n    \"envelope\", \"ecosystem\", \"blinked\", \"viable\", \"chat\", \"disk\", \"spoon\", \"pulse\", \"filter\", \"molecular\", \"laptop\", \"laundry\", \"fever\", \"toast\", \"stunned\", \"shallow\",\n    \"boil\", \"pardon\", \"potato\", \"elaborate\", \"monkey\", \"ambitious\", \"roster\", \"atop\", \"hatred\", \"elbow\", \"varying\", \"municipal\", \"fossil\", \"ashamed\", \"ecology\", \"lecture\",\n    \"salvation\", \"flip\", \"fled\", \"filing\", \"oppose\", \"quantum\", \"wagon\", \"robot\", \"nail\", \"loop\", \"upward\", \"lion\", \"lamp\", \"doll\", \"rude\", \"cart\",\n    \"impose\", \"infant\", \"merry\", \"pond\", \"noble\", \"hammer\", \"purely\", \"cruel\", \"retention\", \"shrimp\", \"soap\", \"vocal\", \"bulk\", \"reluctant\", \"vessel\", \"borrow\",\n    \"waving\", \"sunny\", \"clerk\", \"retreat\", \"curled\", \"matrix\", \"junk\", \"rack\", \"uncertain\", \"notable\", \"absent\", \"fraction\", \"drill\", \"wheat\", \"asset\", \"helmet\",\n    \"ninth\", \"cherry\", \"tray\", \"sunset\", \"stack\", \"stove\", \"spouse\", \"buzz\", \"autism\", \"shine\", \"surge\", \"theft\", \"poison\", \"squeeze\", \"bacon\", \"soda\",\n    \"abruptly\", \"sustain\", \"grid\", \"jungle\", \"tide\", \"loyal\", \"nest\", \"denial\", \"approve\", \"aisle\", \"ginger\", \"glimpse\", \"diagram\", \"gaming\", \"hybrid\", \"amber\",\n    \"lung\", \"eagle\", \"cape\", \"shield\", \"semester\", \"epic\", \"exotic\", \"educate\", \"ruby\", \"ladder\", \"scout\", \"curse\", \"parish\", \"plaza\", \"radar\", \"emperor\",\n    \"thee\", \"fatal\", \"casino\", \"outfit\", \"crisp\", \"warfare\", \"fabulous\", \"rabbit\", \"employ\", \"curtain\", \"robust\", \"imperial\", \"unhappy\", \"vague\", \"absurd\", \"ankle\",\n    \"astronomy\", \"enforce\", \"intact\", \"warrior\", \"gambling\", \"flame\", \"debris\", \"pledge\", \"retire\", \"petition\", \"taxi\", \"announce\", \"trim\", \"wipe\", \"bucket\", \"hydrogen\",\n    \"trembling\", \"behave\", \"apology\", \"scan\", \"grove\", \"crush\", \"puzzle\", \"auction\", \"cope\", \"abandon\", \"fold\", \"hollow\", \"adapt\", \"waking\", \"satisfy\", \"tourist\",\n    \"vacuum\", \"yoga\", \"sculpture\", \"sphere\", \"illusion\", \"cargo\", \"juvenile\", \"dock\", \"canal\", \"vintage\", \"bean\", \"arrange\", \"silicon\", \"copper\", \"ambulance\", \"harmful\",\n    \"bust\", \"brass\", \"blah\", \"arctic\", \"pending\", \"autumn\", \"icon\", \"caution\", \"slim\", \"epidemic\", \"fragile\", \"mankind\", \"calcium\", \"merit\", \"pencil\", \"dilemma\",\n    \"moisture\", \"steak\", \"elder\", \"swift\", \"despair\", \"whale\", \"lance\", \"tweet\", \"aide\", \"humble\", \"thunder\", \"bicycle\", \"payroll\", \"algorithm\", \"marathon\", \"bargain\",\n    \"unlimited\", \"twilight\", \"inspire\", \"dioxide\", \"wool\", \"tuition\", \"herbs\", \"rebel\", \"subway\", \"halt\", \"upright\", \"organ\", \"sadness\", \"pill\", \"plug\", \"marble\",\n    \"coke\", \"sierra\", \"buyer\", \"mansion\", \"audit\", \"echo\", \"triumph\", \"bronze\", \"hawk\", \"onset\", \"pouring\", \"boxing\", \"clarify\", \"robe\", \"rebuild\", \"timothy\",\n    \"widow\", \"fatigue\", \"diary\", \"cosmic\", \"coin\", \"sank\", \"expose\", \"setup\", \"outrage\", \"fade\", \"synthesis\", \"edit\", \"spike\", \"dairy\", \"upside\", \"gown\",\n    \"sponsor\", \"float\", \"maid\", \"baked\", \"arrow\", \"seldom\", \"crane\", \"catalog\", \"sneak\", \"neatly\", \"lounge\", \"elephant\", \"drift\", \"grinning\", \"bachelor\", \"dusk\",\n    \"empathy\", \"pumpkin\", \"guts\", \"urging\", \"goat\", \"cancel\", \"antique\", \"cinema\", \"donate\", \"petty\", \"trophy\", \"punk\", \"neglect\", \"tooth\", \"roast\", \"outbreak\",\n    \"peanut\", \"whip\", \"plausible\", \"drained\", \"veto\", \"monument\", \"yogurt\", \"armor\", \"kidney\", \"hull\", \"drum\", \"asthma\", \"balcony\", \"obscure\", \"slot\", \"daylight\",\n    \"slender\", \"shaft\", \"shaping\", \"parsley\", \"unaware\", \"donor\", \"awhile\", \"aviation\", \"timber\", \"dismiss\", \"utter\", \"pioneer\", \"tattoo\", \"velocity\", \"limb\", \"immense\",\n    \"absorb\", \"naive\", \"misery\", \"peculiar\", \"dodge\", \"clown\", \"arbitrary\", \"parole\", \"majesty\", \"runner\", \"evolve\", \"glue\", \"frost\", \"ozone\", \"lining\", \"syrup\",\n    \"gossip\", \"melt\", \"sage\", \"cane\", \"rigid\", \"impulse\", \"erosion\", \"ferry\", \"maple\", \"picnic\", \"void\", \"dash\", \"glove\", \"burger\", \"crawl\", \"skies\",\n    \"vivid\", \"trio\", \"cinnamon\", \"oval\", \"velvet\", \"banana\", \"axis\", \"indoor\", \"fury\", \"enduring\", \"barbecue\", \"glare\", \"prone\", \"eats\", \"wikipedia\", \"slate\",\n    \"cement\", \"blouse\", \"salon\", \"lure\", \"snack\", \"knelt\", \"puppy\", \"caucus\", \"feast\", \"gratitude\", \"dial\", \"turtle\", \"mold\", \"wizard\", \"lend\", \"visa\",\n    \"yahoo\", \"proximity\", \"bartender\", \"bolt\", \"viral\", \"slam\", \"thigh\", \"stamp\", \"drone\", \"cathedral\", \"venue\", \"sketch\", \"garnish\", \"coherent\", \"stool\", \"foil\",\n    \"gazing\", \"delete\", \"bounce\", \"aggregate\", \"lunar\", \"dubbed\", \"chop\", \"zombie\", \"thrive\", \"sanctuary\", \"dislike\", \"nephew\", \"modify\", \"eclipse\", \"polar\", \"badge\",\n    \"foam\", \"arose\", \"monopoly\", \"panama\", \"amused\", \"banner\", \"shone\", \"fading\", \"petroleum\", \"runway\", \"fidelity\", \"verify\", \"maturity\", \"unwilling\", \"ashes\", \"spider\",\n    \"rumor\", \"navigate\", \"blunt\", \"preacher\", \"gleaming\", \"attach\", \"refined\", \"bunny\", \"cedar\", \"tapping\", \"ample\", \"nickname\", \"daisy\", \"vista\", \"coral\", \"ribbon\",\n    \"reunion\", \"jeep\", \"tipped\", \"outward\", \"exile\", \"chunk\", \"resemble\", \"envy\", \"umbrella\", \"unrelated\", \"cough\", \"flock\", \"vacant\", \"parlor\", \"masculine\", \"uranium\",\n    \"obstacle\", \"ditch\", \"stubborn\", \"poker\", \"naming\", \"coconut\", \"unstable\", \"exclude\", \"affiliate\", \"module\", \"reps\", \"semantic\", \"crept\", \"chewing\", \"bats\", \"cannon\",\n    \"psychic\", \"hazard\", \"unwanted\", \"ethanol\", \"ragged\", \"prolonged\", \"sturdy\", \"ivory\", \"trinity\", \"factual\", \"ipod\", \"dime\", \"bundle\", \"riot\", \"apostle\", \"diner\",\n    \"culinary\", \"lucrative\", \"emission\", \"turf\", \"nebula\", \"ramp\", \"juror\", \"demise\", \"shrug\", \"unsure\", \"ninja\", \"turmoil\", \"rotten\", \"stellar\", \"imminent\", \"cozy\",\n    \"disbelief\", \"vowed\", \"scrap\", \"rehab\", \"vigorous\", \"tile\", \"uneasy\", \"dentist\", \"endorse\", \"dove\", \"symptom\", \"fringe\", \"amnesty\", \"scoop\", \"cilantro\", \"xbox\",\n    \"altitude\", \"batch\", \"vest\", \"volatile\", \"liking\", \"itunes\", \"apron\", \"raven\", \"shove\", \"fetch\", \"napkin\", \"heap\", \"nanny\", \"jelly\", \"dwarf\", \"suburb\",\n    \"quilt\", \"scam\", \"clash\", \"regain\", \"cache\", \"humming\", \"abnormal\", \"frantic\", \"dizzy\", \"nineteen\", \"exemption\", \"popcorn\", \"cloak\", \"bulb\", \"unison\", \"herald\",\n    \"laurel\", \"paycheck\", \"elusive\", \"celery\", \"cabbage\", \"thickness\", \"kinship\", \"stereo\", \"vegan\", \"onstage\", \"dictator\", \"angrily\", \"anyhow\", \"dipped\", \"reckless\", \"seminar\",\n    \"darn\", \"niece\", \"frown\", \"trilogy\", \"daunting\", \"hesitate\", \"salsa\", \"trivial\", \"boxer\", \"swell\", \"ounce\", \"surround\", \"pony\", \"unseen\", \"rogue\", \"saga\",\n    \"pyramid\", \"marvelous\", \"tying\", \"wrath\", \"voyage\", \"rover\", \"gigantic\", \"scotch\", \"sesame\", \"friction\", \"hypocrisy\", \"baggage\", \"diminish\", \"curator\", \"affluent\", \"coma\",\n    \"stew\", \"rinse\", \"zoning\", \"ebay\", \"upscale\", \"exhaust\", \"vendor\", \"jaws\", \"woven\", \"violin\", \"oops\", \"daytime\", \"citation\", \"glucose\", \"drown\", \"geometry\",\n    \"agony\", \"rebound\", \"alto\", \"carnival\", \"obedience\", \"hush\", \"pulmonary\", \"cavalry\", \"purity\", \"unhealthy\", \"refrain\", \"awoke\", \"anatomy\", \"unpopular\", \"estrogen\", \"java\",\n    \"lumber\", \"lavender\", \"poking\", \"perennial\", \"clutch\", \"uninsured\", \"neon\", \"skeleton\", \"shack\", \"parmesan\", \"dumping\", \"chevy\", \"splendid\", \"reproduce\", \"avid\", \"geek\",\n    \"pueblo\", \"dice\", \"scroll\", \"sedan\", \"tilt\", \"sway\", \"mule\", \"hamlet\", \"grape\", \"jasmine\", \"tavern\", \"raging\", \"deed\", \"upheld\", \"cube\", \"disregard\",\n    \"cone\", \"nutrient\", \"oppressed\", \"suing\", \"crimson\", \"humility\", \"choking\", \"walnut\", \"rash\", \"foyer\", \"oyster\", \"swan\", \"perpetual\", \"query\", \"font\", \"zoom\",\n    \"slogan\", \"frenzy\", \"yeast\", \"vascular\", \"derby\", \"harness\", \"upload\", \"pajamas\", \"trunks\", \"phantom\", \"carving\", \"drastic\", \"staple\", \"uneven\", \"flap\", \"unchanged\",\n    \"anthem\", \"mushroom\", \"gluten\", \"exquisite\", \"drizzle\", \"asparagus\", \"irregular\", \"bleak\", \"proactive\", \"sloppy\", \"cortex\", \"spur\", \"womb\", \"exodus\", \"lent\", \"obsolete\",\n    \"grazing\", \"almighty\", \"lantern\", \"salute\", \"atom\", \"hefty\", \"bony\", \"polo\", \"floral\", \"glacier\", \"raft\", \"deploy\", \"guru\", \"enroll\", \"kosher\", \"mutation\",\n    \"sibling\", \"revolt\", \"ouch\", \"brewing\", \"alibi\", \"amino\", \"blazing\", \"falcon\", \"hacking\", \"flint\", \"baton\", \"depict\", \"gamma\", \"aspirin\", \"nylon\", \"pediatric\",\n    \"broom\", \"acre\", \"sabbath\", \"glamorous\", \"turbine\", \"extinct\", \"unsafe\", \"quake\", \"bamboo\", \"bolster\", \"groom\", \"flick\", \"mantra\", \"hastily\", \"graffiti\", \"pavilion\",\n    \"rust\", \"mundane\", \"bluff\", \"uphill\", \"sediment\", \"enzyme\", \"sermon\", \"coronary\", \"blizzard\", \"uncover\", \"bash\", \"ebook\", \"avalanche\", \"slapping\", \"cadillac\", \"perjury\",\n    \"unpaid\", \"dazzling\", \"cavity\", \"freight\", \"capsule\", \"disgrace\", \"crib\", \"unfold\", \"empower\", \"blush\", \"clone\", \"motto\", \"sizable\", \"uphold\", \"plywood\", \"tidy\",\n    \"tidal\", \"cider\", \"disdain\", \"bonding\", \"dominion\", \"gothic\", \"envision\", \"nerd\", \"splashed\", \"ominous\", \"manor\", \"unlawful\", \"dotted\", \"subgroup\", \"taps\", \"outing\",\n    \"mosaic\", \"eccentric\", \"nurture\", \"cupped\", \"sitcom\", \"mashed\", \"immortal\", \"demeanor\", \"abide\", \"sushi\", \"rethink\", \"sinister\", \"stench\", \"brethren\", \"unnatural\", \"multiply\",\n    \"pagan\", \"cylinder\", \"karma\", \"bogus\", \"unequal\", \"halves\", \"rumble\", \"claw\", \"paced\", \"monastery\", \"expire\", \"outgoing\", \"garment\", \"stumble\", \"await\", \"deacon\",\n    \"morbidity\", \"mummy\", \"ceramics\", \"citrus\", \"untouched\", \"evoke\", \"stout\", \"pesticide\", \"duplicate\", \"frying\", \"cradle\", \"lavish\", \"siren\", \"crescent\", \"frail\", \"dagger\",\n    \"mute\", \"vineyard\", \"pupil\", \"pulp\", \"corporal\", \"latitude\", \"voltage\", \"abdominal\", \"junction\", \"rearview\", \"diaper\", \"moaning\", \"skype\", \"stash\", \"paddle\", \"putt\",\n    \"fetal\", \"eggplant\", \"diploma\", \"pouch\", \"evacuate\", \"haunt\", \"slab\", \"deity\", \"thud\", \"slacks\", \"upbeat\", \"varsity\", \"lizard\", \"skipping\", \"mating\", \"dart\",\n    \"kitten\", \"elastic\", \"debtor\", \"catfish\", \"vanish\", \"kudos\", \"immature\", \"smashing\", \"luminous\", \"maverick\", \"hamburger\", \"sarcasm\", \"shudder\", \"poppy\", \"goofy\", \"murky\",\n    \"dwelling\", \"usable\", \"taco\", \"diocese\", \"slit\", \"mahogany\", \"sublime\", \"ascertain\", \"licking\", \"wiring\", \"nicotine\", \"brittle\", \"aroma\", \"swarm\", \"subtly\", \"unnoticed\",\n    \"enlarged\", \"brunch\", \"sniff\", \"duct\", \"rhyme\", \"skyline\", \"snoring\", \"smuggling\", \"mango\", \"sludge\", \"onboard\", \"cascade\", \"botanical\", \"vantage\", \"safari\", \"fascism\",\n    \"hurdle\", \"grunt\", \"cucumber\", \"armchair\", \"avatar\", \"wrought\", \"skewed\", \"unethical\", \"chlorine\", \"casket\", \"usher\", \"angular\", \"mural\", \"sulfur\", \"prenatal\", \"enrich\",\n    \"latch\", \"tainted\", \"parcel\", \"hash\", \"tutor\", \"hulk\", \"apache\", \"stiffness\", \"colt\", \"untrue\", \"plural\", \"bobbing\", \"algebra\", \"tanned\", \"clad\", \"capped\",\n    \"slashed\", \"wifi\", \"setback\", \"kettle\", \"ludicrous\", \"grit\", \"calorie\", \"tumble\", \"ultra\", \"entail\", \"pang\", \"obnoxious\", \"goggles\", \"mulch\", \"delusion\", \"giggle\",\n    \"sagging\", \"unspoken\", \"utmost\", \"caliber\", \"sprung\", \"morse\", \"cricket\", \"slain\", \"jolt\", \"embody\", \"dugout\", \"payday\", \"sabotage\", \"thorn\", \"ignition\", \"defy\",\n    \"shabby\", \"crook\", \"culprit\", \"dimly\", \"skeptic\", \"antarctic\", \"omega\", \"subdued\", \"swirl\", \"reopen\", \"palpable\", \"rewrite\", \"cactus\", \"bloated\", \"craving\", \"guise\",\n    \"panther\", \"wrench\", \"jogging\", \"ripple\", \"getaway\", \"jolly\", \"finch\", \"reclaim\", \"shuffle\", \"dolphin\", \"fanning\", \"uptown\", \"voucher\", \"rosy\", \"rift\", \"ebony\",\n    \"rigor\", \"espionage\", \"brim\", \"nutmeg\", \"caravan\", \"coauthor\", \"gloss\", \"omission\", \"hurled\", \"giddy\", \"manned\", \"payer\", \"whiff\", \"helium\", \"bribe\", \"manifesto\",\n    \"uncanny\", \"geology\", \"janitor\", \"ridden\", \"hazy\", \"envoy\", \"jockey\", \"comrade\", \"cheddar\", \"imitate\", \"robbing\", \"afloat\", \"elves\", \"anew\", \"oasis\", \"prowess\",\n    \"agile\", \"augmented\", \"onward\", \"kung\", \"blatantly\", \"flanked\", \"erratic\", \"cubicle\", \"muzzle\", \"seismic\", \"groin\", \"sullen\", \"hassle\", \"utopia\", \"shawl\", \"eloquent\",\n    \"freckles\", \"trolling\", \"serpent\", \"siding\", \"glitter\", \"grueling\", \"wand\", \"dwindling\", \"kite\", \"diligence\", \"rake\", \"polymer\", \"annex\", \"feeble\", \"banish\", \"icing\",\n    \"reuse\", \"denote\", \"emit\", \"payback\", \"curfew\", \"parrot\", \"blitz\", \"relocate\", \"mower\", \"cassette\", \"cork\", \"slug\", \"stitch\", \"uptake\", \"linoleum\", \"unbiased\",\n    \"sinner\", \"huddle\", \"plutonium\", \"enclosure\", \"wiry\", \"acorn\", \"flyer\", \"chubby\", \"smirk\", \"reputable\", \"myspace\", \"edgy\", \"plow\", \"lucid\", \"espresso\", \"roaming\",\n    \"dosage\", \"dill\", \"swipe\", \"rectangle\", \"yarn\", \"saline\", \"lagoon\", \"balsamic\", \"barley\", \"sled\", \"rejoice\", \"coliseum\", \"gutter\", \"pancake\", \"clatter\", \"frivolous\",\n    \"wavy\", \"enchanted\", \"clamp\", \"borough\", \"remnant\", \"duffel\", \"whomever\", \"gulp\", \"lagged\", \"opium\", \"subprime\", \"idly\", \"bulge\", \"onslaught\", \"tummy\", \"frayed\",\n    \"cadmium\", \"morphine\", \"plethora\", \"ferocious\", \"tweak\", \"rink\", \"rambling\", \"satchel\", \"desolate\", \"pecan\", \"unmarked\", \"arson\", \"esquire\", \"faucet\", \"aptly\", \"coil\",\n    \"perish\", \"yummy\", \"clump\", \"flirt\", \"chute\", \"frighten\", \"crouch\", \"buggy\", \"python\", \"aloft\", \"brute\", \"murmuring\", \"pebble\", \"quail\", \"badass\", \"rupture\",\n    \"manpower\", \"quadrant\", \"jingle\", \"savor\", \"sliver\", \"manly\", \"rebirth\", \"fervor\", \"unruly\", \"expulsion\", \"flop\", \"ravine\", \"fiddle\", \"ditto\", \"engraved\", \"jargon\",\n    \"seizing\", \"muck\", \"manhood\", \"entourage\", \"shrank\", \"panda\", \"nectar\", \"recreate\", \"paternal\", \"spied\", \"veal\", \"acutely\", \"karate\", \"lego\", \"mammal\", \"ploy\",\n    \"atypical\", \"shredder\", \"purge\", \"marlin\", \"exalted\", \"deem\", \"waltz\", \"enamel\", \"dedicate\", \"unwelcome\", \"hangover\", \"cofounder\", \"celtic\", \"aptitude\", \"daycare\", \"deafening\",\n    \"creole\", \"rabid\", \"kinetic\", \"emblem\", \"whoops\", \"mayday\", \"lash\", \"duchess\", \"unlucky\", \"cadet\", \"upfront\", \"deprive\", \"acclaim\", \"nutty\", \"ammonia\", \"conjure\",\n    \"rarity\", \"fondly\", \"jumbo\", \"lanky\", \"joyous\", \"extortion\", \"douche\", \"juggling\", \"simmering\", \"lark\", \"huff\", \"mumbling\", \"enigmatic\", \"rundown\", \"visor\", \"eradicate\",\n    \"paprika\", \"debit\", \"paparazzi\", \"uplifting\", \"canine\", \"tucking\", \"duly\", \"fang\", \"edging\", \"uproar\", \"epiphany\", \"afar\", \"deftly\", \"hunk\", \"maroon\", \"bleep\",\n    \"pungent\", \"embark\", \"staunch\", \"cupcake\", \"pamphlet\", \"cobalt\", \"whimsical\", \"audacity\", \"wreath\", \"evade\", \"wrinkle\", \"dimmed\", \"grimace\", \"cringe\", \"nutshell\", \"wilt\",\n    \"neuron\", \"unsolved\", \"fanatic\", \"macaroni\", \"tinker\", \"gauze\", \"rickety\", \"pesky\", \"wasp\", \"pessimism\", \"slang\", \"veggie\", \"unworthy\", \"phosphate\", \"unquote\", \"ricotta\",\n    \"snagged\", \"elongated\", \"grudge\", \"sprout\", \"fleshy\", \"synopsis\", \"thaw\", \"derail\", \"drab\", \"calamity\", \"skid\", \"sanitary\", \"lazily\", \"xerox\", \"lair\", \"snout\",\n    \"onscreen\", \"yiddish\", \"evasion\", \"smog\", \"porous\", \"shrouded\", \"bagel\", \"sheath\", \"unicorn\", \"secluded\", \"itinerary\", \"coexist\", \"stalemate\", \"astute\", \"sift\", \"pluck\",\n    \"suction\", \"yanking\", \"bruising\", \"esteemed\", \"rebate\", \"dingy\", \"widget\", \"oncoming\", \"exuberant\", \"wobbly\", \"prelude\", \"bonfire\", \"tingling\", \"nape\", \"clover\", \"chug\",\n    \"dyslexia\", \"prozac\", \"mutt\", \"quiver\", \"scuba\", \"jinx\", \"easel\", \"serotonin\", \"endanger\", \"jarring\", \"wharf\", \"waffle\", \"ajar\", \"twig\", \"mace\", \"pelvis\",\n    \"banter\", \"pruning\", \"nimble\", \"anemia\", \"limelight\", \"seduce\", \"ligament\", \"anaerobic\", \"wolverine\", \"cryptic\", \"lurch\", \"kerosene\", \"boasting\", \"panorama\", \"babbling\", \"umpire\",\n    \"creme\", \"fanfare\", \"posh\", \"jukebox\", \"enquirer\", \"limping\", \"unbroken\", \"iodine\", \"deflation\", \"risotto\", \"hazing\", \"idiocy\", \"goliath\", \"unbeaten\", \"zebra\", \"rants\",\n    \"omit\", \"tarmac\", \"dork\", \"dormitory\", \"skimmed\", \"feisty\", \"stoic\", \"arming\", \"crux\", \"oxidation\", \"mournful\", \"swoop\", \"saffron\", \"fender\", \"cola\", \"pried\",\n    \"gimmick\", \"maggot\", \"grumbling\", \"deduct\", \"fedora\", \"sassy\", \"swagger\", \"agnostic\", \"obituary\", \"slum\", \"gong\", \"rind\", \"nemesis\", \"nifty\", \"erupt\", \"gullible\",\n    \"awry\", \"mowing\", \"snitch\", \"woof\", \"sizzling\", \"wince\", \"yelp\", \"broiler\", \"irritable\", \"retorted\", \"alias\", \"bovine\", \"shimmer\", \"scowling\", \"earring\", \"bonnet\",\n    \"molasses\", \"sneeze\", \"ruse\", \"zeppelin\", \"canteen\", \"ether\", \"unskilled\", \"reiterate\", \"spew\", \"hamper\", \"doable\", \"scorpion\", \"almanac\", \"daybreak\", \"legislate\", \"skyward\",\n    \"swivel\", \"earshot\", \"outage\", \"tiring\", \"tulip\", \"jokingly\", \"aloof\", \"donut\", \"wistful\", \"churn\", \"dares\", \"turret\", \"cleft\", \"blot\", \"tantrum\", \"outnumber\",\n    \"epilepsy\", \"baritone\", \"italics\", \"atrium\", \"askew\", \"dandy\", \"hatchet\", \"wannabe\", \"fable\", \"reshape\", \"opal\", \"linguini\", \"viper\", \"uptight\", \"wispy\", \"hypnotic\",\n    \"sash\", \"dorsal\", \"sultry\", \"blob\", \"shun\", \"glaucoma\", \"greyhound\", \"luster\", \"raking\", \"unnerving\", \"unscathed\", \"unmoving\", \"evaporate\", \"quack\", \"flaring\", \"lukewarm\",\n    \"fraternal\", \"smudge\", \"bogged\", \"dilute\", \"banjo\", \"splurge\", \"gauntlet\", \"lilac\", \"awning\", \"nautical\", \"baffling\", \"varnish\", \"kleenex\", \"bonanza\", \"upturned\", \"amigo\",\n    \"scapegoat\", \"snarl\", \"anyplace\", \"otter\", \"lapel\", \"panhandle\", \"whiny\", \"kangaroo\", \"unwrapped\", \"renounce\", \"alkaline\", \"aqua\", \"siberian\", \"omen\", \"etching\", \"bluish\",\n    \"rigging\", \"flier\", \"celibacy\", \"kilometer\", \"saxophone\", \"undress\", \"alfalfa\", \"peddling\", \"dainty\", \"smitten\", \"blip\", \"elated\", \"unplanned\", \"paltry\", \"dribble\", \"geriatric\",\n    \"unholy\", \"unproven\", \"hermit\", \"litmus\", \"synergy\", \"schilling\", \"silt\", \"mutiny\", \"mardi\", \"wimp\", \"drool\", \"peroxide\", \"tint\", \"payable\", \"reggae\", \"unending\",\n    \"clang\", \"floss\", \"atrocious\", \"detonate\", \"malt\", \"rimmed\", \"sizing\", \"hamster\", \"chirping\", \"tabby\", \"roulette\", \"humvee\", \"destitute\", \"unfunded\", \"crock\", \"lard\",\n    \"catwalk\", \"shush\", \"swab\", \"gaffe\", \"scolding\", \"ladle\", \"trifle\", \"unkind\", \"deport\", \"lapping\", \"jigsaw\", \"surname\", \"snuff\", \"fructose\", \"resale\", \"leggings\",\n    \"feline\", \"zealous\", \"jalapeno\", \"cuddle\", \"amiss\", \"kimono\", \"napping\", \"cusp\", \"chump\", \"thong\", \"amiable\", \"isotope\", \"rascal\", \"reptile\", \"clunky\", \"unopened\",\n    \"caddie\", \"unkempt\", \"quirk\", \"wick\", \"romp\", \"surcharge\", \"zodiac\", \"raider\", \"shank\", \"aghast\", \"glazing\", \"kennel\", \"perky\", \"slush\", \"gusto\", \"camcorder\",\n    \"stipend\", \"knapsack\", \"gurgling\", \"reimburse\", \"flaky\", \"preheated\", \"blissful\", \"yonder\", \"roving\", \"reaffirm\", \"amulet\", \"aloha\", \"movable\", \"chowder\", \"untapped\", \"cinch\",\n    \"nugget\", \"groggy\", \"detract\", \"vibes\", \"gills\", \"ablaze\", \"musket\", \"cupid\", \"tycoon\", \"deuce\", \"umbilical\", \"tubular\", \"pout\", \"jittery\", \"truffle\", \"knoll\",\n    \"femur\", \"flaxseed\", \"haphazard\", \"folic\", \"defuse\", \"livable\", \"trespass\", \"ointment\", \"magma\", \"nibble\", \"appointee\", \"frisbee\", \"afoot\", \"pelt\", \"dissuade\", \"deodorant\",\n    \"sphinx\", \"euphemism\", \"affront\", \"pelican\", \"sauna\", \"rudder\", \"vengeful\", \"reappear\", \"chihuahua\", \"reheat\", \"gondola\", \"rewind\", \"flounder\", \"labrador\", \"licorice\", \"abrasive\",\n    \"mossy\", \"smock\", \"abreast\", \"hemlock\", \"tibia\", \"polka\", \"gibberish\", \"drudge\", \"ooze\", \"lurk\", \"volley\", \"outhouse\", \"magenta\", \"velcro\", \"sycamore\", \"irate\",\n    \"crayon\", \"poplar\", \"wafer\", \"cobbler\", \"darwinism\", \"phobia\", \"tiara\", \"barometer\", \"rename\", \"baguette\", \"enslave\", \"wham\", \"rotunda\", \"unshaven\", \"tarot\", \"grub\",\n    \"porridge\", \"galore\", \"docile\", \"lullaby\", \"fidgeting\", \"slaw\", \"coerce\", \"gooey\", \"snugly\", \"skyrocket\", \"lint\", \"guacamole\", \"stupor\", \"frustrate\", \"snooze\", \"unafraid\",\n    \"boxy\", \"thyself\", \"balmy\", \"hertz\", \"aloe\", \"endpoint\", \"geiger\", \"ibuprofen\", \"gory\", \"daydream\", \"kiwi\", \"taunt\", \"judo\", \"exorcism\", \"esophagus\", \"mulberry\",\n    \"joystick\", \"unraveled\", \"froth\", \"undated\", \"snippet\", \"valuables\", \"ruckus\", \"crevice\", \"zipping\", \"dowry\", \"lubricant\", \"prewar\", \"ungodly\", \"petal\", \"scion\", \"raffle\",\n    \"elude\", \"croak\", \"runt\", \"unjustly\", \"eskimo\", \"gush\", \"maimed\", \"clique\", \"unsigned\", \"goon\", \"elixir\", \"silo\", \"kiln\", \"plop\", \"talon\", \"oxymoron\",\n    \"kelp\", \"dexterity\", \"pellet\", \"anvil\", \"corset\", \"scavenger\", \"twirl\", \"jugular\", \"popsicle\", \"purr\", \"fretted\", \"gopher\", \"crudely\", \"oblong\", \"scoff\", \"conical\",\n    \"serrated\", \"tutu\", \"gangly\", \"snide\", \"ritalin\", \"stoke\", \"zips\", \"tartar\", \"duress\", \"doze\", \"dutiful\", \"earpiece\", \"dimness\", \"peso\", \"thrash\", \"jailhouse\",\n    \"opacity\", \"subatomic\", \"imbecile\", \"venomous\", \"obtuse\", \"dimple\", \"smother\", \"viscous\", \"paging\", \"quintet\", \"mocha\", \"clench\", \"gummy\", \"chivalry\", \"dilation\", \"disengage\",\n    \"suave\", \"icky\", \"urchin\", \"talisman\", \"upswing\", \"blighted\", \"tidbit\", \"doodle\", \"savanna\", \"bunt\", \"jubilant\", \"zoology\", \"debunk\", \"jester\", \"vanquish\", \"estimator\",\n    \"baboon\", \"letdown\", \"rasping\", \"hula\", \"devalue\", \"mauve\", \"eject\", \"rerun\", \"rephrase\", \"porcupine\", \"reexamine\", \"ember\", \"rummage\", \"woozy\", \"cytoplasm\", \"facsimile\",\n    \"tabasco\", \"jovial\", \"ferment\", \"wooing\", \"pogo\", \"padlock\", \"gosling\", \"swerve\", \"gleeful\", \"jaunt\", \"unadorned\", \"bungee\", \"undivided\", \"armrest\", \"marmalade\", \"gizmo\",\n    \"lisp\", \"slinky\", \"plexiglas\", \"sinuous\", \"vixen\", \"hypertext\", \"krypton\", \"aqueduct\", \"kerchief\", \"mobster\", \"joyfully\", \"emcee\", \"aeration\", \"whacking\", \"armadillo\", \"reentry\",\n    \"boozy\", \"excavate\", \"ripening\", \"onshore\", \"bobcat\", \"unelected\", \"yapping\", \"pawing\", \"poncho\", \"siamese\", \"albatross\", \"antsy\", \"chitchat\", \"seltzer\", \"muppet\", \"gloating\",\n    \"hazelnut\", \"pliable\", \"onyx\", \"lather\", \"capricorn\", \"uncut\", \"aorta\", \"nastiness\", \"gander\", \"eggnog\", \"excretion\", \"exonerate\", \"cesspool\", \"purveyor\", \"mayflower\", \"busboy\",\n    \"mulled\", \"figment\", \"girdle\", \"lethargic\", \"encrypt\", \"evict\", \"ergonomic\", \"undying\", \"culminate\", \"wriggle\", \"blemish\", \"walrus\", \"tidings\", \"germinate\", \"trowel\", \"suds\",\n    \"ageless\", \"tarnish\", \"dejected\", \"twerp\", \"antler\", \"unguarded\", \"coleslaw\", \"synapse\", \"mongrel\", \"thwarting\", \"aground\", \"scuttle\", \"halogen\", \"ovary\", \"borax\", \"gnarly\",\n    \"snub\", \"nacho\", \"gout\", \"papyrus\", \"iguana\", \"grope\", \"nullify\", \"kilt\", \"vindicate\", \"galvanize\", \"alabaster\", \"panning\", \"wasabi\", \"rework\", \"trombone\", \"tinsel\",\n    \"treble\", \"prancing\", \"exes\", \"hanky\", \"blimp\", \"knickers\", \"thieving\", \"defraud\", \"briar\", \"trident\", \"upwind\", \"slouching\", \"koala\", \"tamper\", \"nuptials\", \"engulf\",\n    \"garter\", \"barman\", \"glisten\", \"frugality\", \"earmark\", \"blubber\", \"ahoy\", \"latrine\", \"puma\", \"sepia\", \"unimpeded\", \"drapery\", \"vivacious\", \"gawk\", \"banshee\", \"nutcase\",\n    \"gruffly\", \"ribcage\", \"rekindle\", \"cesarean\", \"unrivaled\", \"jawline\", \"vaseline\", \"quench\", \"tusk\", \"snazzy\", \"sappy\", \"pedometer\", \"unbounded\", \"tapioca\", \"bobsled\", \"cabana\",\n    \"tubby\", \"sapling\", \"gecko\", \"flaccid\", \"unbuckled\", \"lumping\", \"humpback\", \"haiku\", \"jurist\", \"lasso\", \"urologist\", \"sputter\", \"tinfoil\", \"gutless\", \"encircle\", \"boxcar\",\n    \"impish\", \"kooky\", \"frolic\", \"sasquatch\", \"geranium\", \"flyover\", \"schnapps\", \"cackle\", \"unaltered\", \"prude\", \"falsify\", \"matador\", \"octagon\", \"unpeeled\", \"armful\", \"reroute\",\n    \"unfilled\", \"zesty\", \"payphone\", \"pucker\", \"unzip\", \"litigate\", \"eggshell\", \"hunchback\", \"duvet\", \"powwow\", \"spry\", \"barstool\", \"flail\", \"linseed\", \"legume\", \"mumps\",\n    \"slurp\", \"marshy\", \"dubiously\", \"siesta\", \"unedited\", \"dastardly\", \"ogle\", \"aflame\", \"wrangle\", \"osmosis\", \"dupe\", \"reissue\", \"vagabond\", \"carmaker\", \"flogging\", \"roping\",\n    \"ardently\", \"gnat\", \"oink\", \"sardine\", \"scurvy\", \"sulk\", \"pumice\", \"ellipse\", \"tiptoeing\", \"jiffy\", \"spiffy\", \"spud\", \"tassel\", \"petunia\", \"ashy\", \"tamer\",\n    \"spilt\", \"legwork\", \"getup\", \"poach\", \"uncivil\", \"anaconda\", \"exfoliate\", \"pauper\", \"ramrod\", \"useable\", \"doozy\", \"cahoots\", \"oboe\", \"leotard\", \"boogeyman\", \"yippee\",\n    \"bonsai\", \"chafe\", \"munchkin\", \"varmint\", \"ragweed\", \"sulphate\", \"earful\", \"unfeeling\", \"tamale\", \"hyphen\", \"scuff\", \"egotism\", \"outtakes\", \"abacus\", \"tarantula\", \"smelting\",\n    \"elope\", \"urethane\", \"dayroom\", \"igloo\", \"gristle\", \"caboose\", \"opossum\", \"barcode\", \"amniotic\", \"datebook\", \"clavicle\", \"bazooka\", \"unturned\", \"dweeb\", \"scone\", \"tiling\",\n    \"untying\", \"ritzy\", \"amicably\", \"onlooker\", \"legroom\", \"chomp\", \"spyglass\", \"unroll\", \"levitate\", \"thimble\", \"poser\", \"badness\", \"demystify\", \"pummel\", \"cabdriver\", \"henna\",\n    \"gerbil\", \"senorita\", \"udder\", \"zookeeper\", \"laxative\", \"gigolo\", \"gating\", \"kebab\", \"joyride\", \"eardrum\", \"swaddling\", \"zigzagged\", \"ravage\", \"cussed\", \"talcum\", \"sinless\",\n    \"trodden\", \"absinthe\", \"camisole\", \"duller\", \"daffodil\", \"pectin\", \"ream\", \"reorder\", \"tadpole\", \"omnivore\", \"disinfect\", \"rimless\", \"utensil\", \"stowing\", \"catlike\", \"bodacious\",\n    \"skedaddle\", \"nuzzle\", \"acetone\", \"egging\", \"cubbyhole\", \"lapdog\", \"boondocks\", \"malformed\", \"busload\", \"penknife\", \"shucking\", \"egomaniac\", \"cobweb\", \"anagram\", \"smolder\", \"unexpired\",\n    \"taekwondo\", \"fritter\", \"enrage\", \"runaround\", \"abridge\", \"exhume\", \"reattach\", \"scabby\", \"botch\", \"gargle\", \"lushly\", \"enunciate\", \"plod\", \"doily\", \"hexagon\", \"punisher\",\n    \"tyke\", \"armband\", \"calzone\", \"unashamed\", \"tinderbox\", \"rehydrate\", \"obtrusive\", \"bauble\", \"sixfold\", \"crabbing\", \"moocher\", \"clobber\", \"unbaked\", \"rehire\", \"sudoku\", \"moodiness\",\n    \"dicing\", \"reemerge\", \"gumball\", \"pulverize\", \"hatless\", \"endnote\", \"yodel\", \"cymbal\", \"bagpipe\", \"splotchy\", \"nanometer\", \"mollusk\", \"harpist\", \"mooing\", \"jaywalker\", \"astound\",\n    \"ocelot\", \"hubcap\", \"frill\", \"gonad\", \"rubdown\", \"tigress\", \"denatured\", \"pegboard\", \"dehydrate\", \"gizzard\", \"waggle\", \"kinfolk\", \"unmixed\", \"ensnare\", \"buccaneer\", \"amaretto\",\n    \"felttip\", \"jujitsu\", \"amuck\", \"bunion\", \"skydiver\", \"coeditor\", \"amperage\", \"deface\", \"riptide\", \"hatbox\", \"trekker\", \"jaybird\", \"swizzle\", \"drench\", \"jawed\", \"ditzy\",\n    \"illicitly\", \"preoccupy\", \"vagrancy\", \"carwash\", \"earache\", \"subfloor\", \"armless\", \"ransack\", \"curdle\", \"cozily\", \"unaudited\", \"unblock\", \"catsup\", \"unframed\", \"wielder\", \"dallying\",\n    \"catnap\", \"cosponsor\", \"boxlike\", \"aflutter\", \"wackiness\", \"unviable\", \"husked\", \"babied\", \"eclair\", \"guzzler\", \"giblet\", \"kabob\", \"unhinge\", \"upchuck\", \"coagulant\", \"bagful\",\n    \"batboy\", \"flypaper\", \"gumdrop\", \"disfigure\", \"entwine\", \"oozy\", \"unarmored\", \"cufflink\", \"slobbery\", \"reoccupy\", \"twiddle\", \"ungraded\", \"viselike\", \"carless\", \"stegosaur\", \"coyness\",\n    \"uncross\", \"earwig\", \"ripcord\", \"blabber\", \"retype\", \"unaired\", \"aneurism\", \"antonym\", \"unsnap\", \"eggbeater\", \"untwist\", \"cosigner\", \"racoon\", \"veneering\", \"bobtail\", \"gyration\",\n    \"reanalyze\", \"reabsorb\", \"recharger\", \"unpicked\", \"unsworn\", \"mocker\", \"fernlike\", \"pyromania\", \"opulently\", \"outmost\", \"penpal\", \"flyable\", \"prorate\", \"eatable\", \"skittle\", \"armhole\",\n    \"unvalued\", \"haggler\", \"vexingly\", \"unglue\", \"defog\", \"ecard\", \"dawdler\", \"delouse\", \"disjoin\", \"engorge\", \"finless\", \"lividly\", \"nutlike\", \"reawake\", \"tinwork\", \"unvocal\",\n    \"zipfile\", \"anointer\", \"atonable\", \"cogwheel\", \"undusted\", \"unflawed\", \"unsliced\", \"unsmooth\", \"unthawed\", \"copartner\", \"hemstitch\", \"jeeringly\", \"joylessly\", \"luridness\", \"penholder\", \"subheader\",\n    \"their\", \"would\", \"think\", \"which\", \"after\", \"years\", \"really\", \"should\", \"through\", \"something\", \"being\", \"president\", \"students\", \"while\", \"things\", \"every\",\n    \"house\", \"might\", \"against\", \"children\", \"states\", \"women\", \"money\", \"without\", \"different\", \"though\", \"study\", \"however\", \"actually\", \"research\", \"white\", \"called\",\n    \"looked\", \"national\", \"education\", \"important\", \"times\", \"asked\", \"wanted\", \"united\", \"trying\", \"political\", \"looking\", \"least\", \"having\", \"coming\", \"saying\", \"talking\",\n    \"using\", \"support\", \"within\", \"including\", \"whether\", \"others\", \"community\", \"probably\", \"several\", \"working\", \"makes\", \"happened\", \"heard\", \"along\", \"himself\", \"thanks\",\n    \"center\", \"turned\", \"america\", \"hands\", \"given\", \"started\", \"court\", \"means\", \"according\", \"friends\", \"months\", \"minutes\", \"teachers\", \"former\", \"based\", \"studies\",\n    \"words\", \"seems\", \"comes\", \"results\", \"college\", \"economic\", \"members\", \"looks\", \"parents\", \"likely\", \"instead\", \"policy\", \"groups\", \"problems\", \"hours\", \"began\",\n    \"needs\", \"county\", \"sometimes\", \"military\", \"issues\", \"living\", \"learning\", \"listen\", \"thinking\", \"seemed\", \"perhaps\", \"clear\", \"known\", \"taken\", \"analysis\", \"questions\",\n    \"finally\", \"reading\", \"quite\", \"yourself\", \"clinton\", \"happen\", \"class\", \"exactly\", \"higher\", \"simply\", \"society\", \"everybody\", \"wants\", \"recent\", \"following\", \"companies\",\n    \"programs\", \"officials\", \"campaign\", \"services\", \"personal\", \"director\", \"rights\", \"lives\", \"schools\", \"games\", \"running\", \"article\", \"needed\", \"became\", \"break\", \"building\",\n    \"whatever\", \"itself\", \"knowledge\", \"americans\", \"romney\", \"weeks\", \"third\", \"further\", \"effect\", \"trump\", \"david\", \"reported\", \"whose\", \"longer\", \"points\", \"somebody\",\n    \"worked\", \"single\", \"terms\", \"works\", \"certainly\", \"teacher\", \"takes\", \"chance\", \"value\", \"nearly\", \"ground\", \"press\", \"behavior\", \"continue\", \"areas\", \"changes\",\n    \"attention\", \"countries\", \"cases\", \"knows\", \"comments\", \"stood\", \"players\", \"medical\", \"situation\", \"writing\", \"difficult\", \"approach\", \"george\", \"election\", \"create\", \"levels\",\n    \"books\", \"patients\", \"natural\", \"involved\", \"decision\", \"shows\", \"recently\", \"potential\", \"financial\", \"playing\", \"billion\", \"specific\", \"beautiful\", \"feeling\", \"moved\", \"posted\",\n    \"training\", \"spent\", \"michael\", \"wrote\", \"treatment\", \"teaching\", \"growth\", \"systems\", \"texas\", \"shall\", \"cultural\", \"supposed\", \"skills\", \"usually\", \"foreign\", \"quickly\",\n    \"waiting\", \"earlier\", \"china\", \"democrats\", \"included\", \"related\", \"lower\", \"therefore\", \"despite\", \"workers\", \"provided\", \"district\", \"serious\", \"walked\", \"played\", \"addition\",\n    \"resources\", \"greater\", \"central\", \"miles\", \"decided\", \"meeting\", \"watching\", \"global\", \"positive\", \"factors\", \"career\", \"moving\", \"content\", \"written\", \"expected\", \"created\",\n    \"nobody\", \"religious\", \"sunday\", \"beginning\", \"telling\", \"stories\", \"families\", \"pulled\", \"leaders\", \"changed\", \"increased\", \"clearly\", \"computer\", \"costs\", \"justice\", \"received\",\n    \"events\", \"senate\", \"committee\", \"activity\", \"seeing\", \"necessary\", \"required\", \"added\", \"chicago\", \"suddenly\", \"values\", \"numbers\", \"growing\", \"movement\", \"standing\", \"learned\",\n    \"plans\", \"atlanta\", \"comment\", \"november\", \"developed\", \"calls\", \"james\", \"opened\", \"happens\", \"married\", \"indeed\", \"academic\", \"ideas\", \"effective\", \"politics\", \"event\",\n    \"internet\", \"except\", \"standard\", \"journal\", \"store\", \"forces\", \"passed\", \"majority\", \"efforts\", \"talked\", \"allowed\", \"player\", \"english\", \"league\", \"robert\", \"obviously\",\n    \"sounds\", \"rules\", \"critical\", \"older\", \"rates\", \"character\", \"products\", \"meant\", \"status\", \"reality\", \"species\", \"helped\", \"showed\", \"modern\", \"places\", \"complete\",\n    \"built\", \"reports\", \"starting\", \"followed\", \"straight\", \"loved\", \"reasons\", \"reached\", \"insurance\", \"pressure\", \"limited\", \"executive\", \"compared\", \"influence\", \"leaving\", \"spending\",\n    \"lived\", \"weight\", \"respect\", \"described\", \"agency\", \"western\", \"statement\", \"asking\", \"benefits\", \"previous\", \"governor\", \"francisco\", \"context\", \"worse\", \"generally\", \"smith\",\n    \"watched\", \"continued\", \"designed\", \"dollars\", \"sales\", \"standards\", \"sports\", \"lines\", \"holding\", \"secretary\", \"attorney\", \"closed\", \"published\", \"reach\", \"turns\", \"florida\",\n    \"teams\", \"product\", \"parts\", \"imagine\", \"gives\", \"speech\", \"europe\", \"council\", \"calling\", \"professor\", \"thousands\", \"measures\", \"named\", \"voters\", \"raised\", \"provides\",\n    \"safety\", \"officer\", \"interview\", \"structure\", \"touch\", \"evening\", \"overall\", \"directly\", \"colorado\", \"slowly\", \"items\", \"larger\", \"basis\", \"employees\", \"models\", \"football\",\n    \"denver\", \"serve\", \"complex\", \"voiceover\", \"fingers\", \"scores\", \"windows\", \"tough\", \"findings\", \"practices\", \"multiple\", \"includes\", \"taxes\", \"biggest\", \"challenge\", \"leading\",\n    \"houston\", \"georgia\", \"basically\", \"breath\", \"manager\", \"images\", \"official\", \"walking\", \"meaning\", \"prices\", \"methods\", \"policies\", \"trees\", \"smiled\", \"argument\", \"nodded\",\n    \"contact\", \"highly\", \"happening\", \"steps\", \"johnson\", \"willing\", \"features\", \"classroom\", \"station\", \"putting\", \"editor\", \"powerful\", \"french\", \"speaking\", \"sources\", \"realize\",\n    \"function\", \"identity\", \"doubt\", \"british\", \"nations\", \"spoke\", \"finding\", \"concerned\", \"types\", \"wonderful\", \"offered\", \"plant\", \"wearing\", \"southern\", \"currently\", \"stars\",\n    \"shook\", \"authority\", \"records\", \"corner\", \"appears\", \"drugs\", \"decisions\", \"forms\", \"mostly\", \"wednesday\", \"candidate\", \"peter\", \"returned\", \"noted\", \"christmas\", \"presented\",\n    \"decades\", \"hearing\", \"folks\", \"somewhere\", \"concern\", \"presence\", \"religion\", \"factor\", \"determine\", \"materials\", \"appeared\", \"planning\", \"yards\", \"totally\", \"sidebar\", \"relations\",\n    \"variables\", \"climate\", \"crisis\", \"cells\", \"bought\", \"served\", \"becomes\", \"otherwise\", \"homes\", \"notes\", \"agreement\", \"interests\", \"goals\", \"richard\", \"latest\", \"suggests\",\n    \"leaves\", \"plants\", \"promise\", \"claims\", \"liked\", \"thomas\", \"block\", \"audience\", \"apartment\", \"offers\", \"weapons\", \"clothes\", \"fighting\", \"thinks\", \"citizens\", \"angeles\",\n    \"picked\", \"residents\", \"actions\", \"chris\", \"variety\", \"released\", \"larry\", \"direction\", \"software\", \"regarding\", \"website\", \"realized\", \"officers\", \"native\", \"mission\", \"mental\",\n    \"concerns\", \"institute\", \"largest\", \"forced\", \"finished\", \"active\", \"daddy\", \"driving\", \"details\", \"seriously\", \"names\", \"animals\", \"missing\", \"mentioned\", \"sites\", \"projects\",\n    \"keeping\", \"closer\", \"concept\", \"produced\", \"yours\", \"users\", \"baseball\", \"instance\", \"attempt\", \"feels\", \"fully\", \"setting\", \"troops\", \"opening\", \"covered\", \"mexico\",\n    \"customers\", \"subjects\", \"parties\", \"turning\", \"prior\", \"beside\", \"conflict\", \"continues\", \"agreed\", \"towards\", \"responses\", \"condition\", \"dropped\", \"cities\", \"suggested\", \"vision\",\n    \"jones\", \"facebook\", \"progress\", \"healthy\", \"frank\", \"joining\", \"indian\", \"millions\", \"believed\", \"creating\", \"pictures\", \"accept\", \"hundreds\", \"tells\", \"requires\", \"surprised\",\n    \"knowing\", \"funds\", \"virginia\", \"strange\", \"dangerous\", \"william\", \"caused\", \"threat\", \"broke\", \"russia\", \"chairman\", \"conducted\", \"steve\", \"announced\", \"providing\", \"easier\",\n    \"somehow\", \"mayor\", \"observed\", \"arrived\", \"tests\", \"slightly\", \"thoughts\", \"helping\", \"charles\", \"becoming\", \"handle\", \"grand\", \"readers\", \"indicated\", \"laughed\", \"contract\",\n    \"silence\", \"division\", \"stress\", \"lights\", \"sides\", \"plays\", \"doctors\", \"smaller\", \"pieces\", \"williams\", \"starts\", \"elements\", \"experts\", \"classes\", \"london\", \"minister\",\n    \"changing\", \"worried\", \"writer\", \"walls\", \"showing\", \"scott\", \"separate\", \"focused\", \"extent\", \"movies\", \"views\", \"strength\", \"facts\", \"mmhmm\", \"shape\", \"jackson\",\n    \"donald\", \"seconds\", \"defined\", \"placed\", \"proposed\", \"adults\", \"grade\", \"possibly\", \"japan\", \"score\", \"patterns\", \"noticed\", \"attacks\", \"fourth\", \"stared\", \"contrast\",\n    \"losing\", \"younger\", \"martin\", \"advantage\", \"charges\", \"streets\", \"shared\", \"taught\", \"count\", \"internal\", \"winning\", \"allows\", \"partner\", \"corporate\", \"beneath\", \"behaviors\",\n    \"scared\", \"terrible\", \"listening\", \"smell\", \"processes\", \"prepared\", \"options\", \"regional\", \"tools\", \"thousand\", \"authors\", \"missed\", \"honor\", \"signed\", \"lawyer\", \"harry\",\n    \"anywhere\", \"outcomes\", \"familiar\", \"forever\", \"emotional\", \"plane\", \"kinds\", \"greatest\", \"carolina\", \"soldiers\", \"helps\", \"carried\", \"testing\", \"ourselves\", \"explained\", \"pointed\",\n    \"affect\", \"largely\", \"stepped\", \"driver\", \"prove\", \"pushed\", \"housing\", \"heads\", \"applied\", \"apply\", \"serving\", \"marketing\", \"perceived\", \"painting\", \"relative\", \"essential\",\n    \"boston\", \"markets\", \"artists\", \"extremely\", \"joined\", \"shoes\", \"examples\", \"banks\", \"stands\", \"coverage\", \"medicine\", \"equipment\", \"thick\", \"russian\", \"figures\", \"canada\",\n    \"favor\", \"storm\", \"shoulders\", \"teeth\", \"funding\", \"letters\", \"expensive\", \"northern\", \"signs\", \"pages\", \"photos\", \"victims\", \"fellow\", \"clinical\", \"existing\", \"faces\",\n    \"votes\", \"wondered\", \"aspects\", \"feelings\", \"recognize\", \"entirely\", \"begins\", \"charlie\", \"maintain\", \"selling\", \"relevant\", \"highest\", \"careful\", \"eastern\", \"inches\", \"matters\",\n    \"england\", \"typically\", \"capacity\", \"narrative\", \"pounds\", \"agencies\", \"managed\", \"henry\", \"germany\", \"tradition\", \"emergency\", \"prime\", \"location\", \"represent\", \"doors\", \"longterm\",\n    \"waited\", \"remained\", \"honest\", \"operation\", \"supported\", \"buying\", \"selected\", \"tears\", \"supra\", \"bedroom\", \"objects\", \"stated\", \"believes\", \"bodies\", \"massive\", \"humans\",\n    \"elected\", \"revealed\", \"occurred\", \"houses\", \"michigan\", \"attitudes\", \"persons\", \"guilty\", \"creative\", \"stores\", \"besides\", \"moreover\", \"articles\", \"discuss\", \"respond\", \"educators\",\n    \"excellent\", \"kidding\", \"posts\", \"explains\", \"hoping\", \"unlike\", \"bringing\", \"moments\", \"newspaper\", \"france\", \"reduced\", \"technical\", \"staring\", \"pocket\", \"tight\", \"davis\",\n    \"exposure\", \"completed\", \"grown\", \"manner\", \"adding\", \"owners\", \"committed\", \"opposite\", \"talks\", \"reader\", \"keeps\", \"assistant\", \"belief\", \"suppose\", \"performed\", \"discussed\",\n    \"birthday\", \"remaining\", \"meanwhile\", \"leaned\", \"planned\", \"hardly\", \"brothers\", \"charged\", \"forth\", \"treated\", \"intended\", \"answers\", \"analyses\", \"singing\", \"investors\", \"iraqi\",\n    \"reporting\", \"voted\", \"consumer\", \"anonymous\", \"consumers\", \"leads\", \"revenue\", \"india\", \"golden\", \"drinking\", \"likes\", \"causes\", \"existence\", \"thats\", \"kennedy\", \"stayed\",\n    \"merely\", \"fields\", \"passing\", \"arizona\", \"elections\", \"bathroom\", \"hollywood\", \"accepted\", \"hillary\", \"nearby\", \"creation\", \"clients\", \"choices\", \"expressed\", \"throat\", \"songs\",\n    \"louis\", \"fired\", \"dozen\", \"combined\", \"estimated\", \"lawyers\", \"dealing\", \"somewhat\", \"classic\", \"moves\", \"positions\", \"courses\", \"seeking\", \"sarah\", \"framework\", \"cards\",\n    \"primarily\", \"documents\", \"reporter\", \"trail\", \"dressed\", \"laughing\", \"beliefs\", \"falling\", \"saved\", \"victim\", \"medium\", \"proper\", \"acting\", \"courts\", \"critics\", \"regime\",\n    \"woods\", \"kevin\", \"saddam\", \"increases\", \"fewer\", \"pleasure\", \"request\", \"holds\", \"gentlemen\", \"detroit\", \"entered\", \"removed\", \"sharing\", \"whereas\", \"surgery\", \"glanced\",\n    \"degrees\", \"bottle\", \"musical\", \"writers\", \"headed\", \"accounts\", \"offering\", \"buildings\", \"advanced\", \"obtained\", \"downtown\", \"paint\", \"donaldson\", \"argued\", \"miller\", \"devices\",\n    \"democrat\", \"dreams\", \"powers\", \"studio\", \"korea\", \"selection\", \"wondering\", \"breaking\", \"hanging\", \"parking\", \"sleeping\", \"broad\", \"brian\", \"regard\", \"allowing\", \"answered\",\n    \"perform\", \"excited\", \"brings\", \"spiritual\", \"walks\", \"principle\", \"notion\", \"literally\", \"measured\", \"examined\", \"reagan\", \"birds\", \"agents\", \"operating\", \"sector\", \"flowers\",\n    \"wilson\", \"criteria\", \"dying\", \"films\", \"knees\", \"hopes\", \"diversity\", \"cooking\", \"threw\", \"opposed\", \"phase\", \"samples\", \"purposes\", \"andor\", \"carrying\", \"papers\",\n    \"sharp\", \"offense\", \"improved\", \"paris\", \"loves\", \"variable\", \"examine\", \"foods\", \"colleges\", \"perfectly\", \"practical\", \"centers\", \"jordan\", \"accused\", \"polls\", \"located\",\n    \"formal\", \"figured\", \"bills\", \"limits\", \"external\", \"expert\", \"affairs\", \"sought\", \"billy\", \"similarly\", \"award\", \"barbara\", \"finds\", \"touched\", \"rooms\", \"widely\",\n    \"lifted\", \"awareness\", \"symptoms\", \"colors\", \"graduate\", \"offensive\", \"jerry\", \"struck\", \"maam\", \"ordered\", \"agenda\", \"shopping\", \"susan\", \"fairly\", \"whenever\", \"relation\",\n    \"units\", \"partners\", \"guest\", \"concepts\", \"promised\", \"studied\", \"secondary\", \"collected\", \"arrested\", \"queen\", \"estimates\", \"appeal\", \"campus\", \"breakfast\", \"closely\", \"organized\",\n    \"narrator\", \"roles\", \"survive\", \"daniel\", \"roberts\", \"extreme\", \"whispered\", \"austin\", \"falls\", \"links\", \"constant\", \"chose\", \"strongly\", \"suffering\", \"seasons\", \"nervous\",\n    \"defensive\", \"cutting\", \"childhood\", \"drawn\", \"tickets\", \"rolled\", \"follows\", \"replied\", \"firms\", \"retired\", \"extended\", \"illinois\", \"schedule\", \"detective\", \"smiling\", \"tested\",\n    \"surely\", \"protein\", \"command\", \"severe\", \"kelly\", \"establish\", \"violent\", \"procedure\", \"spanish\", \"criticism\", \"demands\", \"formula\", \"filed\", \"customer\", \"raising\", \"writes\",\n    \"dollar\", \"formed\", \"immediate\", \"pants\", \"meetings\", \"earned\", \"package\", \"athletes\", \"shots\", \"therapy\", \"claimed\", \"attempts\", \"heaven\", \"scholars\", \"sounded\", \"drawing\",\n    \"pulling\", \"evolution\", \"microsoft\", \"diverse\", \"letting\", \"refused\", \"engaged\", \"goods\", \"recovery\", \"warning\", \"pushing\", \"taylor\", \"locked\", \"chemical\", \"reduction\", \"andrew\",\n    \"pulls\", \"coaches\", \"reporters\", \"loose\", \"principal\", \"academy\", \"boyfriend\", \"elsewhere\", \"forgot\", \"recorded\", \"farmers\", \"neighbors\", \"hired\", \"joseph\", \"scored\", \"arguments\",\n    \"absence\", \"mountains\", \"howard\", \"fishing\", \"regions\", \"islamic\", \"settings\", \"connected\", \"begun\", \"facility\", \"barack\", \"sending\", \"tasks\", \"proposal\", \"judgment\", \"faced\",\n    \"hussein\", \"males\", \"contains\", \"equally\", \"laughter\", \"videotape\", \"networks\", \"lessons\", \"literary\", \"risks\", \"miami\", \"functions\", \"counter\", \"grabbed\", \"accurate\", \"carter\",\n    \"valuable\", \"adopted\", \"fixed\", \"owned\", \"lovely\", \"exists\", \"orders\", \"objective\", \"ideal\", \"rarely\", \"elizabeth\", \"opens\", \"chopped\", \"visitors\", \"platform\", \"memories\",\n    \"staying\", \"enjoyed\", \"approved\", \"serves\", \"settled\", \"incident\", \"texts\", \"solutions\", \"speaker\", \"shares\", \"voices\", \"resulting\", \"explore\", \"quietly\", \"edition\", \"mothers\",\n    \"returns\", \"linked\", \"depends\", \"pressed\", \"issued\", \"chain\", \"secure\", \"computers\", \"literacy\", \"launch\", \"highway\", \"virtually\", \"assess\", \"enormous\", \"medicare\", \"universal\",\n    \"directed\", \"frequency\", \"convinced\", \"fallen\", \"danny\", \"females\", \"discourse\", \"genetic\", \"employee\", \"nights\", \"trained\", \"historic\", \"opinions\", \"helpful\", \"viewed\", \"scheduled\",\n    \"anderson\", \"minds\", \"feedback\", \"stocks\", \"disaster\", \"dramatic\", \"component\", \"personnel\", \"reviews\", \"visible\", \"deficit\", \"involving\", \"strategic\", \"channel\", \"commander\", \"receiving\",\n    \"informed\", \"waves\", \"syria\", \"calories\", \"referred\", \"telephone\", \"wooden\", \"nancy\", \"glasses\", \"stops\", \"depending\", \"inspired\", \"guests\", \"bears\", \"destroyed\", \"versus\",\n    \"addressed\", \"defend\", \"suffered\", \"prince\", \"stronger\", \"vietnam\", \"calif\", \"harris\", \"exposed\", \"initially\", \"roger\", \"clark\", \"hills\", \"dallas\", \"repeated\", \"detailed\",\n    \"indicates\", \"bobby\", \"signal\", \"hopefully\", \"britain\", \"bones\", \"checked\", \"technique\", \"republic\", \"roughly\", \"hoped\", \"burning\", \"dependent\", \"seats\", \"cleveland\", \"marry\",\n    \"employed\", \"crossed\", \"contain\", \"files\", \"omitted\", \"deserve\", \"invited\", \"gently\", \"rolling\", \"jason\", \"messages\", \"honestly\", \"simon\", \"loans\", \"cultures\", \"socalled\",\n    \"vehicles\", \"breathing\", \"minnesota\", \"lewis\", \"listed\", \"apparent\", \"passage\", \"survival\", \"seattle\", \"forgotten\", \"baltimore\", \"wanting\", \"describes\", \"driven\", \"hunting\", \"concrete\",\n    \"sawyer\", \"replaced\", \"compare\", \"tries\", \"assets\", \"expansion\", \"involves\", \"reserve\", \"allen\", \"handed\", \"joins\", \"managers\", \"smiles\", \"properly\", \"kansas\", \"declined\",\n    \"simpson\", \"smoking\", \"fought\", \"organic\", \"finance\", \"proved\", \"launched\", \"italian\", \"discovery\", \"plain\", \"button\", \"heavily\", \"islam\", \"confirmed\", \"horrible\", \"divided\",\n    \"resulted\", \"laughs\", \"sandy\", \"bureau\", \"worker\", \"imagined\", \"shrugged\", \"patrick\", \"maryland\", \"storage\", \"delivered\", \"responded\", \"porch\", \"passion\", \"achieved\", \"normally\",\n    \"paused\", \"teaspoon\", \"slipped\", \"nowhere\", \"privacy\", \"screaming\", \"controls\", \"coalition\", \"sciences\", \"warming\", \"dancing\", \"permanent\", \"gathered\", \"intense\", \"household\", \"springs\",\n    \"sensitive\", \"heading\", \"bruce\", \"sighed\", \"scenes\", \"approval\", \"movements\", \"hurricane\", \"exciting\", \"granted\", \"flickr\", \"frankly\", \"chances\", \"lincoln\", \"painted\", \"emerged\",\n    \"precisely\", \"stretch\", \"veterans\", \"cited\", \"assumed\", \"ratio\", \"wrapped\", \"extensive\", \"closing\", \"passes\", \"tommy\", \"unlikely\", \"leather\", \"brinkley\", \"testimony\", \"declared\",\n    \"occurs\", \"machines\", \"returning\", \"egypt\", \"sisters\", \"amounts\", \"indians\", \"naturally\", \"chocolate\", \"denied\", \"visited\", \"columbia\", \"flesh\", \"parks\", \"rachel\", \"trends\",\n    \"paintings\", \"judges\", \"deals\", \"regularly\", \"harvard\", \"supports\", \"topics\", \"jumped\", \"economics\", \"distinct\", \"attended\", \"rocks\", \"injuries\", \"marked\", \"horses\", \"spoken\",\n    \"sessions\", \"distant\", \"delivery\", \"trading\", \"concluded\", \"pakistan\", \"stephen\", \"recommend\", \"reducing\", \"bother\", \"confused\", \"dialogue\", \"theories\", \"anthony\", \"studying\", \"muslims\",\n    \"blocks\", \"reaching\", \"hitting\", \"genes\", \"shake\", \"oregon\", \"profile\", \"infection\", \"combat\", \"dozens\", \"mainly\", \"validity\", \"deeper\", \"losses\", \"waters\", \"rapidly\",\n    \"friendly\", \"listened\", \"fifteen\", \"interior\", \"recalls\", \"fifty\", \"reminded\", \"roads\", \"picking\", \"publicly\", \"absolute\", \"forgive\", \"throwing\", \"sweat\", \"analysts\", \"territory\",\n    \"saudi\", \"presents\", \"admitted\", \"burned\", \"hospitals\", \"shouted\", \"moore\", \"actors\", \"angel\", \"generated\", \"rating\", \"moderate\", \"gifted\", \"dominant\", \"exception\", \"saving\",\n    \"tracks\", \"caller\", \"stability\", \"peers\", \"ratings\", \"assembly\", \"nursing\", \"forehead\", \"deaths\", \"shadows\", \"giants\", \"assigned\", \"pointing\", \"empire\", \"johnny\", \"eddie\",\n    \"offices\", \"clouds\", \"chronicle\", \"memorial\", \"thrown\", \"walter\", \"formation\", \"amazon\", \"mommy\", \"hated\", \"roots\", \"founded\", \"dedicated\", \"mistakes\", \"steady\", \"comedy\",\n    \"counsel\", \"emerging\", \"capitol\", \"contained\", \"stations\", \"instant\", \"reflected\", \"associate\", \"cameras\", \"clothing\", \"traveling\", \"stream\", \"confident\", \"branch\", \"periods\", \"estimate\",\n    \"walker\", \"injured\", \"weekly\", \"threats\", \"grades\", \"speaks\", \"inaudible\", \"terry\", \"hiding\", \"newly\", \"ruling\", \"bonds\", \"orleans\", \"diego\", \"districts\", \"drivers\",\n    \"diane\", \"improving\", \"fantastic\", \"wildlife\", \"metro\", \"humanity\", \"protected\", \"routine\", \"shower\", \"oakland\", \"everyday\", \"covering\", \"linda\", \"abandoned\", \"thread\", \"payments\",\n    \"poetry\", \"churches\", \"summary\", \"causing\", \"breathe\", \"physics\", \"gained\", \"vacation\", \"seeds\", \"creates\", \"mount\", \"annie\", \"australia\", \"compete\", \"pleased\", \"videos\",\n    \"covers\", \"capture\", \"worldwide\", \"producer\", \"tables\", \"origin\", \"oklahoma\", \"awards\", \"profits\", \"ignored\", \"furniture\", \"bound\", \"lifetime\", \"ethical\", \"athletic\", \"generate\",\n    \"climbed\", \"sighs\", \"operate\", \"wisconsin\", \"searching\", \"edward\", \"inflation\", \"alice\", \"barry\", \"bucks\", \"acres\", \"supplies\", \"sanctions\", \"variance\", \"attacked\", \"attached\",\n    \"prominent\", \"mortgage\", \"doctrine\", \"reaches\", \"manhattan\", \"italy\", \"cheek\", \"pollution\", \"centuries\", \"jennifer\", \"copyright\", \"broader\", \"breaks\", \"shortly\", \"sections\", \"protest\",\n    \"decent\", \"kerry\", \"entrance\", \"locations\", \"producing\", \"marks\", \"contrary\", \"gains\", \"earnings\", \"commonly\", \"opponents\", \"scenario\", \"predicted\", \"emissions\", \"loading\", \"wings\",\n    \"goodbye\", \"chairs\", \"reply\", \"superior\", \"baker\", \"founder\", \"packed\", \"ministry\", \"remote\", \"alleged\", \"alliance\", \"theatre\", \"baghdad\", \"softly\", \"allies\", \"phones\",\n    \"visiting\", \"boxes\", \"neighbor\", \"telescope\", \"spots\", \"societies\", \"focusing\", \"collapse\", \"adequate\", \"attempted\", \"helen\", \"temple\", \"steal\", \"diagnosis\", \"announcer\", \"doorway\",\n    \"refer\", \"rejected\", \"accuracy\", \"voter\", \"roman\", \"desperate\", \"emotions\", \"consensus\", \"convicted\", \"singer\", \"disney\", \"guidance\", \"argues\", \"contracts\", \"expanded\", \"warned\",\n    \"recession\", \"hallway\", \"loving\", \"hearts\", \"themes\", \"aircraft\", \"factory\", \"karen\", \"lately\", \"stolen\", \"thompson\", \"resident\", \"laura\", \"engineers\", \"derived\", \"kicked\",\n    \"stages\", \"vegas\", \"recording\", \"taiwan\", \"races\", \"grounds\", \"captured\", \"drives\", \"intent\", \"insisted\", \"trials\", \"proven\", \"waved\", \"commerce\", \"beans\", \"alabama\",\n    \"landing\", \"belong\", \"creature\", \"employers\", \"expecting\", \"targets\", \"divine\", \"happiness\", \"muscles\", \"wished\", \"errors\", \"romantic\", \"missouri\", \"resort\", \"monthly\", \"preferred\",\n    \"format\", \"daughters\", \"variation\", \"conflicts\", \"extension\", \"greek\", \"posting\", \"greatly\", \"wallace\", \"scary\", \"managing\", \"scales\", \"analyzed\", \"pregnancy\", \"ships\", \"peoples\",\n    \"bloody\", \"aimed\", \"wealthy\", \"shore\", \"salary\", \"thereby\", \"pursue\", \"unions\", \"mechanism\", \"refers\", \"kissed\", \"integrity\", \"lists\", \"partly\", \"checking\", \"contest\",\n    \"morgan\", \"designer\", \"youre\", \"lawmakers\", \"preparing\", \"legacy\", \"witnesses\", \"trips\", \"beating\", \"colonel\", \"cheeks\", \"stranger\", \"featured\", \"stare\", \"warren\", \"grateful\",\n    \"temporary\", \"enemies\", \"pretend\", \"civilian\", \"chamber\", \"evident\", \"battery\", \"referring\", \"reflects\", \"assuming\", \"entering\", \"handful\", \"gordon\", \"couples\", \"versions\", \"stewart\",\n    \"drops\", \"scientist\", \"consent\", \"recalled\", \"matthew\", \"painful\", \"cents\", \"moscow\", \"overcome\", \"flour\", \"kinda\", \"defeat\", \"entitled\", \"disorders\", \"courage\", \"priest\",\n    \"encounter\", \"hardware\", \"emily\", \"editorial\", \"advocates\", \"promoting\", \"guarantee\", \"sorts\", \"succeed\", \"tragedy\", \"intensity\", \"isolated\", \"fears\", \"irish\", \"string\", \"database\",\n    \"behalf\", \"stretched\", \"drinks\", \"visits\", \"longtime\", \"tension\", \"sweetie\", \"celebrate\", \"picks\", \"knocked\", \"promises\", \"spain\", \"gifts\", \"arthur\", \"blogs\", \"apologize\",\n    \"korean\", \"acquired\", \"expenses\", \"homeless\", \"reveals\", \"robinson\", \"directors\", \"closet\", \"charlotte\", \"scandal\", \"handsome\", \"chart\", \"belly\", \"lifestyle\", \"kuwait\", \"hunter\",\n    \"cares\", \"gates\", \"viewers\", \"insight\", \"reliable\", \"outta\", \"checks\", \"construct\", \"tomatoes\", \"steven\", \"dishes\", \"lands\", \"liberals\", \"tennessee\", \"guards\", \"purchased\",\n    \"strip\", \"indiana\", \"hispanic\", \"adams\", \"providers\", \"chuck\", \"designs\", \"leaning\", \"shocked\", \"radiation\", \"assessed\", \"perry\", \"volunteer\", \"circuit\", \"summit\", \"airlines\",\n    \"strikes\", \"ownership\", \"register\", \"murdered\", \"potatoes\", \"qualified\", \"watches\", \"ranging\", \"briefly\", \"provision\", \"elderly\", \"counties\", \"biden\", \"gathering\", \"meals\", \"ruled\",\n    \"surveys\", \"swimming\", \"baseline\", \"islands\", \"russell\", \"barriers\", \"dynamics\", \"hampshire\", \"norms\", \"trillion\", \"racism\", \"filling\", \"adoption\", \"reforms\", \"devoted\", \"maria\",\n    \"landed\", \"cleaning\", \"competing\", \"graham\", \"coaching\", \"dennis\", \"walters\", \"buchanan\", \"nurses\", \"survived\", \"shelter\", \"sergeant\", \"rings\", \"employer\", \"nelson\", \"arguing\",\n    \"nixon\", \"artistic\", \"theology\", \"dates\", \"alexander\", \"choosing\", \"abilities\", \"existed\", \"perot\", \"striking\", \"ballot\", \"corps\", \"targeted\", \"sodium\", \"expertise\", \"relatives\",\n    \"wayne\", \"sooner\", \"olympics\", \"seemingly\", \"senators\", \"preserve\", \"princess\", \"rational\", \"stares\", \"snapped\", \"treaty\", \"grandma\", \"towns\", \"followup\", \"parallel\", \"grave\",\n    \"styles\", \"turner\", \"theyre\", \"mitchell\", \"desired\", \"introduce\", \"counts\", \"rhetoric\", \"folded\", \"sacrifice\", \"verbal\", \"commit\", \"margaret\", \"lowest\", \"handling\", \"farther\",\n    \"chuckles\", \"cohen\", \"expense\", \"youtube\", \"brazil\", \"scoring\", \"cleared\", \"jacob\", \"engaging\", \"makeup\", \"sheets\", \"secrets\", \"edwards\", \"bastard\", \"lightly\", \"clubs\",\n    \"confusion\", \"examining\", \"equality\", \"horizon\", \"producers\", \"titles\", \"fathers\", \"powell\", \"correctly\", \"tendency\", \"claiming\", \"stake\", \"michelle\", \"appointed\", \"screening\", \"parental\",\n    \"stones\", \"reverse\", \"playoffs\", \"jonathan\", \"franchise\", \"spaces\", \"raises\", \"traveled\", \"jesse\", \"louisiana\", \"adventure\", \"cokie\", \"classical\", \"wounded\", \"requiring\", \"nonprofit\",\n    \"parker\", \"contexts\", \"copies\", \"stanford\", \"smelled\", \"purple\", \"brooklyn\", \"currency\", \"boards\", \"cambridge\", \"educated\", \"ceremony\", \"reads\", \"precious\", \"aesthetic\", \"modest\",\n    \"campaigns\", \"activists\", \"kentucky\", \"suspected\", \"parked\", \"actively\", \"basement\", \"franklin\", \"branches\", \"wright\", \"julie\", \"attorneys\", \"impressed\", \"ronald\", \"physician\", \"varied\",\n    \"expanding\", \"forty\", \"separated\", \"gardens\", \"carries\", \"edges\", \"debates\", \"lawrence\", \"engineer\", \"unity\", \"wherever\", \"cardinals\", \"satellite\", \"ranks\", \"southwest\", \"refugees\",\n    \"sunlight\", \"wells\", \"playoff\", \"shifted\", \"regarded\", \"creatures\", \"twisted\", \"learners\", \"receiver\", \"touchdown\", \"exclusive\", \"languages\", \"overseas\", \"arabia\", \"stopping\", \"aaron\",\n    \"signals\", \"occasion\", \"reviewed\", \"taliban\", \"marshall\", \"cookies\", \"chips\", \"breasts\", \"intention\", \"broadway\", \"sizes\", \"billions\", \"satisfied\", \"cabinet\", \"adviser\", \"borders\",\n    \"hiring\", \"appeals\", \"collins\", \"jerusalem\", \"default\", \"relate\", \"server\", \"invisible\", \"broncos\", \"immigrant\", \"alongside\", \"douglas\", \"charity\", \"equation\", \"blues\", \"reactions\",\n    \"favorites\", \"linear\", \"dropping\", \"inclusion\", \"bishop\", \"revenues\", \"shade\", \"audio\", \"logical\", \"oldest\", \"poured\", \"demanded\", \"winds\", \"attending\", \"worlds\", \"berkeley\",\n    \"prisoners\", \"healing\", \"wages\", \"theres\", \"counting\", \"taxpayers\", \"shops\", \"complaint\", \"dispute\", \"invasion\", \"resolve\", \"rated\", \"balanced\", \"transport\", \"trucks\", \"libraries\",\n    \"prospect\", \"craig\", \"modified\", \"reasoning\", \"yankees\", \"overnight\", \"feeding\", \"consists\", \"suits\", \"flood\", \"spectrum\", \"northwest\", \"adopt\", \"download\", \"rangers\", \"justify\",\n    \"scream\", \"martha\", \"migration\", \"admission\", \"installed\", \"blond\", \"requests\", \"instances\", \"struggled\", \"focuses\", \"gibson\", \"promising\", \"grabs\", \"displayed\", \"campbell\", \"autonomy\",\n    \"deadly\", \"claire\", \"produces\", \"plates\", \"dimension\", \"crowded\", \"loaded\", \"trace\", \"explicit\", \"morris\", \"tribal\", \"modeling\", \"tossed\", \"cooper\", \"advocate\", \"oclock\",\n    \"portland\", \"evaluated\", \"touching\", \"circles\", \"planes\", \"arrival\", \"nutrition\", \"bradley\", \"remembers\", \"wheels\", \"habits\", \"decreased\", \"motivated\", \"heels\", \"impacts\", \"magnitude\",\n    \"backs\", \"pockets\", \"forcing\", \"maggie\", \"equity\", \"comparing\", \"freshman\", \"suburban\", \"closest\", \"lined\", \"applying\", \"subtle\", \"jefferson\", \"wider\", \"trapped\", \"halfway\",\n    \"nebraska\", \"celebrity\", \"rushed\", \"antonio\", \"pleasant\", \"alaska\", \"featuring\", \"affects\", \"cooked\", \"trauma\", \"servings\", \"proposals\", \"noting\", \"enjoying\", \"seventh\", \"demanding\",\n    \"lobby\", \"justin\", \"array\", \"signing\", \"arkansas\", \"murphy\", \"grinned\", \"likewise\", \"angels\", \"oscar\", \"funded\", \"defending\", \"accessed\", \"julia\", \"portrait\", \"layers\",\n    \"custody\", \"buyers\", \"waist\", \"jackie\", \"lowered\", \"realistic\", \"slavery\", \"rushing\", \"updated\", \"ignorant\", \"passenger\", \"debut\", \"fires\", \"remarks\", \"faded\", \"jennings\",\n    \"makers\", \"observers\", \"katie\", \"forests\", \"duties\", \"tender\", \"identical\", \"camps\", \"talented\", \"hurts\", \"imposed\", \"privilege\", \"printed\", \"corridor\", \"francis\", \"yelled\",\n    \"novels\", \"rivers\", \"hearings\", \"overhead\", \"farms\", \"lover\", \"pitcher\", \"crossing\", \"tends\", \"treasury\", \"goodness\", \"complain\", \"dominated\", \"recipes\", \"meets\", \"disappear\",\n    \"arranged\", \"laden\", \"updates\", \"iranian\", \"electoral\", \"habitat\", \"teens\", \"enhanced\", \"worthy\", \"sanders\", \"instantly\", \"readily\", \"conscious\", \"sliced\", \"peaceful\", \"rolls\",\n    \"rocky\", \"vegetable\", \"protests\", \"shaped\", \"maine\", \"jamie\", \"chill\", \"newshour\", \"courtesy\", \"russians\", \"sidewalk\", \"climbing\", \"dressing\", \"grants\", \"someday\", \"solely\",\n    \"opponent\", \"damaged\", \"strain\", \"nathan\", \"crops\", \"evolved\", \"particles\", \"jokes\", \"websites\", \"libya\", \"violation\", \"profound\", \"cheaper\", \"retrieved\", \"medicaid\", \"tracking\",\n    \"terrific\", \"missile\", \"floating\", \"trunk\", \"virtue\", \"keith\", \"deserves\", \"magazines\", \"crown\", \"removal\", \"donna\", \"shapes\", \"washed\", \"allegedly\", \"nonsense\", \"promotion\",\n    \"worship\", \"secular\", \"heroes\", \"analyze\", \"reminds\", \"stirring\", \"editors\", \"symbolic\", \"boats\", \"wishes\", \"attracted\", \"musicians\", \"spotted\", \"qualities\", \"airline\", \"planets\",\n    \"minimal\", \"paragraph\", \"southeast\", \"handled\", \"paula\", \"fails\", \"delicious\", \"shakes\", \"masters\", \"signature\", \"publisher\", \"charter\", \"audiences\", \"warner\", \"brooks\", \"applies\",\n    \"insights\", \"seniors\", \"bleeding\", \"bottles\", \"ignorance\", \"madison\", \"jeffrey\", \"safer\", \"twins\", \"headlines\", \"generous\", \"fulltime\", \"frowned\", \"annually\", \"toxic\", \"measuring\",\n    \"bands\", \"slaves\", \"socially\", \"wiped\", \"restore\", \"afterward\", \"sustained\", \"aboard\", \"dough\", \"blessed\", \"believing\", \"careers\", \"cheney\", \"homeland\", \"molly\", \"civilians\",\n    \"grows\", \"coastal\", \"suspended\", \"brains\", \"gorbachev\", \"necessity\", \"counted\", \"pressures\", \"scattered\", \"efficacy\", \"victor\", \"expects\", \"iraqis\", \"assessing\", \"traits\", \"ellen\",\n    \"dragged\", \"patience\", \"disabled\", \"occupied\", \"tucked\", \"mason\", \"sometime\", \"rebecca\", \"partial\", \"addresses\", \"legally\", \"hawaii\", \"scent\", \"defendant\", \"survivors\", \"sally\",\n    \"followers\", \"toronto\", \"civic\", \"jessica\", \"transit\", \"automatic\", \"credits\", \"implies\", \"engines\", \"informal\", \"tigers\", \"treating\", \"tended\", \"ireland\", \"acute\", \"freak\",\n    \"sponsored\", \"graph\", \"stanley\", \"enters\", \"admits\", \"inherent\", \"smells\", \"strict\", \"fruits\", \"defining\", \"exploring\", \"composed\", \"nightmare\", \"realm\", \"defeated\", \"placement\",\n    \"nicole\", \"ethnicity\", \"viewing\", \"sampling\", \"channels\", \"blank\", \"freeze\", \"prospects\", \"lebanon\", \"submitted\", \"betty\", \"graphic\", \"speakers\", \"berlin\", \"booth\", \"eleven\",\n    \"monica\", \"firmly\", \"delicate\", \"drain\", \"isolation\", \"entity\", \"quarters\", \"emphasize\", \"cared\", \"origins\", \"flexible\", \"stays\", \"spite\", \"philip\", \"residence\", \"sticks\",\n    \"acted\", \"silently\", \"adapted\", \"graduated\", \"vaccine\", \"slices\", \"quest\", \"corners\", \"gloves\", \"protocol\", \"hotels\", \"adjusted\", \"quoted\", \"spirits\", \"seated\", \"dismissed\",\n    \"steam\", \"innings\", \"tourists\", \"hamilton\", \"episodes\", \"jenny\", \"backup\", \"winners\", \"trailer\", \"sharon\", \"dealt\", \"muttered\", \"workplace\", \"shifts\", \"economies\", \"maker\",\n    \"grams\", \"troubled\", \"rubbed\", \"momentum\", \"eighth\", \"crosstalk\", \"putin\", \"sandwich\", \"diagnosed\", \"poorly\", \"codes\", \"consisted\", \"brands\", \"react\", \"solving\", \"ranged\",\n    \"shouting\", \"rounds\", \"stuffed\", \"courtroom\", \"pursuit\", \"excluded\", \"throws\", \"achieving\", \"petraeus\", \"historian\", \"seeks\", \"bases\", \"attacking\", \"startled\", \"pressing\", \"advocacy\",\n    \"sheep\", \"journals\", \"lightning\", \"recover\", \"sentences\", \"ralph\", \"inning\", \"critique\", \"emails\", \"deadline\", \"strangers\", \"displays\", \"driveway\", \"lakes\", \"morality\", \"rockets\",\n    \"blowing\", \"insist\", \"catching\", \"attribute\", \"yelling\", \"beard\", \"farmer\", \"trusted\", \"phillips\", \"portfolio\", \"arnold\", \"marie\", \"hunters\", \"wives\", \"beloved\", \"answering\",\n    \"flies\", \"brandon\", \"invested\", \"cracked\", \"shorter\", \"halloween\", \"intimate\", \"teenage\", \"counselor\", \"redskins\", \"screamed\", \"twentieth\", \"agrees\", \"beaten\", \"vitamin\", \"namely\",\n    \"damned\", \"mature\", \"trails\", \"heights\", \"advances\", \"blocked\", \"belongs\", \"jumping\", \"gentleman\", \"accepting\", \"souls\", \"enrolled\", \"conclude\", \"meters\", \"onions\", \"requested\",\n    \"projected\", \"incidence\", \"lighting\", \"shifting\", \"provider\", \"stiff\", \"contents\", \"janet\", \"escaped\", \"suite\", \"teaches\", \"tours\", \"median\", \"perceive\", \"diana\", \"openly\",\n    \"exhausted\", \"unclear\", \"permitted\", \"province\", \"patent\", \"meantime\", \"stored\", \"greens\", \"tanks\", \"mueller\", \"anxious\", \"specified\", \"columnist\", \"rises\", \"revealing\", \"designers\",\n    \"mister\", \"exercises\", \"interact\", \"temporal\", \"struggles\", \"northeast\", \"bored\", \"swallowed\", \"benjamin\", \"planted\", \"streak\", \"assured\", \"pitching\", \"calendar\", \"safely\", \"investing\",\n    \"pasta\", \"squad\", \"homework\", \"interface\", \"urged\", \"quotes\", \"grasp\", \"sucks\", \"partially\", \"ignoring\", \"statute\", \"saints\", \"pills\", \"sells\", \"detected\", \"flights\",\n    \"resolved\", \"towel\", \"promoted\", \"wireless\", \"browser\", \"syrian\", \"tyler\", \"stealing\", \"panels\", \"catherine\", \"criterion\", \"mentally\", \"founding\", \"accent\", \"respected\", \"bernie\",\n    \"steep\", \"stance\", \"columbus\", \"missiles\", \"jewelry\", \"draws\", \"suspects\", \"hunger\", \"workout\", \"corrupt\", \"warmth\", \"incidents\", \"placing\", \"eyebrows\", \"teammates\", \"prompted\",\n    \"screams\", \"metaphor\", \"starter\", \"backward\", \"murray\", \"feared\", \"hannah\", \"casey\", \"allstar\", \"mobility\", \"occasions\", \"wendy\", \"inventory\", \"threshold\", \"warrant\", \"deciding\",\n    \"guided\", \"galaxies\", \"financing\", \"writings\", \"shelf\", \"fighters\", \"excessive\", \"tropical\", \"evans\", \"recovered\", \"curiosity\", \"qualify\", \"montana\", \"traded\", \"mining\", \"obesity\",\n    \"screwed\", \"strengths\", \"nevada\", \"belonged\", \"hears\", \"footage\", \"sheer\", \"meanings\", \"blown\", \"bearing\", \"kenny\", \"forrest\", \"proceed\", \"activist\", \"lucas\", \"symbols\",\n    \"carlos\", \"suitable\", \"possess\", \"reserves\", \"highlight\", \"workshop\", \"collar\", \"albert\", \"graduates\", \"chemistry\", \"eagles\", \"infected\", \"reception\", \"vinegar\", \"hansen\", \"vincent\",\n    \"avoided\", \"shuttle\", \"lacking\", \"sectors\", \"lineup\", \"greece\", \"stepping\", \"amanda\", \"shiny\", \"matches\", \"awarded\", \"embassy\", \"incentive\", \"colin\", \"bothered\", \"jurors\",\n    \"voluntary\", \"decides\", \"gasoline\", \"explored\", \"masses\", \"oliver\", \"retain\", \"missions\", \"squeezed\", \"hostile\", \"paradigm\", \"spends\", \"developer\", \"teenagers\", \"spreading\", \"departure\",\n    \"happily\", \"haiti\", \"donations\", \"tales\", \"invented\", \"orchestra\", \"aliens\", \"benghazi\", \"palin\", \"flows\", \"magnetic\", \"holmes\", \"detection\", \"organize\", \"ukraine\", \"removing\",\n    \"barrier\", \"nothin\", \"loyalty\", \"knight\", \"fights\", \"shining\", \"villages\", \"harvey\", \"economist\", \"converted\", \"sticking\", \"relieved\", \"poems\", \"hurting\", \"affecting\", \"hurried\",\n    \"lighter\", \"studios\", \"malcolm\", \"locker\", \"revenge\", \"lungs\", \"tablet\", \"testament\", \"notably\", \"wears\", \"flames\", \"publish\", \"justified\", \"pillow\", \"divorced\", \"relating\",\n    \"export\", \"worries\", \"grandpa\", \"marcus\", \"sharply\", \"hesitated\", \"leonard\", \"entities\", \"polling\", \"desktop\", \"lifting\", \"backyard\", \"inability\", \"norman\", \"authentic\", \"finishing\",\n    \"interpret\", \"companion\", \"depressed\", \"rogers\", \"labeled\", \"contacts\", \"altered\", \"distress\", \"centre\", \"essays\", \"deemed\", \"vessels\", \"pickup\", \"lions\", \"prints\", \"blogging\",\n    \"bosnia\", \"laser\", \"bride\", \"railroad\", \"mercury\", \"relaxed\", \"graphics\", \"testified\", \"dealer\", \"pearl\", \"fleet\", \"regimes\", \"holidays\", \"floors\", \"midst\", \"drawer\",\n    \"banned\", \"addiction\", \"countless\", \"fighter\", \"sends\", \"revised\", \"embedded\", \"liver\", \"vanished\", \"teenager\", \"marines\", \"reserved\", \"rumors\", \"yeltsin\", \"cuban\", \"occurring\",\n    \"zones\", \"transform\", \"stunning\", \"battles\", \"testify\", \"paths\", \"harold\", \"freely\", \"anytime\", \"matching\", \"judgments\", \"collapsed\", \"tolerance\", \"latino\", \"creator\", \"weakness\",\n    \"earning\", \"costly\", \"insists\", \"treasure\", \"marty\", \"carrier\", \"tampa\", \"varieties\", \"partisan\", \"modes\", \"cowboys\", \"boulder\", \"delayed\", \"wallet\", \"pursuing\", \"intensive\",\n    \"pathetic\", \"avoiding\", \"kings\", \"failures\", \"skillet\", \"edited\", \"kicking\", \"regards\", \"reminder\", \"dealers\", \"considers\", \"magical\", \"butler\", \"prayers\", \"starters\", \"polish\",\n    \"proteins\", \"backing\", \"priests\", \"shipping\", \"utterly\", \"rebounds\", \"insects\", \"resume\", \"spinning\", \"glances\", \"faithful\", \"crushed\", \"terrain\", \"quinn\", \"bennett\", \"compound\",\n    \"colorful\", \"digging\", \"accounted\", \"sullivan\", \"laying\", \"imagery\", \"youngest\", \"molecules\", \"skinny\", \"brutal\", \"terrified\", \"resting\", \"favorable\", \"shorts\", \"egyptian\", \"pairs\",\n    \"nails\", \"pilots\", \"posed\", \"intend\", \"desires\", \"tribes\", \"emergence\", \"exports\", \"stating\", \"charming\", \"turkish\", \"wonders\", \"puerto\", \"apples\", \"citing\", \"mounted\",\n    \"applause\", \"governing\", \"slope\", \"advisory\", \"dylan\", \"rebels\", \"fisher\", \"witnessed\", \"forming\", \"socks\", \"strictly\", \"carved\", \"senses\", \"slammed\", \"brushed\", \"initiated\",\n    \"printing\", \"opposing\", \"succeeded\", \"manning\", \"scholar\", \"averaged\", \"tavis\", \"favored\", \"doubled\", \"sliding\", \"tenure\", \"surgeon\", \"mighty\", \"container\", \"lesser\", \"palms\",\n    \"bulls\", \"relevance\", \"destiny\", \"knocking\", \"operated\", \"assure\", \"samsung\", \"dakota\", \"ballots\", \"samuel\", \"angela\", \"loudly\", \"tapes\", \"polite\", \"catches\", \"discount\",\n    \"louder\", \"reverend\", \"novak\", \"bullying\", \"stressed\", \"skilled\", \"colleague\", \"tapped\", \"switched\", \"ripped\", \"rides\", \"sprinkle\", \"rejection\", \"glenn\", \"cleaned\", \"teddy\",\n    \"visitor\", \"chiefs\", \"foolish\", \"scratch\", \"permits\", \"bizarre\", \"tourism\", \"miserable\", \"dreamed\", \"architect\", \"occupy\", \"leans\", \"receives\", \"palestine\", \"blamed\", \"gaining\",\n    \"hometown\", \"formerly\", \"symphony\", \"vanilla\", \"stern\", \"routinely\", \"stark\", \"tensions\", \"derek\", \"youths\", \"bullets\", \"travelers\", \"armstrong\", \"watson\", \"domains\", \"crowds\",\n    \"rodriguez\", \"andrea\", \"jeremy\", \"sympathy\", \"practiced\", \"religions\", \"scrutiny\", \"labels\", \"terribly\", \"cohort\", \"earliest\", \"hosts\", \"ancestors\", \"passive\", \"murders\", \"chasing\",\n    \"batman\", \"prisoner\", \"dusty\", \"medieval\", \"annoying\", \"verse\", \"garcia\", \"bryant\", \"spencer\", \"searched\", \"farming\", \"gasps\", \"cheating\", \"trains\", \"buttons\", \"strongest\",\n    \"observer\", \"matched\", \"weekends\", \"loses\", \"organisms\", \"yields\", \"subsidies\", \"peterson\", \"orlando\", \"abundance\", \"nearest\", \"equipped\", \"suburbs\", \"bridges\", \"wounds\", \"shocking\",\n    \"homer\", \"lasted\", \"wasted\", \"kathy\", \"appealing\", \"patriots\", \"airplane\", \"costume\", \"parenting\", \"richmond\", \"tucson\", \"tumor\", \"surgical\", \"observing\", \"desirable\", \"irony\",\n    \"lawsuits\", \"legendary\", \"theaters\", \"divisions\", \"blessing\", \"skeptical\", \"cheers\", \"warriors\", \"tires\", \"screens\", \"caribbean\", \"adverse\", \"tribune\", \"operator\", \"probe\", \"sentenced\",\n    \"hates\", \"aurora\", \"statue\", \"valued\", \"inmates\", \"mandatory\", \"honored\", \"replacing\", \"imaging\", \"prophet\", \"germans\", \"kissing\", \"jupiter\", \"flashed\", \"enabled\", \"caroline\",\n    \"rewards\", \"realizing\", \"oversight\", \"champagne\", \"dense\", \"workforce\", \"sophomore\", \"rested\", \"straw\", \"museums\", \"donors\", \"continent\", \"optimal\", \"clearing\", \"restored\", \"certified\",\n    \"ounces\", \"vermont\", \"notions\", \"sweeping\", \"downs\", \"hudson\", \"recycling\", \"titled\", \"binding\", \"minimize\", \"sweater\", \"cookie\", \"murmured\", \"solved\", \"heather\", \"confusing\",\n    \"retailers\", \"abraham\", \"somethin\", \"sentiment\", \"ranking\", \"drifted\", \"doubts\", \"clarity\", \"reduces\", \"premise\", \"dated\", \"hierarchy\", \"harrison\", \"histories\", \"cycles\", \"keyboard\",\n    \"operates\", \"shelves\", \"hangs\", \"stevens\", \"casting\", \"tricks\", \"lloyd\", \"scenarios\", \"carrie\", \"seized\", \"severely\", \"pushes\", \"charm\", \"propose\", \"realities\", \"drawings\",\n    \"taxpayer\", \"washing\", \"prevented\", \"convert\", \"cries\", \"speeches\", \"chains\", \"limiting\", \"bailey\", \"guides\", \"hightech\", \"investor\", \"popped\", \"commented\", \"sixteen\", \"randomly\",\n    \"salaries\", \"archives\", \"closes\", \"hiking\", \"milwaukee\", \"violated\", \"blogger\", \"fried\", \"louise\", \"lasting\", \"routes\", \"trout\", \"thrust\", \"analyzing\", \"framed\", \"supper\",\n    \"elevated\", \"freshly\", \"barnes\", \"arriving\", \"limbs\", \"compact\", \"aloud\", \"rotation\", \"lovers\", \"thesis\", \"sequences\", \"triple\", \"quantity\", \"mitch\", \"travis\", \"colony\",\n    \"princeton\", \"bikes\", \"indirect\", \"towers\", \"maintains\", \"melissa\", \"selfish\", \"paradise\", \"shoved\", \"obstacles\", \"castro\", \"crude\", \"tucker\", \"spine\", \"peered\", \"severity\",\n    \"integral\", \"victories\", \"packages\", \"processor\", \"slowed\", \"appearing\", \"surfaces\", \"raymond\", \"ashley\", \"judged\", \"shields\", \"exclusion\", \"threaten\", \"enables\", \"judging\", \"delight\",\n    \"furious\", \"starr\", \"christie\", \"praying\", \"suspicion\", \"frames\", \"releases\", \"boundary\", \"hardest\", \"europeans\", \"risky\", \"dodgers\", \"therapist\", \"publicity\", \"aides\", \"confront\",\n    \"damages\", \"charging\", \"lakers\", \"diameter\", \"poster\", \"targeting\", \"pipeline\", \"painter\", \"notre\", \"rental\", \"static\", \"scripture\", \"dorothy\", \"hatch\", \"regulate\", \"blonde\",\n    \"hughes\", \"amazed\", \"pounding\", \"saturated\", \"speeds\", \"grunts\", \"resigned\", \"shout\", \"gazed\", \"lauren\", \"extract\", \"majors\", \"optional\", \"greta\", \"dangers\", \"glowing\",\n    \"longest\", \"scholarly\", \"workshops\", \"shirts\", \"consumed\", \"storms\", \"hopeful\", \"blows\", \"flowing\", \"declare\", \"dessert\", \"kitty\", \"poland\", \"intel\", \"impaired\", \"normative\",\n    \"declining\", \"tastes\", \"texture\", \"batteries\", \"contacted\", \"victoria\", \"martinez\", \"raiders\", \"shawn\", \"fortunate\", \"drought\", \"amongst\", \"invention\", \"dresses\", \"cameron\", \"deficits\",\n    \"naval\", \"overview\", \"embraced\", \"exhibited\", \"idiots\", \"nitrogen\", \"weigh\", \"credible\", \"clusters\", \"ballet\", \"privately\", \"ellis\", \"stumbled\", \"mentor\", \"delegates\", \"imply\",\n    \"operators\", \"mills\", \"goldman\", \"sensation\", \"utilities\", \"chile\", \"rooted\", \"ethan\", \"disputes\", \"footsteps\", \"fuels\", \"mickey\", \"slides\", \"forecast\", \"theirs\", \"blair\",\n    \"cooling\", \"natalie\", \"arlington\", \"broth\", \"scouts\", \"falcons\", \"headline\", \"notebook\", \"customs\", \"locate\", \"travels\", \"arrives\", \"heated\", \"ensuring\", \"riley\", \"beats\",\n    \"columns\", \"implied\", \"swinging\", \"kenneth\", \"canon\", \"optical\", \"sucked\", \"discharge\", \"sophie\", \"alternate\", \"roses\", \"terminal\", \"accidents\", \"purchases\", \"precision\", \"tribute\",\n    \"cowboy\", \"stems\", \"designing\", \"chapters\", \"quarterly\", \"persian\", \"sealed\", \"recipient\", \"motel\", \"surrender\", \"coupled\", \"tokyo\", \"renewed\", \"centered\", \"dumped\", \"fourteen\",\n    \"troubles\", \"comply\", \"spotlight\", \"defines\", \"chapel\", \"indicator\", \"artifacts\", \"urgent\", \"worrying\", \"dreaming\", \"marginal\", \"compost\", \"viewer\", \"gregory\", \"sweep\", \"servants\",\n    \"harper\", \"judiciary\", \"predictor\", \"bloggers\", \"steadily\", \"chorus\", \"hosted\", \"visually\", \"flipped\", \"harmony\", \"thrilled\", \"siblings\", \"kisses\", \"onethird\", \"fictional\", \"inspector\",\n    \"tense\", \"buses\", \"talkin\", \"albeit\", \"overtime\", \"relied\", \"extending\", \"curtains\", \"midwest\", \"computing\", \"whats\", \"griffin\", \"underwear\", \"moses\", \"finest\", \"charts\",\n    \"editing\", \"proves\", \"idaho\", \"gravel\", \"robbery\", \"backwards\", \"rockies\", \"facial\", \"intake\", \"bloom\", \"depicted\", \"heating\", \"basin\", \"cottage\", \"cousins\", \"grounded\",\n    \"fluency\", \"crews\", \"streams\", \"chick\", \"shades\", \"donated\", \"refuge\", \"flooding\", \"suited\", \"comics\", \"motive\", \"steering\", \"integrate\", \"indonesia\", \"possessed\", \"mushrooms\",\n    \"password\", \"frontier\", \"penalties\", \"needle\", \"nutrients\", \"drilling\", \"pricing\", \"explosive\", \"conceived\", \"analogy\", \"candles\", \"tuned\", \"surveyed\", \"vendors\", \"haven\", \"pelosi\",\n    \"nicely\", \"klein\", \"relates\", \"compounds\", \"carriers\", \"outlined\", \"admire\", \"listing\", \"whispers\", \"profiles\", \"pleaded\", \"interval\", \"competent\", \"finely\", \"motives\", \"intrinsic\",\n    \"suitcase\", \"riders\", \"starring\", \"strains\", \"composite\", \"passages\", \"wasting\", \"broadly\", \"hazardous\", \"readings\", \"breathed\", \"phases\", \"utilized\", \"justices\", \"immunity\", \"factories\",\n    \"subscribe\", \"thief\", \"arguably\", \"coded\", \"stuart\", \"fisheries\", \"slapped\", \"nashville\", \"minced\", \"dominate\", \"crashed\", \"venus\", \"rendered\", \"creepy\", \"finals\", \"convey\",\n    \"lacks\", \"brady\", \"sundays\", \"mixing\", \"renewable\", \"nigeria\", \"platforms\", \"obsessed\", \"nexus\", \"statewide\", \"implicit\", \"sixty\", \"carson\", \"budgets\", \"kinsley\", \"aftermath\",\n    \"breeding\", \"liane\", \"recruited\", \"peppers\", \"ringing\", \"planting\", \"thankful\", \"elites\", \"strips\", \"blocking\", \"smoked\", \"refusing\", \"parttime\", \"portable\", \"zealand\", \"cheer\",\n    \"maternal\", \"serial\", \"blake\", \"selecting\", \"shells\", \"fellas\", \"trevor\", \"rationale\", \"thighs\", \"elders\", \"porter\", \"segments\", \"coding\", \"pursued\", \"ideals\", \"thirteen\",\n    \"atomic\", \"newman\", \"wildly\", \"specialty\", \"warehouse\", \"ellie\", \"genuinely\", \"sleeve\", \"ranges\", \"waitress\", \"melted\", \"elvis\", \"cindy\", \"omaha\", \"lifts\", \"comet\",\n    \"consume\", \"bryan\", \"rivals\", \"leverage\", \"generic\", \"someplace\", \"deserved\", \"wolves\", \"freezing\", \"formally\", \"waits\", \"hostages\", \"risen\", \"selective\", \"wandered\", \"bells\",\n    \"proceeds\", \"canceled\", \"governors\", \"shortage\", \"denying\", \"retained\", \"danced\", \"spill\", \"slower\", \"volumes\", \"mario\", \"morally\", \"wines\", \"ensemble\", \"newest\", \"stakes\",\n    \"simmer\", \"trans\", \"obtaining\", \"astros\", \"bloomberg\", \"byebye\", \"gloria\", \"translate\", \"sweden\", \"fitting\", \"clayton\", \"absorbed\", \"slipping\", \"treats\", \"strings\", \"secondly\",\n    \"greeted\", \"argentina\", \"sensed\", \"certainty\", \"tracy\", \"listeners\", \"champions\", \"pitchers\", \"examines\", \"shotgun\", \"borrowed\", \"illegally\", \"premiere\", \"motors\", \"trainer\", \"holder\",\n    \"curtis\", \"entries\", \"portrayed\", \"outlets\", \"memorable\", \"pitched\", \"boulevard\", \"ironic\", \"peaks\", \"poles\", \"fists\", \"zimmerman\", \"disposal\", \"processed\", \"reviewing\", \"portions\",\n    \"lacked\", \"breakdown\", \"defended\", \"imports\", \"musician\", \"flags\", \"logan\", \"stephanie\", \"surviving\", \"handy\", \"marriages\", \"extends\", \"polished\", \"thrones\", \"peeled\", \"decorated\",\n    \"carroll\", \"intervals\", \"concludes\", \"flawed\", \"allied\", \"loads\", \"survivor\", \"excerpt\", \"unified\", \"lending\", \"bowed\", \"jumps\", \"appendix\", \"communism\", \"cellular\", \"console\",\n    \"connie\", \"patricia\", \"overly\", \"nodding\", \"tubes\", \"comin\", \"enacted\", \"offset\", \"talents\", \"taller\", \"chambers\", \"greed\", \"admiral\", \"regulated\", \"rosie\", \"stats\",\n    \"burke\", \"exploded\", \"drafted\", \"yielded\", \"landmark\", \"albums\", \"christine\", \"linking\", \"mistaken\", \"outright\", \"kindle\", \"founders\", \"dominance\", \"stossel\", \"preserved\", \"offended\",\n    \"swings\", \"packing\", \"wicked\", \"waiter\", \"megan\", \"affection\", \"leslie\", \"glancing\", \"sensors\", \"clues\", \"courtyard\", \"spelling\", \"primitive\", \"sporting\", \"gettin\", \"happier\",\n    \"shark\", \"flavors\", \"favors\", \"licensed\", \"secured\", \"flashing\", \"deborah\", \"sunshine\", \"hugged\", \"smarter\", \"darker\", \"gestured\", \"neurons\", \"outdoors\", \"trait\", \"offerings\",\n    \"guardian\", \"detention\", \"exceed\", \"elect\", \"grunting\", \"plains\", \"notices\", \"patted\", \"sideways\", \"browns\", \"interim\", \"ministers\", \"innocence\", \"crosses\", \"objection\", \"mentality\",\n    \"palmer\", \"kicks\", \"undermine\", \"annoyed\", \"finances\", \"newton\", \"carlson\", \"ricky\", \"fairness\", \"shattered\", \"optimism\", \"causal\", \"monsters\", \"exchanges\", \"thorough\", \"genome\",\n    \"respects\", \"needing\", \"cartoon\", \"manages\", \"rubbing\", \"seasonal\", \"kenya\", \"import\", \"topped\", \"warnings\", \"rented\", \"specimens\", \"preschool\", \"sandra\", \"genesis\", \"wrestling\",\n    \"imported\", \"launching\", \"cooler\", \"withdraw\", \"doctoral\", \"hopkins\", \"corpse\", \"curry\", \"evenly\", \"shooter\", \"singapore\", \"ratios\", \"begging\", \"chickens\", \"groans\", \"systemic\",\n    \"basil\", \"feathers\", \"recruit\", \"posters\", \"damaging\", \"serum\", \"glorious\", \"subjected\", \"husbands\", \"gonzalez\", \"crust\", \"lookin\", \"panthers\", \"offenders\", \"forbes\", \"jerked\",\n    \"diplomacy\", \"stripped\", \"affective\", \"feminine\", \"gestures\", \"curricula\", \"descent\", \"hardy\", \"preheat\", \"hosting\", \"carrots\", \"echoed\", \"refuses\", \"messed\", \"grilled\", \"sydney\",\n    \"cheat\", \"paperwork\", \"robots\", \"alfred\", \"laurie\", \"ducks\", \"relying\", \"relies\", \"mouths\", \"censored\", \"costa\", \"brett\", \"ravens\", \"ranger\", \"breed\", \"phrases\",\n    \"shouts\", \"queens\", \"matthews\", \"stimuli\", \"preceding\", \"candle\", \"supporter\", \"clinics\", \"bowls\", \"fertility\", \"combining\", \"deployed\", \"dragging\", \"tilted\", \"superman\", \"coleman\",\n    \"blaming\", \"whisk\", \"enron\", \"marvel\", \"toyota\", \"delighted\", \"swiss\", \"releasing\", \"cracks\", \"folder\", \"discusses\", \"margins\", \"teaspoons\", \"viruses\", \"fixing\", \"searches\",\n    \"isaac\", \"cardinal\", \"rusty\", \"wishing\", \"squash\", \"persuade\", \"cautious\", \"elbows\", \"outline\", \"sensible\", \"steelers\", \"walmart\", \"runners\", \"educator\", \"chloe\", \"realizes\",\n    \"mustard\", \"prayed\", \"endorsed\", \"praised\", \"supplied\", \"pretended\", \"interrupt\", \"cooperate\", \"joking\", \"joshua\", \"sponsors\", \"proving\", \"surplus\", \"spark\", \"freaking\", \"animated\",\n    \"circus\", \"seventeen\", \"stresses\", \"nerves\", \"fastest\", \"boiling\", \"rounded\", \"cheering\", \"smallest\", \"emerges\", \"busted\", \"wandering\", \"auburn\", \"gabriel\", \"excuses\", \"computed\",\n    \"repeating\", \"closure\", \"holdings\", \"easter\", \"hispanics\", \"floated\", \"roasted\", \"traces\", \"mapping\", \"reinforce\", \"meredith\", \"dietary\", \"lanes\", \"confined\", \"fragments\", \"julian\",\n    \"reliance\", \"lengthy\", \"streaming\", \"varies\", \"wyoming\", \"nicholas\", \"lectures\", \"parkway\", \"meter\", \"enabling\", \"olivia\", \"calculate\", \"crossfire\", \"frankie\", \"fountain\", \"corrected\",\n    \"compiled\", \"prejudice\", \"schemes\", \"demons\", \"deviation\", \"felony\", \"newer\", \"hercules\", \"clara\", \"secretly\", \"violet\", \"thereof\", \"criticize\", \"peninsula\", \"enjoys\", \"tricky\",\n    \"atoms\", \"saturn\", \"piled\", \"dont\", \"walsh\", \"residual\", \"commands\", \"wires\", \"powered\", \"carla\", \"conan\", \"mines\", \"delivers\", \"packs\", \"mattress\", \"mastery\",\n    \"pupils\", \"commodity\", \"nervously\", \"betrayed\", \"spilled\", \"timely\", \"precedent\", \"limbaugh\", \"oddly\", \"refusal\", \"outreach\", \"homemade\", \"repeal\", \"delays\", \"nintendo\", \"sacks\",\n    \"prevalent\", \"poses\", \"delaware\", \"liberties\", \"myers\", \"statutes\", \"premier\", \"grains\", \"biased\", \"livestock\", \"particle\", \"prairie\", \"nobel\", \"elaine\", \"brenda\", \"hawks\",\n    \"portraits\", \"bushes\", \"christina\", \"scotland\", \"flaws\", \"contend\", \"massage\", \"hormone\", \"raced\", \"stamps\", \"vaguely\", \"boeing\", \"stretches\", \"cycling\", \"necklace\", \"bankers\",\n    \"comprised\", \"chili\", \"dancer\", \"meyer\", \"woody\", \"stacked\", \"appetite\", \"singles\", \"revision\", \"luckily\", \"rigorous\", \"markers\", \"visions\", \"revival\", \"learner\", \"tablets\",\n    \"figuring\", \"rainbow\", \"masks\", \"cardboard\", \"slick\", \"fishery\", \"rituals\", \"endure\", \"shepherd\", \"broker\", \"baseman\", \"debbie\", \"promotes\", \"alltime\", \"valentine\", \"gerald\",\n    \"shoots\", \"spiral\", \"testers\", \"literal\", \"healthier\", \"opener\", \"tissues\", \"locks\", \"offseason\", \"throne\", \"lifelong\", \"niche\", \"joyce\", \"thermal\", \"evolving\", \"stirred\",\n    \"condemned\", \"feminism\", \"depths\", \"offshore\", \"resign\", \"puzzled\", \"starving\", \"advise\", \"grammar\", \"basics\", \"handles\", \"successes\", \"surprises\", \"donation\", \"distances\", \"curls\",\n    \"marco\", \"backpack\", \"communal\", \"confess\", \"stained\", \"probable\", \"concerts\", \"balloon\", \"assert\", \"develops\", \"monitors\", \"denise\", \"elliott\", \"colonies\", \"handing\", \"mentions\",\n    \"pools\", \"grabbing\", \"strokes\", \"darwin\", \"saucepan\", \"clarence\", \"tasted\", \"arrests\", \"briefing\", \"flooded\", \"differed\", \"textbooks\", \"debts\", \"plots\", \"whistle\", \"sherman\",\n    \"settling\", \"obsession\", \"lottery\", \"packers\", \"manifest\", \"preseason\", \"maximize\", \"truths\", \"interfere\", \"forbidden\", \"balancing\", \"ontario\", \"saves\", \"tolerate\", \"violate\", \"allison\",\n    \"punished\", \"blankets\", \"chuckled\", \"synthetic\", \"marietta\", \"priced\", \"pavement\", \"turtles\", \"choir\", \"timeline\", \"pierce\", \"angles\", \"cloves\", \"sonny\", \"disclose\", \"switching\",\n    \"doomed\", \"servers\", \"posture\", \"triggered\", \"glared\", \"punish\", \"lester\", \"battered\", \"carpenter\", \"premiums\", \"exhibits\", \"chrysler\", \"comeback\", \"turnout\", \"audrey\", \"crawford\",\n    \"trades\", \"sensor\", \"rocking\", \"reversed\", \"crafts\", \"remedy\", \"neglected\", \"saddle\", \"scarf\", \"troubling\", \"headache\", \"twoyear\", \"altar\", \"dancers\", \"blades\", \"sprint\",\n    \"probation\", \"graves\", \"vicious\", \"deleted\", \"clutching\", \"marital\", \"circular\", \"descended\", \"gasped\", \"consult\", \"lengths\", \"haunted\", \"contempt\", \"calvin\", \"henderson\", \"compelled\",\n    \"memoir\", \"hedge\", \"acids\", \"strangely\", \"uniforms\", \"pipes\", \"netanyahu\", \"planetary\", \"fills\", \"barrels\", \"resistant\", \"imaginary\", \"truman\", \"sammy\", \"capita\", \"showbiz\",\n    \"vaccines\", \"moonlight\", \"mattered\", \"forums\", \"saturdays\", \"subscale\", \"andrews\", \"intimacy\", \"freed\", \"crises\", \"poetic\", \"kindness\", \"gripped\", \"quayle\", \"easiest\", \"prisons\",\n    \"averaging\", \"dolphins\", \"nicky\", \"mornings\", \"parameter\", \"remark\", \"weeds\", \"carriage\", \"calmly\", \"textual\", \"flung\", \"helpless\", \"enhancing\", \"slips\", \"serbs\", \"athens\",\n    \"robertson\", \"downward\", \"peggy\", \"outlet\", \"ambiguous\", \"caption\", \"labour\", \"suppliers\", \"savannah\", \"patty\", \"accord\", \"savage\", \"flushed\", \"colts\", \"licenses\", \"romans\",\n    \"guiding\", \"thailand\", \"coats\", \"patches\", \"preview\", \"rider\", \"machinery\", \"camping\", \"sticky\", \"threads\", \"hayes\", \"bacterial\", \"offspring\", \"tweets\", \"coins\", \"sweating\",\n    \"fishermen\", \"theorists\", \"miniature\", \"schooling\", \"clicking\", \"snakes\", \"galleries\", \"reign\", \"tones\", \"ferguson\", \"cherokee\", \"wholly\", \"nowadays\", \"predators\", \"librarian\", \"mistress\",\n    \"whipped\", \"warmer\", \"losers\", \"directing\", \"myths\", \"artwork\", \"shipped\", \"teachings\", \"batting\", \"prevents\", \"winston\", \"airports\", \"clenched\", \"ruins\", \"spinach\", \"realism\",\n    \"fools\", \"modernity\", \"exclaimed\", \"foremost\", \"nasdaq\", \"pitches\", \"buddies\", \"crawled\", \"enjoyment\", \"piles\", \"replies\", \"observes\", \"swollen\", \"dripping\", \"dental\", \"carolyn\",\n    \"wreck\", \"sinking\", \"santorum\", \"coffin\", \"decreases\", \"patterson\", \"bonnie\", \"katherine\", \"gardening\", \"render\", \"shootings\", \"summers\", \"pathways\", \"campuses\", \"adrian\", \"successor\",\n    \"tearing\", \"muddy\", \"siegel\", \"jenkins\", \"vibrant\", \"explorer\", \"whitney\", \"chooses\", \"chefs\", \"arises\", \"exploit\", \"rankings\", \"vince\", \"teammate\", \"marsh\", \"draped\",\n    \"feasible\", \"scanned\", \"sanchez\", \"breach\", \"lethal\", \"diamonds\", \"casually\", \"benny\", \"gauge\", \"geraldo\", \"narrowed\", \"samantha\", \"nationals\", \"poets\", \"statutory\", \"startup\",\n    \"uncovered\", \"lindsay\", \"perched\", \"wagner\", \"lateral\", \"shrink\", \"poised\", \"programme\", \"lousy\", \"fouryear\", \"gallon\", \"lenses\", \"batter\", \"electron\", \"marker\", \"frederick\",\n    \"ambition\", \"disasters\", \"imagining\", \"cursed\", \"keywords\", \"crashing\", \"rehearsal\", \"radically\", \"singers\", \"cleaner\", \"tackles\", \"fridge\", \"mentoring\", \"deserted\", \"monroe\", \"fiveyear\",\n    \"woodruff\", \"imposing\", \"gases\", \"patrons\", \"curved\", \"mainland\", \"flush\", \"traumatic\", \"halls\", \"morrison\", \"marilyn\", \"traced\", \"licensing\", \"heavier\", \"killers\", \"utilize\",\n    \"oneself\", \"mineral\", \"marched\", \"subscales\", \"defenses\", \"scratched\", \"ankles\", \"curves\", \"froze\", \"readiness\", \"transfers\", \"dateline\", \"leisure\", \"genocide\", \"catcher\", \"rosemary\",\n    \"smoothly\", \"misses\", \"sleeves\", \"proudly\", \"explores\", \"thrill\", \"situated\", \"gangs\", \"seller\", \"panting\", \"momma\", \"robbed\", \"modem\", \"responds\", \"eleanor\", \"mound\",\n    \"notorious\", \"arrogant\", \"lively\", \"defender\", \"bounced\", \"willis\", \"punched\", \"darkened\", \"borrowing\", \"gardner\", \"cornell\", \"schedules\", \"clicked\", \"oceans\", \"layout\", \"trousers\",\n    \"overlap\", \"milky\", \"michel\", \"sincere\", \"shelters\", \"veins\", \"bites\", \"covenant\", \"fueled\", \"anova\", \"minus\", \"perimeter\", \"lowering\", \"freeman\", \"slightest\", \"hitter\",\n    \"remainder\", \"stimulate\", \"becky\", \"perfume\", \"mindset\", \"norway\", \"filters\", \"eased\", \"rests\", \"drifting\", \"ambiguity\", \"swedish\", \"joints\", \"strive\", \"virtues\", \"sudan\",\n    \"manners\", \"displaced\", \"pervasive\", \"triangle\", \"seals\", \"vanessa\", \"marcia\", \"elliot\", \"filthy\", \"heroic\", \"wyatt\", \"exchanged\", \"lipstick\", \"slowing\", \"motions\", \"simpler\",\n    \"aligned\", \"holland\", \"gilbert\", \"passport\", \"tightened\", \"lenders\", \"denies\", \"evidently\", \"repairs\", \"kelley\", \"florence\", \"freedoms\", \"marvin\", \"paste\", \"climbs\", \"phoebe\",\n    \"shoppers\", \"footnote\", \"colombia\", \"mounting\", \"lieberman\", \"michele\", \"costumes\", \"roommate\", \"tactic\", \"asteroid\", \"anonymity\", \"mortgages\", \"exterior\", \"specify\", \"activism\", \"netflix\",\n    \"skywalker\", \"pumps\", \"africans\", \"tracked\", \"scanning\", \"plague\", \"andre\", \"messenger\", \"geneva\", \"hostility\", \"finale\", \"defenders\", \"knicks\", \"shannon\", \"mortal\", \"floyd\",\n    \"folding\", \"noticing\", \"eyebrow\", \"dangling\", \"edgar\", \"restrict\", \"whilst\", \"randall\", \"mutually\", \"rebellion\", \"prose\", \"nascar\", \"mosque\", \"rumsfeld\", \"lydia\", \"govern\",\n    \"vernon\", \"policeman\", \"marching\", \"boasts\", \"kosovo\", \"verge\", \"awaiting\", \"sensory\", \"claude\", \"soaked\", \"continuum\", \"handson\", \"agnes\", \"baylor\", \"wrists\", \"venezuela\",\n    \"johns\", \"doses\", \"worthless\", \"newsweek\", \"stressful\", \"sterling\", \"begged\", \"databases\", \"peering\", \"reactor\", \"methodist\", \"seafood\", \"decisive\", \"equations\", \"endured\", \"sworn\",\n    \"prompt\", \"gallons\", \"insect\", \"wander\", \"alignment\", \"clergy\", \"ramsey\", \"medicines\", \"amended\", \"gradual\", \"cleanup\", \"messy\", \"mentors\", \"shutdown\", \"whereby\", \"receivers\",\n    \"neural\", \"montreal\", \"victorian\", \"evelyn\", \"crouched\", \"phillip\", \"pinch\", \"thinly\", \"formats\", \"auditory\", \"stabbed\", \"primaries\", \"sequel\", \"sunni\", \"eternity\", \"bodily\",\n    \"twisting\", \"bankrupt\", \"norfolk\", \"grated\", \"deposits\", \"simmons\", \"quoting\", \"settlers\", \"beams\", \"diving\", \"acquiring\", \"bully\", \"urgency\", \"hottest\", \"plasma\", \"weary\",\n    \"automated\", \"remarked\", \"chunks\", \"binary\", \"shane\", \"patio\", \"pledged\", \"killings\", \"filming\", \"tugged\", \"flynn\", \"embodied\", \"hiphop\", \"bulletin\", \"illnesses\", \"notified\",\n    \"ports\", \"melting\", \"mcconnell\", \"cease\", \"differing\", \"getty\", \"burton\", \"monitored\", \"archive\", \"pinned\", \"trustees\", \"bailout\", \"planners\", \"feeds\", \"initiate\", \"textbook\",\n    \"tangible\", \"staffers\", \"sailing\", \"nasal\", \"pathway\", \"persuaded\", \"apollo\", \"linux\", \"brightly\", \"diced\", \"greeting\", \"exceeded\", \"sausage\", \"sheila\", \"scrambled\", \"jackets\",\n    \"shiite\", \"sucking\", \"beers\", \"drowned\", \"predicts\", \"staircase\", \"disclosed\", \"sugars\", \"propped\", \"knives\", \"rightly\", \"fella\", \"friedman\", \"iconic\", \"retiring\", \"foliage\",\n    \"minerals\", \"paramount\", \"consuming\", \"sings\", \"disgust\", \"pains\", \"handbook\", \"politely\", \"cochran\", \"accusing\", \"cigar\", \"evenings\", \"melody\", \"yanked\", \"attic\", \"rescued\",\n    \"ventures\", \"modeled\", \"depot\", \"combines\", \"protects\", \"patents\", \"hubble\", \"lettuce\", \"diesel\", \"sparked\", \"avoidance\", \"robbie\", \"jared\", \"believer\", \"skiers\", \"betsy\",\n    \"animation\", \"connor\", \"wordpress\", \"salesman\", \"apparatus\", \"provinces\", \"dared\", \"paranoid\", \"heavens\", \"sellers\", \"frances\", \"squinted\", \"canned\", \"mysteries\", \"anyways\", \"endeavor\",\n    \"forensic\", \"mutant\", \"honda\", \"dwight\", \"consist\", \"genetics\", \"yorker\", \"pumping\", \"blinking\", \"enjoyable\", \"prostate\", \"pauses\", \"generates\", \"miguel\", \"smashed\", \"stein\",\n    \"bubbles\", \"judgement\", \"performs\", \"earnest\", \"disciples\", \"scars\", \"doubles\", \"clips\", \"winding\", \"renewal\", \"explode\", \"crawling\", \"cheryl\", \"governed\", \"bowling\", \"juliet\",\n    \"blended\", \"underway\", \"cooks\", \"greene\", \"decay\", \"warns\", \"righteous\", \"offenses\", \"linen\", \"briefcase\", \"sights\", \"promptly\", \"amusement\", \"sabrina\", \"claws\", \"needles\",\n    \"metals\", \"activated\", \"commons\", \"greedy\", \"postal\", \"brighter\", \"hampton\", \"threatens\", \"nursery\", \"latinos\", \"proceeded\", \"bothering\", \"pragmatic\", \"butterfly\", \"chess\", \"viewpoint\",\n    \"flashes\", \"comedian\", \"fibers\", \"freezer\", \"reuters\", \"bulbs\", \"hobby\", \"chelsea\", \"fries\", \"weaker\", \"attendant\", \"uncommon\", \"stall\", \"sleek\", \"ideally\", \"impress\",\n    \"boomers\", \"palette\", \"stahl\", \"clarke\", \"boarding\", \"freeway\", \"whales\", \"aristotle\", \"postwar\", \"clutched\", \"strained\", \"cosby\", \"littleton\", \"slopes\", \"prototype\", \"vitamins\",\n    \"feminists\", \"coached\", \"gamble\", \"bronx\", \"tweeted\", \"communion\", \"finishes\", \"massacre\", \"jerome\", \"cardiac\", \"plaintiff\", \"showcase\", \"richards\", \"fracture\", \"eventual\", \"fitted\",\n    \"tumors\", \"rewarding\", \"chased\", \"crooked\", \"patriot\", \"mandela\", \"isaiah\", \"wrinkled\", \"softened\", \"unusually\", \"violating\", \"armies\", \"fuller\", \"touring\", \"pastel\", \"tangled\",\n    \"shaken\", \"shirley\", \"intervene\", \"realtime\", \"railing\", \"generals\", \"prefers\", \"declines\", \"trademark\", \"butcher\", \"bosses\", \"slumped\", \"mandated\", \"reggie\", \"swamp\", \"daniels\",\n    \"thanked\", \"reminding\", \"belle\", \"slams\", \"troop\", \"outsiders\", \"dread\", \"antiques\", \"kimberly\", \"schorr\", \"benefited\", \"goddess\", \"taxation\", \"cereal\", \"snorted\", \"cheerful\",\n    \"vastly\", \"metaphors\", \"rodney\", \"shredded\", \"differs\", \"shrugs\", \"pierre\", \"relay\", \"moist\", \"printer\", \"sting\", \"longing\", \"grandson\", \"mammals\", \"lindsey\", \"solomon\",\n    \"mercedes\", \"owens\", \"richer\", \"turnover\", \"sharks\", \"bastards\", \"greet\", \"staged\", \"savvy\", \"rubio\", \"definite\", \"mustache\", \"remotely\", \"composer\", \"scarce\", \"barney\",\n    \"tshirts\", \"betting\", \"steer\", \"jonah\", \"harlem\", \"decatur\", \"traders\", \"credited\", \"strands\", \"artillery\", \"collector\", \"cancers\", \"charities\", \"resembles\", \"hernandez\", \"verizon\",\n    \"spice\", \"sipped\", \"strode\", \"prestige\", \"trailing\", \"marion\", \"stray\", \"bouncing\", \"fearful\", \"specifics\", \"sailor\", \"resisted\", \"clung\", \"creators\", \"hunched\", \"snatched\",\n    \"fines\", \"flown\", \"echoes\", \"wiping\", \"soils\", \"diplomats\", \"freddie\", \"headnote\", \"paired\", \"rewarded\", \"jacobs\", \"openness\", \"homers\", \"equals\", \"listens\", \"persist\",\n    \"confessed\", \"rifles\", \"lowfat\", \"numerical\", \"skirts\", \"devotion\", \"swore\", \"exits\", \"lakewood\", \"brushing\", \"tract\", \"freud\", \"goose\", \"preaching\", \"directory\", \"pastoral\",\n    \"accompany\", \"felix\", \"hazards\", \"wasnt\", \"singular\", \"vancouver\", \"superb\", \"lamps\", \"boris\", \"broccoli\", \"habitats\", \"chargers\", \"proposing\", \"groaned\", \"earrings\", \"declaring\",\n    \"tactical\", \"monkeys\", \"vienna\", \"cheated\", \"manny\", \"americas\", \"hostess\", \"circled\", \"splash\", \"norton\", \"swiftly\", \"herbert\", \"isabel\", \"undergo\", \"piper\", \"impatient\",\n    \"sparks\", \"tenants\", \"improves\", \"discrete\", \"wired\", \"worms\", \"frasier\", \"muscular\", \"sidney\", \"agreeing\", \"messing\", \"storyline\", \"exposing\", \"deepest\", \"graders\", \"performer\",\n    \"preorder\", \"bullpen\", \"startling\", \"pillows\", \"barking\", \"alumni\", \"bending\", \"villain\", \"hints\", \"cites\", \"stupidity\", \"deputies\", \"dances\", \"venues\", \"valerie\", \"ambitions\",\n    \"battling\", \"grapes\", \"chicks\", \"luggage\", \"marrying\", \"employing\", \"diets\", \"sleepy\", \"veronica\", \"granite\", \"beatles\", \"parted\", \"riots\", \"islamist\", \"schwartz\", \"groceries\",\n    \"pursuant\", \"judith\", \"recruits\", \"dolls\", \"cakes\", \"cracking\", \"concealed\", \"shapiro\", \"harmless\", \"tornado\", \"denmark\", \"poked\", \"autopsy\", \"suffers\", \"arthritis\", \"outbreaks\",\n    \"alicia\", \"leaked\", \"protocols\", \"backlash\", \"quicker\", \"freelance\", \"favourite\", \"villagers\", \"referral\", \"taped\", \"clearer\", \"framing\", \"curly\", \"rains\", \"brooke\", \"sebastian\",\n    \"medals\", \"grease\", \"extracted\", \"ropes\", \"garth\", \"lingering\", \"thieves\", \"downhill\", \"dawson\", \"signaling\", \"groaning\", \"recycled\", \"dixon\", \"blink\", \"tossing\", \"roswell\",\n    \"scarcely\", \"protested\", \"restraint\", \"garrett\", \"iranians\", \"verses\", \"herman\", \"kindly\", \"tenth\", \"mumbled\", \"finite\", \"presently\", \"toddler\", \"drake\", \"popping\", \"mediation\",\n    \"dudes\", \"paints\", \"derive\", \"rendering\", \"salient\", \"troll\", \"jenna\", \"thinkers\", \"destined\", \"sweaty\", \"booked\", \"logging\", \"restless\", \"buster\", \"gateway\", \"spoiled\",\n    \"stink\", \"whining\", \"paradox\", \"exposures\", \"debated\", \"dissolve\", \"huddled\", \"archer\", \"accepts\", \"webster\", \"collision\", \"skating\", \"famously\", \"cocked\", \"enforced\", \"natives\",\n    \"drums\", \"crashes\", \"spicy\", \"backdrop\", \"hissed\", \"leaks\", \"ramirez\", \"spouses\", \"bumps\", \"albany\", \"stalin\", \"schmidt\", \"dinners\", \"dissent\", \"pamela\", \"classics\",\n    \"weakened\", \"wetlands\", \"seize\", \"pedagogy\", \"champ\", \"commanded\", \"highways\", \"generator\", \"denny\", \"shivering\", \"globally\", \"thyme\", \"alison\", \"premises\", \"civilized\", \"cockpit\",\n    \"diffusion\", \"perez\", \"presses\", \"daring\", \"pastry\", \"growers\", \"hisher\", \"anita\", \"shrinking\", \"carnegie\", \"trope\", \"holders\", \"goldberg\", \"cavuto\", \"cables\", \"prolife\",\n    \"crater\", \"painters\", \"departed\", \"outraged\", \"seating\", \"youve\", \"pointless\", \"amusing\", \"aiming\", \"genres\", \"confirms\", \"mandates\", \"podcast\", \"folds\", \"bosnian\", \"fantasies\",\n    \"jammed\", \"renowned\", \"metric\", \"snaps\", \"ethic\", \"shivered\", \"proxy\", \"appealed\", \"leftist\", \"sprawling\", \"drones\", \"squares\", \"brokers\", \"milton\", \"chavez\", \"freddy\",\n    \"landlord\", \"blessings\", \"trent\", \"deceased\", \"sincerely\", \"attain\", \"excluding\", \"embargo\", \"wildcats\", \"marina\", \"posttest\", \"obese\", \"nodes\", \"nichols\", \"plunged\", \"poorer\",\n    \"buffy\", \"educating\", \"employs\", \"tryin\", \"gasping\", \"ceramic\", \"depended\", \"coughing\", \"retrieve\", \"overhaul\", \"packaging\", \"wesley\", \"watts\", \"owning\", \"spectacle\", \"naomi\",\n    \"rouge\", \"syracuse\", \"drowning\", \"tunes\", \"erica\", \"alliances\", \"electrons\", \"freshmen\", \"securing\", \"suntimes\", \"starbucks\", \"creep\", \"subtitles\", \"cafeteria\", \"gunshot\", \"tiles\",\n    \"marking\", \"martial\", \"republics\", \"lasts\", \"reallife\", \"lilly\", \"meadow\", \"accuse\", \"dresser\", \"biting\", \"summoned\", \"cubic\", \"superstar\", \"elevation\", \"periodic\", \"durable\",\n    \"organism\", \"hilton\", \"rugged\", \"deeds\", \"gibbs\", \"apologies\", \"sunrise\", \"withdrew\", \"damon\", \"icons\", \"heartbeat\", \"filmmaker\", \"dividing\", \"vanity\", \"fleeing\", \"expresses\",\n    \"assign\", \"hairs\", \"examiner\", \"barber\", \"treaties\", \"mourning\", \"foreman\", \"pounded\", \"wrapping\", \"razor\", \"miners\", \"snapping\", \"stump\", \"augustine\", \"valve\", \"pumped\",\n    \"strap\", \"cellphone\", \"tails\", \"mediated\", \"buffer\", \"booming\", \"populated\", \"wholesale\", \"salvador\", \"detained\", \"rulers\", \"eliot\", \"coward\", \"arsenal\", \"colour\", \"portray\",\n    \"intends\", \"retailer\", \"renee\", \"underwent\", \"prophets\", \"undertake\", \"hopeless\", \"presumed\", \"willow\", \"slack\", \"induce\", \"brightest\", \"roller\", \"sparkling\", \"stella\", \"kurtz\",\n    \"prizes\", \"jessie\", \"captures\", \"capturing\", \"sneakers\", \"wakes\", \"dante\", \"discarded\", \"bookstore\", \"energetic\", \"addicted\", \"rocked\", \"prophecy\", \"banker\", \"ronnie\", \"currents\",\n    \"entertain\", \"tariffs\", \"clubhouse\", \"conrad\", \"bakery\", \"cognition\", \"excel\", \"headaches\", \"stroked\", \"yearly\", \"rattled\", \"compares\", \"chapman\", \"maurice\", \"crumpled\", \"ignores\",\n    \"swelling\", \"nokia\", \"vault\", \"resorts\", \"comey\", \"favour\", \"opted\", \"softball\", \"highend\", \"weiss\", \"takeover\", \"leaped\", \"choked\", \"crunch\", \"utilizing\", \"impacted\",\n    \"drying\", \"exams\", \"fairfax\", \"reservoir\", \"siege\", \"portal\", \"aquatic\", \"proposes\", \"roaring\", \"slippery\", \"traveler\", \"turnovers\", \"dementia\", \"snacks\", \"scottish\", \"contests\",\n    \"nolan\", \"canopy\", \"averages\", \"assemble\", \"harriet\", \"vargas\", \"reset\", \"prevail\", \"exempt\", \"jacques\", \"apartheid\", \"chandler\", \"legends\", \"weber\", \"relieve\", \"shuddered\",\n    \"contends\", \"vines\", \"goodman\", \"conductor\", \"chores\", \"evidenced\", \"sniffed\", \"chewed\", \"spilling\", \"uniquely\", \"embracing\", \"esther\", \"allergic\", \"pensions\", \"hauled\", \"sears\",\n    \"filmed\", \"newcomers\", \"remedies\", \"stain\", \"strand\", \"poultry\", \"reviewers\", \"steroids\", \"widened\", \"mandy\", \"logistic\", \"speeding\", \"shutting\", \"strapped\", \"anaheim\", \"shanghai\",\n    \"connects\", \"betrayal\", \"libby\", \"foley\", \"boycott\", \"maxwell\", \"brennan\", \"sailors\", \"liable\", \"cliffs\", \"melanie\", \"bella\", \"pretest\", \"defects\", \"thriving\", \"malaria\",\n    \"metabolic\", \"tester\", \"restoring\", \"oversees\", \"chaotic\", \"tighter\", \"mulder\", \"greatness\", \"seeming\", \"rubin\", \"doubted\", \"rivera\", \"reese\", \"arising\", \"benign\", \"debating\",\n    \"versatile\", \"haley\", \"stripes\", \"trailed\", \"peasant\", \"wouldbe\", \"immoral\", \"exploited\", \"smash\", \"cathy\", \"belts\", \"condemn\", \"exercised\", \"traps\", \"flowed\", \"graceful\",\n    \"stride\", \"vivian\", \"claudia\", \"levin\", \"treasures\", \"churchill\", \"emanuel\", \"dictate\", \"fallout\", \"devised\", \"faintly\", \"distorted\", \"emerson\", \"tents\", \"teasing\", \"isolates\",\n    \"needless\", \"stigma\", \"dragons\", \"aired\", \"planner\", \"dinosaurs\", \"congo\", \"clinging\", \"aerial\", \"suppress\", \"contested\", \"swirling\", \"bathing\", \"grind\", \"flicked\", \"malaysia\",\n    \"raining\", \"seventy\", \"puppet\", \"relaxing\", \"termed\", \"drawers\", \"savior\", \"tasty\", \"tasting\", \"seahawks\", \"fractures\", \"shovel\", \"oblivious\", \"violently\", \"subset\", \"richest\",\n    \"forge\", \"bonuses\", \"minded\", \"speculate\", \"hoover\", \"scans\", \"rushes\", \"newborn\", \"shelly\", \"peters\", \"shaved\", \"jules\", \"audition\", \"pulitzer\", \"trimmed\", \"baldwin\",\n    \"poisoning\", \"torch\", \"gardeners\", \"depicts\", \"stacks\", \"workouts\", \"cosmos\", \"lunden\", \"tesla\", \"lobster\", \"keller\", \"midway\", \"bounds\", \"wherein\", \"morton\", \"township\",\n    \"arrows\", \"pines\", \"zombies\", \"patiently\", \"doyle\", \"passions\", \"wardrobe\", \"lastly\", \"richie\", \"erupted\", \"consulate\", \"devote\", \"resembled\", \"knights\", \"sonic\", \"bidding\",\n    \"painfully\", \"eyelids\", \"ducked\", \"patriotic\", \"motivate\", \"elephants\", \"conquest\", \"thirsty\", \"claus\", \"barred\", \"eagerly\", \"labeling\", \"farewell\", \"parallels\", \"acoustic\", \"alarming\",\n    \"distract\", \"brendan\", \"pedro\", \"schumer\", \"illicit\", \"elena\", \"aspen\", \"recount\", \"payne\", \"dubious\", \"heavenly\", \"airplanes\", \"obliged\", \"enlisted\", \"madrid\", \"realise\",\n    \"abrams\", \"crafted\", \"contrasts\", \"armored\", \"secrecy\", \"leaps\", \"scandals\", \"tutoring\", \"glowed\", \"receipt\", \"pluralism\", \"spinal\", \"venice\", \"intellect\", \"token\", \"unveiled\",\n    \"probes\", \"forged\", \"chang\", \"growled\", \"schneider\", \"danish\", \"digest\", \"baskets\", \"chrome\", \"versa\", \"messiah\", \"outsider\", \"dolly\", \"scalp\", \"rubble\", \"brent\",\n    \"watergate\", \"moody\", \"sayin\", \"offender\", \"prohibit\", \"marxist\", \"episcopal\", \"layoffs\", \"financed\", \"warmed\", \"paige\", \"bingo\", \"ruler\", \"intricate\", \"conform\", \"guatemala\",\n    \"intensely\", \"energies\", \"roared\", \"locke\", \"wally\", \"spreads\", \"newport\", \"ethiopia\", \"styling\", \"shave\", \"cutter\", \"screws\", \"fooled\", \"sachs\", \"barton\", \"malone\",\n    \"breaths\", \"reacted\", \"disguise\", \"factions\", \"surgeons\", \"declares\", \"diplomat\", \"browned\", \"bricks\", \"benson\", \"appraisal\", \"preach\", \"nailed\", \"monty\", \"arrogance\", \"mutations\",\n    \"guinea\", \"resumed\", \"bleed\", \"butch\", \"shelby\", \"newark\", \"unlocked\", \"therapies\", \"switches\", \"leapt\", \"showers\", \"bedrooms\", \"verified\", \"seasoned\", \"clearance\", \"intrigued\",\n    \"levine\", \"sonya\", \"crushing\", \"moose\", \"dissolved\", \"meadows\", \"pauline\", \"shortstop\", \"geeks\", \"circling\", \"cellar\", \"persona\", \"clint\", \"hungary\", \"carey\", \"biases\",\n    \"allocated\", \"phony\", \"twenties\", \"removes\", \"buddhist\", \"wastes\", \"kabul\", \"pottery\", \"peasants\", \"charcoal\", \"cabinets\", \"famed\", \"arched\", \"trusting\", \"singled\", \"rejecting\",\n    \"deception\", \"yells\", \"predator\", \"shores\", \"nucleus\", \"fertile\", \"cramped\", \"panetta\", \"darcy\", \"rainy\", \"intuitive\", \"disagreed\", \"contender\", \"amazingly\", \"regrets\", \"rivalry\",\n    \"brink\", \"spear\", \"woodward\", \"magnet\", \"austria\", \"banning\", \"endurance\", \"licked\", \"volcano\", \"granting\", \"feather\", \"asians\", \"analogous\", \"clockwise\", \"frowning\", \"validated\",\n    \"sprang\", \"precinct\", \"knocks\", \"tailored\", \"sensing\", \"uprising\", \"strauss\", \"endowment\", \"recorder\", \"rotating\", \"pleading\", \"beatrice\", \"motioned\", \"garner\", \"maritime\", \"devils\",\n    \"winked\", \"stacy\", \"ninety\", \"sophia\", \"chilling\", \"bothers\", \"remedial\", \"halftime\", \"grunted\", \"spins\", \"roberta\", \"pundits\", \"tumbled\", \"celtics\", \"apostles\", \"cruising\",\n    \"retirees\", \"reversal\", \"bolts\", \"sailed\", \"scrub\", \"rodgers\", \"kristen\", \"dayton\", \"directs\", \"judaism\", \"sketches\", \"airborne\", \"villa\", \"schieffer\", \"jarriel\", \"whitman\",\n    \"cocacola\", \"forgiven\", \"bruno\", \"cubes\", \"grouped\", \"renal\", \"corey\", \"dominican\", \"discard\", \"shitty\", \"benedict\", \"prompting\", \"johnston\", \"atlas\", \"paralyzed\", \"condo\",\n    \"knots\", \"defence\", \"shortages\", \"blender\", \"baron\", \"councils\", \"unite\", \"caleb\", \"striped\", \"symposium\", \"psycho\", \"simulated\", \"intently\", \"corpus\", \"irritated\", \"sandals\",\n    \"pharmacy\", \"creditors\", \"coyote\", \"bounty\", \"goats\", \"issuing\", \"dinosaur\", \"barrett\", \"latent\", \"guild\", \"isolate\", \"routines\", \"poorest\", \"thumbs\", \"carlton\", \"prosecute\",\n    \"receptor\", \"patron\", \"graphs\", \"joked\", \"discounts\", \"flipping\", \"spurs\", \"sipping\", \"multitude\", \"colon\", \"hunted\", \"exceeds\", \"downturn\", \"steals\", \"youthful\", \"dividends\",\n    \"panicked\", \"brushes\", \"molecule\", \"smelling\", \"plight\", \"retreated\", \"walton\", \"applicant\", \"booze\", \"specimen\", \"plunge\", \"drainage\", \"hannity\", \"quebec\", \"bumped\", \"intern\",\n    \"grinding\", \"janice\", \"specially\", \"humane\", \"augusta\", \"maureen\", \"plato\", \"doctrines\", \"litter\", \"forecasts\", \"flatow\", \"randolph\", \"metallic\", \"marin\", \"compass\", \"avery\",\n    \"blurred\", \"pathogens\", \"surfing\", \"resonance\", \"narrowly\", \"delia\", \"scouting\", \"pinched\", \"depicting\", \"bumper\", \"narration\", \"matchup\", \"emory\", \"straps\", \"posterior\", \"frogs\",\n    \"outset\", \"granny\", \"copied\", \"emptied\", \"perkins\", \"disrupt\", \"ledge\", \"manuel\", \"squeezing\", \"alpine\", \"oilers\", \"hitters\", \"wales\", \"confuse\", \"stationed\", \"inmate\",\n    \"wolfe\", \"chilly\", \"doubling\", \"bourne\", \"morale\", \"amsterdam\", \"sherry\", \"entails\", \"chatter\", \"consulted\", \"bourgeois\", \"grande\", \"fetus\", \"shrine\", \"asphalt\", \"gazette\",\n    \"costing\", \"candidacy\", \"rainfall\", \"analytics\", \"voiced\", \"downside\", \"brussels\", \"brigade\", \"monuments\", \"shortz\", \"napoleon\", \"paved\", \"condoms\", \"pluto\", \"stunt\", \"carrot\",\n    \"shaky\", \"sleeps\", \"fences\", \"specter\", \"thriller\", \"pedal\", \"stuffing\", \"metrics\", \"analytic\", \"carmen\", \"squat\", \"reactors\", \"catalogue\", \"tractor\", \"deprived\", \"cronbach\",\n    \"chuckling\", \"olson\", \"ensures\", \"fletcher\", \"smoky\", \"flourish\", \"caves\", \"reasoned\", \"skeptics\", \"monsieur\", \"gripping\", \"sixties\", \"minors\", \"supplier\", \"intuition\", \"skipped\",\n    \"boiled\", \"disputed\", \"marlins\", \"worldview\", \"withdrawn\", \"steaming\", \"bedside\", \"spectator\", \"fabrics\", \"scripts\", \"letterman\", \"doris\", \"plump\", \"scrape\", \"mechanic\", \"oneyear\",\n    \"registry\", \"dishonest\", \"maneuver\", \"bunker\", \"attendees\", \"phillies\", \"commute\", \"outlines\", \"clasped\", \"floods\", \"volcanic\", \"rampant\", \"sinatra\", \"simplest\", \"benchmark\", \"gourmet\",\n    \"serena\", \"rafael\", \"rochester\", \"fostering\", \"winters\", \"escaping\", \"coercion\", \"props\", \"awakened\", \"crumbs\", \"gotcha\", \"stylish\", \"edison\", \"courtney\", \"libyan\", \"prepares\",\n    \"catalyst\", \"cartoons\", \"mantle\", \"empowered\", \"wheeler\", \"portugal\", \"finland\", \"daley\", \"hawkins\", \"detainees\", \"greasy\", \"tanner\", \"blindness\", \"posing\", \"vengeance\", \"brook\",\n    \"topping\", \"hugging\", \"scissors\", \"ballpark\", \"environ\", \"stint\", \"healed\", \"caucasian\", \"preceded\", \"guarded\", \"wartime\", \"glaring\", \"extremist\", \"reckon\", \"milosevic\", \"modernist\",\n    \"forbid\", \"pleasures\", \"stevie\", \"reviewer\", \"highland\", \"rhythms\", \"overlook\", \"plead\", \"stroll\", \"podium\", \"oysters\", \"balances\", \"billie\", \"twists\", \"lesions\", \"editions\",\n    \"highrisk\", \"plucked\", \"rallies\", \"applaud\", \"onetime\", \"unrest\", \"replicate\", \"wills\", \"extremes\", \"larvae\", \"fortunes\", \"joanna\", \"sasha\", \"radius\", \"staggered\", \"packet\",\n    \"morals\", \"lenny\", \"allergies\", \"humidity\", \"freaked\", \"cruelty\", \"clare\", \"marge\", \"pertinent\", \"grasped\", \"plaster\", \"clumsy\", \"festivals\", \"hammond\", \"cured\", \"tammy\",\n    \"runoff\", \"glossy\", \"stumbling\", \"marshal\", \"methane\", \"facto\", \"agendas\", \"allan\", \"imitation\", \"canoe\", \"sloan\", \"cruiser\", \"greeks\", \"coarse\", \"buzzing\", \"linkedin\",\n    \"platter\", \"broadband\", \"impending\", \"lowcost\", \"lingered\", \"forearm\", \"disgusted\", \"kneeling\", \"mythology\", \"mikey\", \"porcelain\", \"nuggets\", \"seminary\", \"slamming\", \"blasted\", \"suicidal\",\n    \"flats\", \"detector\", \"fellows\", \"crest\", \"clueless\", \"alarmed\", \"invent\", \"erase\", \"ripping\", \"oversee\", \"pours\", \"norwegian\", \"tattoos\", \"pudding\", \"echoing\", \"stressors\",\n    \"chilled\", \"implying\", \"cookbook\", \"spelled\", \"hateful\", \"sherr\", \"trembled\", \"borrowers\", \"cohesion\", \"buffet\", \"desserts\", \"haircut\", \"attained\", \"marketers\", \"pasture\", \"pasadena\",\n    \"lesbians\", \"disparity\", \"ottoman\", \"salem\", \"vacations\", \"jewel\", \"remnants\", \"flora\", \"dickens\", \"lineage\", \"traction\", \"trench\", \"modules\", \"mildly\", \"signaled\", \"recess\",\n    \"chatting\", \"gracious\", \"jeanne\", \"captive\", \"withstand\", \"lucinda\", \"paces\", \"richness\", \"fragment\", \"blaze\", \"flickered\", \"scarlet\", \"anglers\", \"browse\", \"fargo\", \"noses\",\n    \"woodlands\", \"creeping\", \"bruised\", \"playful\", \"childish\", \"choke\", \"danielle\", \"directive\", \"reside\", \"rails\", \"teased\", \"bedtime\", \"blooms\", \"seminars\", \"customary\", \"blackness\",\n    \"vicki\", \"scalia\", \"wraps\", \"gears\", \"scenic\", \"conceive\", \"battalion\", \"pancakes\", \"johnnie\", \"logically\", \"darren\", \"royals\", \"pacing\", \"scares\", \"checklist\", \"donkey\",\n    \"traitor\", \"hillside\", \"downright\", \"feinstein\", \"croatia\", \"staples\", \"spared\", \"taxed\", \"scenery\", \"hairy\", \"corridors\", \"listener\", \"shines\", \"poisoned\", \"marta\", \"skins\",\n    \"thornton\", \"announces\", \"gramm\", \"messaging\", \"rhythmic\", \"punches\", \"spears\", \"artery\", \"mallory\", \"crowley\", \"surfaced\", \"singh\", \"enclosed\", \"antitrust\", \"mailing\", \"monks\",\n    \"celestial\", \"screened\", \"decidedly\", \"darryl\", \"crystals\", \"hopped\", \"sidewalks\", \"halfhour\", \"tenant\", \"awkwardly\", \"equitable\", \"strides\", \"improper\", \"covert\", \"wisely\", \"notation\",\n    \"reacting\", \"gardener\", \"coughed\", \"roland\", \"aided\", \"clapped\", \"swaying\", \"scraped\", \"statistic\", \"smokers\", \"newsroom\", \"barked\", \"variant\", \"triggers\", \"highs\", \"placebo\",\n    \"slippers\", \"gerry\", \"blatant\", \"starfleet\", \"enact\", \"wouldnt\", \"blitzer\", \"stranded\", \"viability\", \"harvested\", \"borne\", \"andersen\", \"jamaica\", \"longevity\", \"warrants\", \"pinky\",\n    \"recalling\", \"enforcing\", \"bananas\", \"stalled\", \"mystical\", \"shrubs\", \"graphite\", \"preston\", \"spheres\", \"billboard\", \"disturb\", \"splitting\", \"sampled\", \"crumbling\", \"wellness\", \"serbian\",\n    \"browsing\", \"retaining\", \"afforded\", \"donovan\", \"amelia\", \"statues\", \"theodore\", \"squirrel\", \"fridays\", \"abigail\", \"outfits\", \"debra\", \"boone\", \"persisted\", \"routledge\", \"subgroups\",\n    \"roofs\", \"robes\", \"brows\", \"barcelona\", \"chops\", \"screwing\", \"forefront\", \"bengals\", \"casinos\", \"align\", \"thugs\", \"discern\", \"juicy\", \"overt\", \"presume\", \"disparate\",\n    \"ancestral\", \"openings\", \"decree\", \"leaking\", \"awakening\", \"titanic\", \"derrick\", \"brokerage\", \"dreadful\", \"acclaimed\", \"breadth\", \"thinner\", \"recurring\", \"exert\", \"mariners\", \"sneaking\",\n    \"bliss\", \"hikes\", \"reformers\", \"highlands\", \"dispatch\", \"pristine\", \"arbor\", \"dividend\", \"bauer\", \"rabbits\", \"dwell\", \"astronaut\", \"coherence\", \"barefoot\", \"haitian\", \"moriarty\",\n    \"circuits\", \"spices\", \"mccoy\", \"resolving\", \"olives\", \"staging\", \"mediocre\", \"cassie\", \"giggled\", \"conquer\", \"operative\", \"outdated\", \"salads\", \"boredom\", \"artie\", \"rattle\",\n    \"subsidy\", \"blossoms\", \"softer\", \"spells\", \"tumbling\", \"bracket\", \"ahmed\", \"appoint\", \"penguin\", \"shear\", \"lender\", \"marissa\", \"chalk\", \"sheldon\", \"goodnight\", \"tentative\",\n    \"thematic\", \"comprise\", \"mixer\", \"shuffled\", \"veggies\", \"legion\", \"clicks\", \"everett\", \"shiver\", \"gabrielle\", \"nietzsche\", \"watershed\", \"plagued\", \"concede\", \"reconcile\", \"deduction\",\n    \"cannabis\", \"striving\", \"flakes\", \"riverside\", \"locking\", \"fashioned\", \"mitigate\", \"bends\", \"arsenic\", \"enzymes\", \"clintons\", \"theresa\", \"growling\", \"vanguard\", \"herbal\", \"imperfect\",\n    \"warden\", \"emptiness\", \"arousal\", \"unfolding\", \"pleasing\", \"jeremiah\", \"launches\", \"magician\", \"stephens\", \"laborers\", \"curiously\", \"rejects\", \"intraday\", \"geared\", \"sprawled\", \"pence\",\n    \"sticker\", \"sarge\", \"divergent\", \"wrinkles\", \"tosses\", \"rattling\", \"tipping\", \"solemn\", \"activate\", \"menus\", \"purdue\", \"scraping\", \"stale\", \"roadside\", \"jointly\", \"acrylic\",\n    \"plumbing\", \"endlessly\", \"navajo\", \"ticking\", \"mates\", \"grouping\", \"innate\", \"buddha\", \"winced\", \"spaghetti\", \"cushion\", \"gallup\", \"chuckle\", \"opposes\", \"bruises\", \"broadwell\",\n    \"clemens\", \"fragrant\", \"expansive\", \"stabilize\", \"dashed\", \"yorkers\", \"policing\", \"whistling\", \"sorting\", \"royalty\", \"dataset\", \"muted\", \"lowell\", \"renew\", \"liner\", \"revive\",\n    \"hackers\", \"ached\", \"hating\", \"flicker\", \"meltdown\", \"choral\", \"notify\", \"sideline\", \"padded\", \"fiduciary\", \"billing\", \"conveyed\", \"norris\", \"gloom\", \"slots\", \"backstage\",\n    \"tighten\", \"scarcity\", \"reeves\", \"listings\", \"cheered\", \"sarajevo\", \"durham\", \"sized\", \"residency\", \"furiously\", \"balloons\", \"midtown\", \"naughty\", \"stainless\", \"pathology\", \"darted\",\n    \"possesses\", \"avenues\", \"serbia\", \"peyton\", \"hicks\", \"fearing\", \"lineman\", \"rutgers\", \"laptops\", \"summed\", \"cancelled\", \"crackdown\", \"smoothed\", \"watkins\", \"welch\", \"filtered\",\n    \"halted\", \"antibody\", \"moderator\", \"thinkin\", \"juices\", \"pierced\", \"penelope\", \"penetrate\", \"sanity\", \"chester\", \"hides\", \"fossils\", \"martian\", \"variants\", \"scraps\", \"breakup\",\n    \"ponytail\", \"amenities\", \"needy\", \"greenspan\", \"conceal\", \"anterior\", \"flattened\", \"diapers\", \"helena\", \"textile\", \"additions\", \"typed\", \"firefox\", \"bigotry\", \"recurrent\", \"deter\",\n    \"stature\", \"ribbons\", \"vinyl\", \"frazier\", \"bridget\", \"vapor\", \"conceded\", \"keeper\", \"reich\", \"virgil\", \"hurdles\", \"grasses\", \"wipes\", \"divisive\", \"reprinted\", \"therein\",\n    \"defect\", \"sirens\", \"whine\", \"coating\", \"casts\", \"stains\", \"enhances\", \"runaway\", \"lowers\", \"archie\", \"receptive\", \"dropout\", \"correlate\", \"gavin\", \"cocoa\", \"undergone\",\n    \"bolivia\", \"storing\", \"plateau\", \"heroine\", \"emergent\", \"citations\", \"almonds\", \"willingly\", \"outspoken\", \"distrust\", \"damascus\", \"undecided\", \"cosmetic\", \"provoked\", \"modernism\", \"exploding\",\n    \"aspiring\", \"analog\", \"refund\", \"rican\", \"hugely\", \"scifi\", \"cooled\", \"wheeled\", \"orchard\", \"sands\", \"excerpts\", \"galveston\", \"objected\", \"heres\", \"madeleine\", \"leaping\",\n    \"partition\", \"macro\", \"hayden\", \"chanting\", \"dynasty\", \"thursdays\", \"derives\", \"brutality\", \"racially\", \"vansant\", \"ariel\", \"gladly\", \"sinks\", \"kickoff\", \"plaque\", \"urges\",\n    \"anchored\", \"sidelines\", \"dialog\", \"edged\", \"hybrids\", \"longed\", \"endeavors\", \"detached\", \"aching\", \"moons\", \"pratt\", \"hardship\", \"betray\", \"tribunal\", \"enriched\", \"rents\",\n    \"optics\", \"straining\", \"airways\", \"staffing\", \"gravy\", \"copying\", \"nurturing\", \"portrayal\", \"startups\", \"saudis\", \"psyche\", \"spying\", \"brewers\", \"discovers\", \"foucault\", \"farmhouse\",\n    \"slated\", \"gould\", \"duluth\", \"header\", \"alleviate\", \"peeling\", \"bladder\", \"silva\", \"raids\", \"robotic\", \"tongues\", \"cantor\", \"makeshift\", \"unanimous\", \"allergy\", \"tease\",\n    \"whipping\", \"notch\", \"salty\", \"manually\", \"unjust\", \"populist\", \"expands\", \"stung\", \"repeats\", \"kitchens\", \"boarded\", \"bathtub\", \"merge\", \"spielberg\", \"bland\", \"evacuated\",\n    \"earns\", \"affinity\", \"separates\", \"weaken\", \"trayvon\", \"oversized\", \"regimen\", \"coated\", \"fragrance\", \"rapids\", \"canadians\", \"bangs\", \"upgrades\", \"thirties\", \"pastors\", \"invade\",\n    \"morocco\", \"mortar\", \"benches\", \"revisions\", \"pelley\", \"reyes\", \"trainers\", \"ascii\", \"stalking\", \"expired\", \"oneway\", \"swayed\", \"milan\", \"rotting\", \"abrupt\", \"embryos\",\n    \"suites\", \"freestyle\", \"ballroom\", \"plainly\", \"satire\", \"apparel\", \"banged\", \"aerobic\", \"goodwill\", \"ruining\", \"depiction\", \"howling\", \"pinterest\", \"spies\", \"barren\", \"algeria\",\n    \"racks\", \"slung\", \"warranted\", \"crank\", \"bethesda\", \"prompts\", \"archival\", \"impetus\", \"valleys\", \"nausea\", \"expelled\", \"texting\", \"hazel\", \"formative\", \"guitarist\", \"rotate\",\n    \"sadie\", \"cyclists\", \"soften\", \"crackers\", \"perch\", \"celia\", \"folklore\", \"descend\", \"grading\", \"convict\", \"flips\", \"logistics\", \"unlock\", \"tracing\", \"treason\", \"fluids\",\n    \"maura\", \"digits\", \"creed\", \"precincts\", \"famine\", \"algae\", \"hardened\", \"overthrow\", \"meats\", \"decoding\", \"santiago\", \"dispersed\", \"offend\", \"fronts\", \"haunting\", \"suffice\",\n    \"clipped\", \"packaged\", \"implant\", \"trustee\", \"scramble\", \"grins\", \"fisherman\", \"trusts\", \"bates\", \"stylist\", \"converts\", \"submarine\", \"detecting\", \"drafting\", \"ruthless\", \"valuation\",\n    \"careless\", \"aerospace\", \"fungi\", \"elicit\", \"mailed\", \"greenberg\", \"grieving\", \"rosen\", \"superhero\", \"francesca\", \"spurred\", \"transmit\", \"alexis\", \"quitting\", \"malls\", \"doubtful\",\n    \"dawkins\", \"warranty\", \"humorous\", \"amazement\", \"mateo\", \"residuals\", \"hadley\", \"markedly\", \"ponder\", \"selves\", \"doorbell\", \"stamped\", \"deposited\", \"expletive\", \"crammed\", \"cambodia\",\n    \"cursing\", \"windy\", \"quartet\", \"crate\", \"attracts\", \"evils\", \"mosquito\", \"shuts\", \"showdown\", \"nicer\", \"trolls\", \"rebuilt\", \"punitive\", \"counters\", \"expanse\", \"affirmed\",\n    \"lords\", \"altering\", \"ensembles\", \"robbins\", \"wreckage\", \"provoke\", \"remake\", \"punching\", \"glaze\", \"couldnt\", \"entirety\", \"coroner\", \"footing\", \"violates\", \"slump\", \"burnett\",\n    \"dismissal\", \"creations\", \"soaking\", \"subpoena\", \"mileage\", \"twotime\", \"fares\", \"bolted\", \"parasites\", \"anguish\", \"pausing\", \"diners\", \"crusade\", \"hacked\", \"watering\", \"hailed\",\n    \"necks\", \"spoil\", \"numbered\", \"aquinas\", \"delegate\", \"fascist\", \"colder\", \"federally\", \"manure\", \"lexington\", \"daschle\", \"cervical\", \"detectors\", \"vitality\", \"lever\", \"tangle\",\n    \"clout\", \"policemen\", \"satin\", \"shady\", \"caregiver\", \"mimic\", \"aquarium\", \"giggling\", \"calves\", \"thicker\", \"rallied\", \"leftover\", \"pressured\", \"sununu\", \"continual\", \"spacious\",\n    \"allowance\", \"unborn\", \"hideous\", \"referrals\", \"commuter\", \"muster\", \"gregg\", \"alphabet\", \"symbolism\", \"scaling\", \"imbalance\", \"cultivate\", \"skier\", \"reins\", \"flapping\", \"shale\",\n    \"earthly\", \"profanity\", \"linger\", \"seizure\", \"mormons\", \"dolan\", \"unfolded\", \"dealings\", \"diversion\", \"flowering\", \"corpses\", \"lyons\", \"cartel\", \"photoshop\", \"pineapple\", \"overheard\",\n    \"stillness\", \"coworkers\", \"wilder\", \"nicaragua\", \"cleansing\", \"resisting\", \"muttering\", \"sheen\", \"scooped\", \"auntie\", \"ransom\", \"artifact\", \"desks\", \"whichever\", \"vitro\", \"prevailed\",\n    \"lillian\", \"collects\", \"blueprint\", \"payoff\", \"mailbox\", \"detailing\", \"visionary\", \"cutler\", \"mocking\", \"bitterly\", \"ensuing\", \"scoffs\", \"textiles\", \"stringent\", \"disks\", \"handgun\",\n    \"anecdotal\", \"havoc\", \"embarrass\", \"sunscreen\", \"airlock\", \"paperback\", \"bearded\", \"reactive\", \"affidavit\", \"outskirts\", \"sighted\", \"eldest\", \"squinting\", \"forgiving\", \"ashcroft\", \"receipts\",\n    \"transient\", \"luxurious\", \"romania\", \"murdering\", \"starred\", \"erased\", \"perks\", \"fannie\", \"amish\", \"flagship\", \"sixteenth\", \"curling\", \"rigged\", \"validate\", \"liturgy\", \"taxing\",\n    \"kissinger\", \"powerless\", \"prudent\", \"upgraded\", \"backers\", \"shadowy\", \"evergreen\", \"motif\", \"pollen\", \"linkage\", \"fluttered\", \"carve\", \"skate\", \"hauling\", \"uttered\", \"thyroid\",\n    \"gaunt\", \"hemingway\", \"fifties\", \"repay\", \"stairwell\", \"staffer\", \"groan\", \"regiment\", \"familial\", \"nearer\", \"quirky\", \"gaping\", \"logged\", \"geometric\", \"lithuania\", \"revived\",\n    \"appalled\", \"xavier\", \"della\", \"printers\", \"riches\", \"homeowner\", \"spectral\", \"exceeding\", \"harmed\", \"blinding\", \"fallacy\", \"spiders\", \"hearty\", \"cohorts\", \"idiotic\", \"airway\",\n    \"carbo\", \"diagnoses\", \"slows\", \"didnt\", \"competed\", \"fleeting\", \"defiance\", \"browsers\", \"prohibits\", \"attrition\", \"powdered\", \"sighing\", \"rosenberg\", \"denounced\", \"tripped\", \"railway\",\n    \"faction\", \"murmur\", \"moderates\", \"stylistic\", \"subtest\", \"fished\", \"informing\", \"shampoo\", \"carbs\", \"murdoch\", \"dismay\", \"updating\", \"dilemmas\", \"cocktails\", \"collusion\", \"leonardo\",\n    \"formulate\", \"flirting\", \"retains\", \"repaired\", \"bathrooms\", \"flank\", \"golfers\", \"dictated\", \"donny\", \"rinsed\", \"scorer\", \"agitated\", \"tulsa\", \"starling\", \"pillars\", \"islamists\",\n    \"franken\", \"lawful\", \"landfill\", \"galactic\", \"secession\", \"mastered\", \"cerebral\", \"construed\", \"footprint\", \"likert\", \"timeless\", \"chung\", \"hesitant\", \"tuesdays\", \"delhi\", \"radiant\",\n    \"surreal\", \"clauses\", \"ponds\", \"stalks\", \"gamers\", \"reliably\", \"annabelle\", \"upstream\", \"exemplary\", \"conquered\", \"carts\", \"shoving\", \"thirst\", \"punishing\", \"motifs\", \"liars\",\n    \"brisk\", \"marketed\", \"severed\", \"furnished\", \"gendered\", \"escorted\", \"sinners\", \"formulas\", \"drills\", \"summarize\", \"estates\", \"affirm\", \"strolled\", \"opaque\", \"clocks\", \"pecans\",\n    \"phelps\", \"amidst\", \"strung\", \"guardians\", \"abdomen\", \"barnett\", \"devoid\", \"alamo\", \"abdullah\", \"humanist\", \"boast\", \"cutline\", \"arranging\", \"tutorial\", \"avengers\", \"chiles\",\n    \"bullied\", \"diaspora\", \"canton\", \"bathed\", \"morgue\", \"cuffs\", \"obscene\", \"puzzles\", \"scarred\", \"trickle\", \"groove\", \"deserving\", \"fungal\", \"pinpoint\", \"theyve\", \"petals\",\n    \"fined\", \"plurality\", \"critiques\", \"faults\", \"breeds\", \"buckle\", \"obligated\", \"spitting\", \"fostered\", \"ancestry\", \"extras\", \"pillar\", \"settles\", \"cercla\", \"weekdays\", \"hacker\",\n    \"platinum\", \"yielding\", \"gesturing\", \"fastball\", \"fixes\", \"malicious\", \"jerks\", \"bottled\", \"quotas\", \"quotation\", \"taiwanese\", \"mickelson\", \"nestled\", \"buzzed\", \"petitions\", \"asteroids\",\n    \"decency\", \"pronounce\", \"gradient\", \"pantry\", \"billed\", \"favre\", \"resides\", \"wording\", \"blossom\", \"decor\", \"nielsen\", \"milestone\", \"kendall\", \"flare\", \"beeping\", \"audible\",\n    \"mayer\", \"relish\", \"candid\", \"poignant\", \"narcotics\", \"loops\", \"unfairly\", \"edith\", \"dazed\", \"carville\", \"ritter\", \"seeded\", \"vocals\", \"canonical\", \"lurking\", \"blinded\",\n    \"syntax\", \"impulses\", \"harassed\", \"absentee\", \"sectarian\", \"vibration\", \"chimney\", \"brock\", \"helmets\", \"murderers\", \"renting\", \"colonists\", \"linkages\", \"coyotes\", \"thrilling\", \"blinds\",\n    \"glamour\", \"busch\", \"surrogate\", \"arteries\", \"auditors\", \"filings\", \"plugin\", \"lawns\", \"norcross\", \"tattered\", \"easing\", \"combo\", \"patronage\", \"wallpaper\", \"edible\", \"hammered\",\n    \"flared\", \"faulty\", \"dickinson\", \"clashes\", \"moaned\", \"residue\", \"eliza\", \"falsely\", \"depletion\", \"cinemark\", \"cecilia\", \"ryder\", \"haters\", \"littered\", \"grady\", \"visibly\",\n    \"suspend\", \"replaces\", \"tabloid\", \"obscured\", \"toddlers\", \"gallagher\", \"scowled\", \"sharpton\", \"occupying\", \"densities\", \"ancestor\", \"annoyance\", \"thatcher\", \"coarsely\", \"immensely\", \"spawned\",\n    \"coupling\", \"succeeds\", \"steaks\", \"scanner\", \"receptors\", \"renders\", \"jesuit\", \"twoway\", \"supremacy\", \"quantify\", \"ventured\", \"registers\", \"remorse\", \"vested\", \"debacle\", \"surgeries\",\n    \"shameful\", \"vicinity\", \"catering\", \"fixation\", \"snowy\", \"roasting\", \"schultz\", \"blindly\", \"offline\", \"widening\", \"morons\", \"graveyard\", \"fractured\", \"cling\", \"monstrous\", \"salvage\",\n    \"karzai\", \"saunders\", \"threeday\", \"synagogue\", \"smear\", \"withheld\", \"upwards\", \"motorists\", \"parody\", \"upstate\", \"fennel\", \"reformed\", \"yates\", \"avoids\", \"engages\", \"depart\",\n    \"preached\", \"magically\", \"sakes\", \"ballistic\", \"midday\", \"conducive\", \"fairway\", \"yearold\", \"footnotes\", \"sorted\", \"bandwidth\", \"twostory\", \"promoter\", \"swirled\", \"thump\", \"smartest\",\n    \"ambient\", \"boutique\", \"greetings\", \"whistled\", \"spans\", \"compose\", \"diaries\", \"treasurer\", \"divinity\", \"disrupted\", \"carly\", \"masked\", \"muller\", \"populace\", \"disagrees\", \"accessing\",\n    \"grips\", \"whack\", \"lashes\", \"resilient\", \"disguised\", \"barracks\", \"midterm\", \"hustle\", \"ortiz\", \"jamal\", \"stoop\", \"prized\", \"periphery\", \"endemic\", \"summon\", \"bachmann\",\n    \"informs\", \"marriott\", \"stickers\", \"liaison\", \"cheapest\", \"lunches\", \"brutally\", \"sterile\", \"drafts\", \"imagines\", \"alienated\", \"classify\", \"winfrey\", \"blames\", \"mixes\", \"dreaded\",\n    \"docks\", \"carcinoma\", \"whirled\", \"furnace\", \"heath\", \"pests\", \"ambush\", \"expressly\", \"grimaced\", \"rubric\", \"addictive\", \"bottoms\", \"regretted\", \"plugged\", \"menopause\", \"macarthur\",\n    \"lurched\", \"ethos\", \"denim\", \"herein\", \"comprises\", \"rustic\", \"keyword\", \"turbines\", \"interplay\", \"facade\", \"watery\", \"optimum\", \"paranoia\", \"scant\", \"reliever\", \"happiest\",\n    \"coupons\", \"shaving\", \"eyeing\", \"crippled\", \"phoned\", \"handmade\", \"piedmont\", \"plotting\", \"sails\", \"emerald\", \"streaks\", \"wiley\", \"attentive\", \"revise\", \"unarmed\", \"diarrhea\",\n    \"caste\", \"lighten\", \"buckets\", \"resent\", \"winery\", \"risking\", \"tally\", \"margarine\", \"hungarian\", \"italians\", \"riggs\", \"mashable\", \"amounted\", \"dryer\", \"unmarried\", \"predatory\",\n    \"trendy\", \"acquitted\", \"trillions\", \"deference\", \"hesitates\", \"hydraulic\", \"parishes\", \"glued\", \"darkest\", \"peaked\", \"ensign\", \"bitten\", \"makeover\", \"marrow\", \"regan\", \"renovated\",\n    \"albright\", \"dichotomy\", \"shooters\", \"paulo\", \"steamed\", \"briefed\", \"reassure\", \"recounts\", \"peril\", \"memoirs\", \"supplying\", \"pageant\", \"seasoning\", \"cloning\", \"coveted\", \"alarms\",\n    \"rooting\", \"jailed\", \"boise\", \"muffin\", \"plaid\", \"forestry\", \"poisonous\", \"comrades\", \"sprouts\", \"diffuse\", \"boulders\", \"leveled\", \"visas\", \"prolific\", \"anomaly\", \"workings\",\n    \"eclectic\", \"postponed\", \"blending\", \"hitchcock\", \"elegance\", \"starve\", \"entrees\", \"irons\", \"smeared\", \"hallmark\", \"bullies\", \"dismal\", \"twitched\", \"mindful\", \"dominates\", \"clerks\",\n    \"uniformed\", \"deferred\", \"hardcore\", \"unleashed\", \"limestone\", \"beamed\", \"floats\", \"fooling\", \"contours\", \"sponge\", \"englewood\", \"sandusky\", \"destroys\", \"pricey\", \"tedious\", \"countered\",\n    \"margot\", \"folders\", \"router\", \"ranchers\", \"shuffling\", \"paradigms\", \"scaring\", \"newcomer\", \"ensured\", \"primer\", \"explodes\", \"handicap\", \"truthful\", \"villains\", \"mobilize\", \"logos\",\n    \"seventies\", \"composers\", \"mapped\", \"treadmill\", \"tagged\", \"mayors\", \"shipment\", \"kristol\", \"strewn\", \"doctorate\", \"onehalf\", \"alameda\", \"standoff\", \"ellison\", \"bandar\", \"reminders\",\n    \"homestead\", \"tackling\", \"coverup\", \"bryce\", \"snuck\", \"concedes\", \"shoreline\", \"barring\", \"bosch\", \"whoohoo\", \"seekers\", \"highness\", \"regents\", \"reefs\", \"moines\", \"stiffened\",\n    \"uncles\", \"esteem\", \"goldstein\", \"slaps\", \"standings\", \"tugging\", \"grumbled\", \"rooftop\", \"hurrying\", \"seizures\", \"clustered\", \"ridges\", \"attackers\", \"heaved\", \"geese\", \"clutter\",\n    \"dearly\", \"encompass\", \"trumpet\", \"seminal\", \"symmetry\", \"prescribe\", \"taxonomy\", \"enactment\", \"hikers\", \"cherished\", \"realms\", \"ashore\", \"exhaled\", \"inherit\", \"broaden\", \"dipping\",\n    \"baths\", \"dictates\", \"hushed\", \"crumbled\", \"socket\", \"blasting\", \"lured\", \"commenter\", \"garland\", \"shanahan\", \"authorize\", \"aunts\", \"coloring\", \"cupboard\", \"steered\", \"liberated\",\n    \"columbine\", \"gameplay\", \"yearning\", \"lends\", \"commotion\", \"hinted\", \"dogma\", \"humankind\", \"sharia\", \"refine\", \"stockings\", \"plentiful\", \"defeating\", \"cabins\", \"bulky\", \"surged\",\n    \"clamped\", \"cosmetics\", \"grasping\", \"cinematic\", \"dashboard\", \"boosting\", \"plank\", \"distal\", \"farmland\", \"extremism\", \"portrays\", \"vouchers\", \"susteren\", \"overturn\", \"tweeting\", \"hires\",\n    \"gloved\", \"woodstock\", \"deported\", \"standup\", \"fidel\", \"intrusion\", \"benin\", \"specs\", \"override\", \"bashing\", \"macdonald\", \"accents\", \"gordy\", \"rodham\", \"immersed\", \"swelled\",\n    \"disposed\", \"landings\", \"cavaliers\", \"parting\", \"realist\", \"nests\", \"countdown\", \"upsetting\", \"sarcastic\", \"boosted\", \"greenwood\", \"rites\", \"marash\", \"schema\", \"corrosion\", \"battled\",\n    \"knowingly\", \"orphan\", \"antenna\", \"chord\", \"lyric\", \"sprayed\", \"strait\", \"loopholes\", \"helms\", \"bulging\", \"beetles\", \"malware\", \"favoring\", \"composing\", \"filtering\", \"unused\",\n    \"banquet\", \"guarding\", \"congrats\", \"wikileaks\", \"supernova\", \"tunisia\", \"unsalted\", \"sinus\", \"gleamed\", \"stocked\", \"dumpster\", \"avocado\", \"login\", \"laced\", \"abducted\", \"specials\",\n    \"extant\", \"puree\", \"whistles\", \"convoy\", \"sparse\", \"vividly\", \"standout\", \"offending\", \"cutoff\", \"postcard\", \"ebooks\", \"unnamed\", \"moods\", \"worldly\", \"coercive\", \"pandemic\",\n    \"illusions\", \"booths\", \"decorate\", \"alyssa\", \"seedlings\", \"knotted\", \"cushions\", \"webshots\", \"scaled\", \"flurry\", \"chant\", \"blurted\", \"divides\", \"gridlock\", \"profiling\", \"platoon\",\n    \"monarchy\", \"alleging\", \"publishes\", \"fastened\", \"literate\", \"tending\", \"shards\", \"preserves\", \"vitti\", \"cages\", \"clears\", \"audiotape\", \"streaked\", \"hissing\", \"atkins\", \"buddhism\",\n    \"playhouse\", \"caucuses\", \"schadler\", \"intercept\", \"shocks\", \"utopian\", \"squarely\", \"stevenson\", \"packets\", \"lesion\", \"replay\", \"squatted\", \"nuclei\", \"tibet\", \"depleted\", \"stalls\",\n    \"silas\", \"mindless\", \"grimly\", \"creeps\", \"substrate\", \"scarlett\", \"magnesium\", \"confines\", \"turks\", \"discs\", \"wichita\", \"arenas\", \"stairway\", \"embraces\", \"racket\", \"verbally\",\n    \"debuted\", \"hereafter\", \"nearing\", \"revolver\", \"hourly\", \"bouquet\", \"webbased\", \"teamed\", \"elijah\", \"spills\", \"flattered\", \"norah\", \"contended\", \"blushed\", \"brochure\", \"obsessive\",\n    \"peeked\", \"pursed\", \"extrinsic\", \"frontal\", \"tanzania\", \"topical\", \"felicity\", \"appalling\", \"amend\", \"digestive\", \"elian\", \"dialed\", \"realised\", \"watchdog\", \"jongun\", \"airing\",\n    \"parkinson\", \"gracie\", \"priori\", \"defiant\", \"grassy\", \"captivity\", \"headset\", \"landmarks\", \"etched\", \"collapses\", \"harding\", \"govt\", \"favorably\", \"downloads\", \"coupon\", \"mcgee\",\n    \"maher\", \"regained\", \"lockheed\", \"ratified\", \"tandem\", \"constance\", \"giveaway\", \"diagrams\", \"safeguard\", \"glimpsed\", \"informant\", \"turkeys\", \"isabella\", \"attends\", \"racists\", \"weakly\",\n    \"hamstring\", \"polity\", \"fades\", \"selfhelp\", \"grossman\", \"bazaar\", \"grownup\", \"wretched\", \"coaster\", \"hearth\", \"soles\", \"shaded\", \"stinking\", \"suarez\", \"specifies\", \"spruce\",\n    \"whopping\", \"queries\", \"classy\", \"awaits\", \"fruitful\", \"cranberry\", \"watchers\", \"throbbing\", \"absently\", \"parchment\", \"encoding\", \"harbaugh\", \"complains\", \"luncheon\", \"churning\", \"recounted\",\n    \"angled\", \"workin\", \"wrongly\", \"parity\", \"leopold\", \"retrieval\", \"hummed\", \"conducts\", \"genus\", \"drags\", \"cruises\", \"terminate\", \"tragedies\", \"hubbard\", \"handcuffs\", \"simulate\",\n    \"shimano\", \"revisit\", \"proximal\", \"freezes\", \"humid\", \"twohour\", \"waterfall\", \"autistic\", \"stiffly\", \"bounded\", \"photons\", \"submerged\", \"decks\", \"ridicule\", \"lighted\", \"absorbing\",\n    \"angola\", \"oxide\", \"climates\", \"amplified\", \"appellate\", \"sprigs\", \"gritty\", \"booking\", \"splashing\", \"reunited\", \"facets\", \"silvery\", \"forties\", \"survives\", \"flaming\", \"corrupted\",\n    \"clove\", \"requisite\", \"bigtime\", \"turquoise\", \"fernandez\", \"throats\", \"rumbling\", \"faculties\", \"glossary\", \"boils\", \"emitted\", \"persists\", \"manmade\", \"diverted\", \"flair\", \"gergen\",\n    \"recourse\", \"lofty\", \"beckel\", \"serene\", \"doorstep\", \"timetable\", \"throttle\", \"gloomy\", \"pairing\", \"deadlines\", \"mater\", \"rulings\", \"walnuts\", \"starks\", \"slowdown\", \"briskly\",\n    \"auditor\", \"overdue\", \"pursuits\", \"likeness\", \"safest\", \"fastfood\", \"shrill\", \"blackened\", \"sweeps\", \"mounds\", \"sinai\", \"drifts\", \"greer\", \"cautions\", \"landslide\", \"cords\",\n    \"despise\", \"chloride\", \"textures\", \"crates\", \"timed\", \"parasite\", \"stemming\", \"pigment\", \"proclaim\", \"brody\", \"nicklaus\", \"voldemort\", \"folly\", \"guideline\", \"cabrera\", \"maize\",\n    \"tornadoes\", \"quivering\", \"stabbing\", \"discreet\", \"evokes\", \"staten\", \"gentiles\", \"calmed\", \"mediator\", \"garments\", \"dubai\", \"glaciers\", \"explorers\", \"pigeon\", \"wrecked\", \"strangled\",\n    \"autograph\", \"emmett\", \"turbulent\", \"transcend\", \"rained\", \"probing\", \"hereby\", \"greenwich\", \"escapes\", \"silky\", \"laughable\", \"weakening\", \"lagattuta\", \"bearings\", \"hubby\", \"cores\",\n    \"hanks\", \"rumored\", \"growl\", \"prank\", \"argentine\", \"thomson\", \"stitches\", \"cracker\", \"hardwood\", \"surrounds\", \"legit\", \"rocker\", \"thier\", \"priceless\", \"skeletal\", \"sprinkled\",\n    \"scatter\", \"nesting\", \"trenches\", \"mayoral\", \"bedding\", \"pennies\", \"squirrels\", \"uniformly\", \"wagons\", \"notebooks\", \"layered\", \"retina\", \"chipped\", \"paralysis\", \"herds\", \"scrubbed\",\n    \"coolest\", \"radios\", \"clarified\", \"blends\", \"tripled\", \"sanction\", \"revered\", \"mediating\", \"elias\", \"overboard\", \"shoves\", \"trays\", \"boasted\", \"complexes\", \"eyepiece\", \"cessation\",\n    \"coined\", \"euros\", \"psychotic\", \"mediate\", \"spectra\", \"perverse\", \"flannel\", \"cubans\", \"beethoven\", \"flinched\", \"interiors\", \"draining\", \"amplitude\", \"suspense\", \"pigeons\", \"recap\",\n    \"diabetic\", \"ketchup\", \"excused\", \"swallows\", \"diagnose\", \"sheltered\", \"trotted\", \"leftwing\", \"deterrent\", \"occupies\", \"arresting\", \"havent\", \"quiones\", \"cassandra\", \"preface\", \"murderous\",\n    \"badges\", \"hearst\", \"divert\", \"gandhi\", \"reacts\", \"dynamite\", \"awaited\", \"precursor\", \"imposes\", \"cherish\", \"doctrinal\", \"emeritus\", \"beckett\", \"antiquity\", \"flute\", \"nepal\",\n    \"grotesque\", \"bankr\", \"angered\", \"rousseau\", \"leone\", \"relocated\", \"civility\", \"moneyline\", \"stooped\", \"tailor\", \"sluggish\", \"pipelines\", \"lessen\", \"chiefly\", \"alexandra\", \"immersion\",\n    \"embarked\", \"closeness\", \"washes\", \"nominate\", \"sincerity\", \"blockade\", \"referee\", \"festive\", \"surpassed\", \"frigid\", \"risked\", \"patting\", \"primacy\", \"replica\", \"linemen\", \"hopping\",\n    \"neutron\", \"combed\", \"twitch\", \"outfield\", \"schroeder\", \"silverman\", \"smacked\", \"shepard\", \"disliked\", \"seams\", \"finalists\", \"halved\", \"stormed\", \"donating\", \"fixtures\", \"catalogs\",\n    \"bayou\", \"simplify\", \"renamed\", \"runnerup\", \"patsy\", \"blackmail\", \"clooney\", \"quieter\", \"mosques\", \"henri\", \"drilled\", \"alvarez\", \"metadata\", \"dearest\", \"executor\", \"flawless\",\n    \"plotted\", \"patrols\", \"discredit\", \"devise\", \"casualty\", \"raisins\", \"semifinal\", \"anchors\", \"rubbish\", \"elevators\", \"spirited\", \"joyful\", \"quaint\", \"bowen\", \"ferris\", \"colombian\",\n    \"regulars\", \"interns\", \"puppets\", \"lancaster\", \"beaming\", \"knitting\", \"shriek\", \"convened\", \"rustling\", \"grenade\", \"redundant\", \"leftovers\", \"climatic\", \"heaving\", \"shipments\", \"deceptive\",\n    \"tenets\", \"payton\", \"upgrading\", \"rusted\", \"loadings\", \"sweaters\", \"wiser\", \"cones\", \"vocation\", \"eminent\", \"whiteness\", \"commuters\", \"propelled\", \"charred\", \"concerted\", \"tides\",\n    \"opioid\", \"baltic\", \"ascent\", \"blasts\", \"reverence\", \"truce\", \"puffed\", \"majestic\", \"thinker\", \"actresses\", \"barak\", \"rookies\", \"stalked\", \"forks\", \"cautioned\", \"gleam\",\n    \"prognosis\", \"makin\", \"bundled\", \"timer\", \"fixture\", \"vineyards\", \"waged\", \"vents\", \"psych\", \"elicited\", \"gentry\", \"janie\", \"equate\", \"tremble\", \"restart\", \"aristide\",\n    \"chopping\", \"fledgling\", \"syrians\", \"shutters\", \"tread\", \"mondays\", \"bristol\", \"batters\", \"mocked\", \"lifeless\", \"quarry\", \"hitch\", \"garnered\", \"clarice\", \"goodwin\", \"bodyguard\",\n    \"spree\", \"thinning\", \"eruption\", \"forceful\", \"manuals\", \"railroads\", \"moran\", \"boldly\", \"vance\", \"baffled\", \"scratches\", \"reopened\", \"hunch\", \"causality\", \"buckhead\", \"erroneous\",\n    \"workload\", \"ushered\", \"calculus\", \"despised\", \"preclude\", \"handheld\", \"dominic\", \"reeling\", \"nicholson\", \"conserve\", \"airtight\", \"accessory\", \"staining\", \"bustling\", \"stressing\", \"rosenthal\",\n    \"malignant\", \"dangled\", \"emulate\", \"authored\", \"clapping\", \"suitcases\", \"cluttered\", \"squadron\", \"tripp\", \"overdose\", \"recycle\", \"spraying\", \"aspire\", \"reforming\", \"banners\", \"gland\",\n    \"goauld\", \"glide\", \"vowel\", \"widen\", \"attacker\", \"citizenry\", \"plush\", \"puzzling\", \"freeing\", \"giles\", \"modifying\", \"embryonic\", \"harmon\", \"frida\", \"frosting\", \"attire\",\n    \"clumps\", \"walkway\", \"silenced\", \"quota\", \"mclean\", \"shrieked\", \"warsaw\", \"mythical\", \"prophetic\", \"resonate\", \"pitiful\", \"alleges\", \"percy\", \"casimir\", \"reassured\", \"denotes\",\n    \"liquidity\", \"lasers\", \"heirs\", \"grayson\", \"kodak\", \"reelected\", \"illegals\", \"perdue\", \"refining\", \"wilkinson\", \"heartland\", \"sauces\", \"tenor\", \"shortcut\", \"pleas\", \"valves\",\n    \"cortical\", \"fluent\", \"intrusive\", \"qualifies\", \"praising\", \"taxable\", \"finer\", \"gathers\", \"hallways\", \"vigil\", \"exposes\", \"thrift\", \"steinberg\", \"glazed\", \"embryo\", \"evoked\",\n    \"spaceship\", \"compel\", \"vanishing\", \"bumping\", \"barge\", \"agrarian\", \"thanking\", \"chinatown\", \"visualize\", \"annapolis\", \"twoday\", \"wooded\", \"emailed\", \"circa\", \"greenland\", \"rallying\",\n    \"ramon\", \"norma\", \"venerable\", \"anecdotes\", \"inject\", \"walkers\", \"accords\", \"optimize\", \"tracts\", \"newfound\", \"saloon\", \"audubon\", \"devout\", \"axial\", \"barris\", \"antidote\",\n    \"flutter\", \"vigor\", \"crave\", \"swann\", \"canyons\", \"additive\", \"signifies\", \"sensual\", \"gunshots\", \"squid\", \"cummings\", \"concise\", \"residing\", \"bannon\", \"polarized\", \"baggy\",\n    \"marches\", \"outpost\", \"toured\", \"deepened\", \"overgrown\", \"rapists\", \"medically\", \"exploits\", \"enraged\", \"boyle\", \"defective\", \"manafort\", \"cardio\", \"juries\", \"errands\", \"arches\",\n    \"franz\", \"mustang\", \"maternity\", \"macmillan\", \"steroid\", \"abdul\", \"crows\", \"negatives\", \"gorge\", \"resumes\", \"semantics\", \"keynote\", \"colbert\", \"trimmings\", \"downed\", \"elevate\",\n    \"manila\", \"verbs\", \"paypal\", \"pencils\", \"bruise\", \"bundles\", \"beets\", \"prosper\", \"mused\", \"leafy\", \"poetics\", \"delaying\", \"junkie\", \"analyzes\", \"slicing\", \"calhoun\",\n    \"bobbed\", \"feelin\", \"warmly\", \"strife\", \"showered\", \"heartfelt\", \"abduction\", \"envelopes\", \"sculptor\", \"gorilla\", \"tealc\", \"colby\", \"bosom\", \"skipper\", \"harms\", \"creaking\",\n    \"tellin\", \"exhales\", \"rabin\", \"embodies\", \"protector\", \"curses\", \"sweetly\", \"cleaners\", \"curving\", \"coincide\", \"spawning\", \"couture\", \"executing\", \"superiors\", \"gruesome\", \"arcade\",\n    \"endowed\", \"pooled\", \"mckinney\", \"rockville\", \"anime\", \"ebola\", \"budding\", \"starved\", \"offscreen\", \"relegated\", \"anthology\", \"soups\", \"stomped\", \"goodies\", \"harden\", \"nagging\",\n    \"undone\", \"bubbling\", \"stricken\", \"purposely\", \"ticks\", \"starship\", \"raspberry\", \"cersei\", \"applauded\", \"contour\", \"spooky\", \"namespace\", \"dramas\", \"tibetan\", \"wideeyed\", \"elective\",\n    \"vigilant\", \"sheikh\", \"primal\", \"virtuous\", \"millennia\", \"cradled\", \"camden\", \"stalk\", \"idealism\", \"charms\", \"twitching\", \"cashier\", \"hunts\", \"parachute\", \"scooter\", \"hurries\",\n    \"menacing\", \"callers\", \"classmate\", \"volcanoes\", \"fling\", \"cultured\", \"canals\", \"lenin\", \"pulpit\", \"spaced\", \"splits\", \"outweigh\", \"forsyth\", \"dripped\", \"teamwork\", \"solemnly\",\n    \"squared\", \"doesn\", \"tricked\", \"knack\", \"caveat\", \"slogans\", \"pitted\", \"treatise\", \"afterlife\", \"upheaval\", \"olsen\", \"reuben\", \"freakin\", \"wicker\", \"passer\", \"tactile\",\n    \"shalt\", \"townsend\", \"baldemar\", \"matrices\", \"partying\", \"jacobson\", \"pulses\", \"monsanto\", \"gifford\", \"untreated\", \"overtly\", \"tattooed\", \"whitaker\", \"shred\", \"creaked\", \"tallest\",\n    \"fraught\", \"ashtray\", \"bowel\", \"exited\", \"pathogen\", \"genomic\", \"drapes\", \"stripping\", \"furry\", \"cooke\", \"shedding\", \"nicolas\", \"osborne\", \"cohesive\", \"saliva\", \"crafting\",\n    \"massively\", \"arrivals\", \"labored\", \"deepening\", \"sunnis\", \"sharper\", \"waiters\", \"molded\", \"anomalies\", \"forearms\", \"ezekiel\", \"excitedly\", \"macon\", \"cartilage\", \"lecturer\", \"dives\",\n    \"petite\", \"residues\", \"designate\", \"clerical\", \"putnam\", \"pulsing\", \"endorsing\", \"kanye\", \"secede\", \"wrestle\", \"elitist\", \"handler\", \"whores\", \"skeletons\", \"gadget\", \"calming\",\n    \"impartial\", \"fracking\", \"robotics\", \"deficient\", \"stadiums\", \"redesign\", \"macho\", \"downfall\", \"comer\", \"intercom\", \"venera\", \"fencing\", \"hammering\", \"foothills\", \"wormhole\", \"takin\",\n    \"rumbled\", \"momentary\", \"mounts\", \"roommates\", \"withhold\", \"sediments\", \"weasel\", \"politico\", \"kennesaw\", \"departing\", \"enlarge\", \"megyn\", \"mourn\", \"clipboard\", \"medalist\", \"retro\",\n    \"savory\", \"quaid\", \"repent\", \"carney\", \"papal\", \"unheard\", \"blazer\", \"jerking\", \"creasy\", \"kingdoms\", \"instruct\", \"coiled\", \"hotline\", \"signify\", \"lynne\", \"theorem\",\n    \"genotype\", \"tessa\", \"mckenzie\", \"nicknamed\", \"surveying\", \"lange\", \"westbrook\", \"queue\", \"germs\", \"georges\", \"grossly\", \"whips\", \"cheeses\", \"taipei\", \"bribery\", \"basal\",\n    \"wrigley\", \"conveys\", \"casserole\", \"coughs\", \"bentley\", \"darting\", \"carton\", \"brewery\", \"bartlett\", \"lowlevel\", \"eleventh\", \"forensics\", \"handshake\", \"prudence\", \"spanning\", \"musharraf\",\n    \"revolving\", \"genders\", \"cartridge\", \"funerals\", \"pollock\", \"mckay\", \"jobless\", \"oblivion\", \"napkins\", \"degraded\", \"avail\", \"coastline\", \"chilean\", \"ramos\", \"liberia\", \"flashy\",\n    \"restrain\", \"codified\", \"polluted\", \"dormant\", \"shrieking\", \"salted\", \"clothed\", \"heirloom\", \"thumping\", \"marinade\", \"tenet\", \"beltway\", \"jails\", \"dignified\", \"roseanne\", \"humanism\",\n    \"glimpses\", \"lanka\", \"sacrament\", \"spiked\", \"ardent\", \"intro\", \"frowns\", \"erickson\", \"islanders\", \"breakout\", \"tariff\", \"campers\", \"reboot\", \"swanson\", \"chigurh\", \"daria\",\n    \"crackling\", \"customize\", \"promoters\", \"impede\", \"bethlehem\", \"swimmer\", \"brunswick\", \"sheffield\", \"leftists\", \"attest\", \"mackenzie\", \"roars\", \"snarled\", \"darkening\", \"lipid\", \"defends\",\n    \"josephine\", \"stinging\", \"auctions\", \"undue\", \"leach\", \"regal\", \"resultant\", \"frontiers\", \"jaguar\", \"spoiler\", \"coincided\", \"paterno\", \"medicinal\", \"secretive\", \"mamma\", \"doubtless\",\n    \"clinician\", \"energized\", \"fangs\", \"buyout\", \"weekday\", \"playbook\", \"caramel\", \"lapse\", \"whitfield\", \"spotting\", \"carnage\", \"realty\", \"mahmoud\", \"angst\", \"steiner\", \"funnel\",\n    \"polled\", \"purported\", \"diagonal\", \"plummeted\", \"hardships\", \"shortfall\", \"kerrey\", \"flake\", \"lawmaker\", \"subsidize\", \"sterritt\", \"funniest\", \"nacional\", \"brookings\", \"lando\", \"pollster\",\n    \"outcry\", \"senseless\", \"pedals\", \"feral\", \"regulates\", \"spitzer\", \"repealed\", \"lanier\", \"blankly\", \"lancet\", \"melbourne\", \"scents\", \"spacex\", \"dispersal\", \"seamless\", \"wearily\",\n    \"fluke\", \"deceived\", \"squeezes\", \"mutants\", \"howled\", \"stony\", \"tenuous\", \"richly\", \"weakest\", \"cater\", \"trance\", \"marxism\", \"recite\", \"undercut\", \"craters\", \"finnish\",\n    \"guillen\", \"inflict\", \"stockholm\", \"clubhead\", \"cavern\", \"wasteful\", \"melodies\", \"scrimmage\", \"brexit\", \"thirds\", \"shortened\", \"stemmed\", \"convent\", \"legalized\", \"busiest\", \"peruvian\",\n    \"fasting\", \"vacancy\", \"audits\", \"occupants\", \"penchant\", \"royalties\", \"cosmology\", \"hurriedly\", \"mcmahon\", \"reflex\", \"faiths\", \"stumbles\", \"sweetest\", \"endings\", \"cupcakes\", \"plugs\",\n    \"raping\", \"sofia\", \"chords\", \"waning\", \"dartmouth\", \"fallujah\", \"repressed\", \"glint\", \"trophies\", \"buttocks\", \"meyers\", \"spawn\", \"consoles\", \"bathrobe\", \"sprawl\", \"groupings\",\n    \"intrigue\", \"haynes\", \"contra\", \"twelfth\", \"dispose\", \"deceive\", \"averted\", \"afflicted\", \"composure\", \"praises\", \"causation\", \"salazar\", \"haste\", \"boardwalk\", \"adamant\", \"schuster\",\n    \"urgently\", \"corbett\", \"bluetooth\", \"ruben\", \"batted\", \"chore\", \"grounding\", \"narrower\", \"harlan\", \"kneel\", \"exported\", \"vending\", \"embassies\", \"saddened\", \"pained\", \"binge\",\n    \"equator\", \"minimized\", \"polio\", \"patented\", \"jolie\", \"bandage\", \"burying\", \"hover\", \"shutter\", \"exporting\", \"gospels\", \"chained\", \"gilded\", \"unfolds\", \"gazes\", \"cologne\",\n    \"begala\", \"excesses\", \"staffs\", \"escalated\", \"repairing\", \"inhale\", \"blurry\", \"putative\", \"fared\", \"fueling\", \"moans\", \"crossover\", \"skyfall\", \"clientele\", \"piety\", \"doughnuts\",\n    \"compute\", \"aires\", \"courtship\", \"limousine\", \"lonergan\", \"refute\", \"pretense\", \"neared\", \"lures\", \"ankara\", \"trudy\", \"captains\", \"chevron\", \"pastels\", \"sunken\", \"sixmonth\",\n    \"budge\", \"approving\", \"earnhardt\", \"occupancy\", \"selig\", \"justifies\", \"gowns\", \"groves\", \"lowkey\", \"barbed\", \"blooming\", \"mavericks\", \"dreamy\", \"reddit\", \"beginner\", \"restroom\",\n    \"stagnant\", \"plastered\", \"molina\", \"electing\", \"collagen\", \"parcells\", \"scowl\", \"fredricka\", \"algren\", \"amanpour\", \"shallots\", \"unreal\", \"snape\", \"stricter\", \"drenched\", \"oversaw\",\n    \"unifying\", \"cowardly\", \"shrek\", \"morsi\", \"strolling\", \"hypocrite\", \"wetland\", \"chechnya\", \"timid\", \"cartels\", \"hiked\", \"martyr\", \"plunging\", \"narrowing\", \"anchorage\", \"harassing\",\n    \"rembrandt\", \"overload\", \"tworun\", \"smallpox\", \"cesar\", \"bailouts\", \"celsius\", \"crippling\", \"douglass\", \"flask\", \"wakeup\", \"ticked\", \"faraway\", \"condensed\", \"oceanic\", \"winged\",\n    \"schiff\", \"lunchtime\", \"setbacks\", \"whirling\", \"chemist\", \"climbers\", \"rumpled\", \"bluegrass\", \"nathaniel\", \"dialect\", \"iphones\", \"uploaded\", \"chests\", \"surging\", \"melts\", \"obeyed\",\n    \"croatian\", \"nicest\", \"maneuvers\", \"penned\", \"toppled\", \"tripping\", \"planks\", \"allocate\", \"bloodshed\", \"follower\", \"kayak\", \"antics\", \"guthrie\", \"youngster\", \"subtests\", \"flashback\",\n    \"geoff\", \"reversing\", \"hooded\", \"shadowed\", \"rounding\", \"minimally\", \"quilts\", \"sporadic\", \"postcards\", \"everytime\", \"woken\", \"extracts\", \"postpone\", \"nurtured\", \"implanted\", \"disable\",\n    \"comforted\", \"deviant\", \"chatted\", \"monet\", \"confided\", \"pledges\", \"reddish\", \"tensed\", \"anglo\", \"comforts\", \"edinburgh\", \"diluted\", \"tweed\", \"visceral\", \"stubble\", \"recited\",\n    \"drugstore\", \"reared\", \"tabloids\", \"cures\", \"labyrinth\", \"fremont\", \"carcass\", \"troopers\", \"flimsy\", \"postings\", \"recognise\", \"memos\", \"trainees\", \"automaker\", \"dignan\", \"landry\",\n    \"practicum\", \"spores\", \"subsided\", \"isabelle\", \"bailed\", \"warped\", \"cheesy\", \"glands\", \"eyelashes\", \"schindler\", \"crispy\", \"achieves\", \"outlining\", \"datasets\", \"aversion\", \"miner\",\n    \"steed\", \"naples\", \"steward\", \"statesman\", \"grilling\", \"centrist\", \"oversize\", \"cadets\", \"magnolia\", \"crumble\", \"wont\", \"busting\", \"dials\", \"dreamt\", \"annals\", \"hampered\",\n    \"forgets\", \"couric\", \"smoother\", \"dorsey\", \"aback\", \"presided\", \"hurtful\", \"overwhelm\", \"swearing\", \"bellaire\", \"eyeballs\", \"accession\", \"scribbled\", \"splendor\", \"troupe\", \"galley\",\n    \"refresh\", \"nascent\", \"liquids\", \"runnin\", \"cliche\", \"smoothing\", \"hague\", \"perfected\", \"outages\", \"sheds\", \"starboard\", \"tripod\", \"sermons\", \"dialectic\", \"growls\", \"idealized\",\n    \"scorn\", \"kneels\", \"pharma\", \"neary\", \"mccormick\", \"gutierrez\", \"imprint\", \"repayment\", \"auditing\", \"flatly\", \"referees\", \"mixtures\", \"pitfalls\", \"royce\", \"juveniles\", \"lilies\",\n    \"memorized\", \"collier\", \"spacing\", \"swath\", \"katya\", \"georgian\", \"lunged\", \"panelist\", \"chaplain\", \"mobilized\", \"patriarch\", \"congruent\", \"fibrosis\", \"dodging\", \"murmurs\", \"bellevue\",\n    \"wager\", \"altman\", \"highrise\", \"blinks\", \"awaken\", \"bashar\", \"genotypes\", \"rentals\", \"leopard\", \"accorded\", \"foreigner\", \"feldman\", \"woolf\", \"positives\", \"tumblr\", \"ripples\",\n    \"kingston\", \"jerseys\", \"maximal\", \"exerted\", \"conserved\", \"scarves\", \"curing\", \"denis\", \"relic\", \"patterned\", \"tinted\", \"monologue\", \"lament\", \"peeking\", \"perplexed\", \"wilde\",\n    \"securely\", \"mascara\", \"fifteenth\", \"louisa\", \"conferred\", \"commits\", \"beckoned\", \"bandura\", \"appliance\", \"allure\", \"unravel\", \"overcoat\", \"optimized\", \"saviour\", \"undertook\", \"molested\",\n    \"chemo\", \"shrunk\", \"traverse\", \"ipads\", \"twoweek\", \"lamented\", \"brooding\", \"breathes\", \"bulgaria\", \"bungalow\", \"macbook\", \"gliding\", \"regis\", \"removable\", \"exhale\", \"airwaves\",\n    \"anglican\", \"rendition\", \"chaired\", \"accuses\", \"unload\", \"colours\", \"affirms\", \"wacky\", \"swimmers\", \"underdog\", \"moderated\", \"viola\", \"clones\", \"intending\", \"schiller\", \"tonic\",\n    \"pinot\", \"grooming\", \"reckoning\", \"pondered\", \"lumps\", \"absurdity\", \"antiwar\", \"allegheny\", \"fortified\", \"rangel\", \"cranky\", \"plume\", \"digestion\", \"repertory\", \"ballard\", \"davenport\",\n    \"puberty\", \"bonded\", \"pyramids\", \"comedians\", \"serenity\", \"converse\", \"flavored\", \"ignited\", \"georgians\", \"speck\", \"ascribed\", \"pastures\", \"chives\", \"theorist\", \"sculpted\", \"sansa\",\n    \"mcbride\", \"sagged\", \"receding\", \"densely\", \"batches\", \"valet\", \"angelina\", \"crowe\", \"fliers\", \"earners\", \"armey\", \"glimmer\", \"heady\", \"medley\", \"landlords\", \"dumps\",\n    \"gillespie\", \"mosul\", \"chassis\", \"framers\", \"consonant\", \"madeline\", \"deluxe\", \"daryl\", \"markings\", \"odors\", \"aubrey\", \"piers\", \"fonts\", \"amassed\", \"doorknob\", \"twigs\",\n    \"filth\", \"underside\", \"booklet\", \"abiding\", \"encrypted\", \"accuser\", \"cornmeal\", \"avert\", \"saucer\", \"expires\", \"drawbacks\", \"revisited\", \"dwarfs\", \"darts\", \"redefine\", \"carpets\",\n    \"shelton\", \"salinas\", \"rotated\", \"rightful\", \"projector\", \"groomed\", \"sidelined\", \"tacos\", \"pesto\", \"worrisome\", \"rapport\", \"trough\", \"bargains\", \"suicides\", \"cameraman\", \"dries\",\n    \"hartman\", \"spatula\", \"texted\", \"effluent\", \"harshly\", \"paulson\", \"warily\", \"bestowed\", \"foggy\", \"overcame\", \"paleo\", \"resin\", \"parable\", \"converge\", \"crunchy\", \"avian\",\n    \"forwards\", \"princes\", \"minivan\", \"confer\", \"finalist\", \"modesty\", \"bowing\", \"tilting\", \"mullen\", \"mantel\", \"sided\", \"flopped\", \"padding\", \"docking\", \"beginners\", \"grate\",\n    \"atkinson\", \"dialogues\", \"appetizer\", \"connector\", \"underwood\", \"fanned\", \"juniors\", \"glided\", \"loophole\", \"sightings\", \"taping\", \"canons\", \"colossal\", \"spoilers\", \"tackled\", \"thrived\",\n    \"sandstone\", \"aidan\", \"campfire\", \"allright\", \"soybeans\", \"tagging\", \"encoded\", \"usability\", \"melodic\", \"wheaton\", \"sloping\", \"famer\", \"sparkled\", \"checkout\", \"flagged\", \"resented\",\n    \"sharpened\", \"greased\", \"handouts\", \"plowed\", \"parochial\", \"budgetary\", \"retreats\", \"estranged\", \"radon\", \"expos\", \"wilkins\", \"provoking\", \"takers\", \"fullerton\", \"elderman\", \"enlist\",\n    \"stately\", \"borges\", \"attaining\", \"alligator\", \"dismantle\", \"analogies\", \"mouthful\", \"balkans\", \"manifests\", \"bandages\", \"grenades\", \"judah\", \"silicone\", \"barthes\", \"grits\", \"scrubbing\",\n    \"anecdote\", \"briefings\", \"healthful\", \"arisen\", \"shielded\", \"bribes\", \"ashton\", \"roundup\", \"snort\", \"whence\", \"ritchie\", \"defer\", \"straits\", \"veiled\", \"revolves\", \"escalate\",\n    \"destroyer\", \"relics\", \"lugar\", \"coldly\", \"feeny\", \"flares\", \"apathy\", \"tamara\", \"artisans\", \"skates\", \"pendulum\", \"zachary\", \"commuting\", \"ballad\", \"vowels\", \"heroism\",\n    \"presiding\", \"cutbacks\", \"gulped\", \"murals\", \"darla\", \"forging\", \"ovarian\", \"limbo\", \"tutors\", \"flailing\", \"ortega\", \"banished\", \"spits\", \"pedestal\", \"reliant\", \"durant\",\n    \"boosts\", \"friedrich\", \"quark\", \"proxies\", \"shortest\", \"breads\", \"allegory\", \"deserts\", \"shiites\", \"pollsters\", \"watered\", \"jeter\", \"excludes\", \"prada\", \"sixyear\", \"tasked\",\n    \"landuse\", \"streamed\", \"wimbledon\", \"reigning\", \"terminals\", \"grieve\", \"quarrel\", \"drumming\", \"melon\", \"unleash\", \"impeached\", \"widows\", \"overalls\", \"rafters\", \"helper\", \"jamaican\",\n    \"molding\", \"prickly\", \"outputs\", \"hasty\", \"caretaker\", \"closets\", \"noriega\", \"onesided\", \"modestly\", \"coasts\", \"waxed\", \"propel\", \"mingled\", \"palate\", \"cashmere\", \"coals\",\n    \"lizards\", \"lashed\", \"empires\", \"sedentary\", \"cropped\", \"puffs\", \"mistrust\", \"untold\", \"bowers\", \"rapes\", \"sling\", \"perceives\", \"darkly\", \"crowned\", \"pondering\", \"delusions\",\n    \"harmonic\", \"regulator\", \"farthest\", \"lacey\", \"dusted\", \"hawking\", \"redeem\", \"brochures\", \"graded\", \"athena\", \"doorman\", \"schematic\", \"topanga\", \"ledger\", \"clouded\", \"completes\",\n    \"alluded\", \"underage\", \"brigham\", \"rodents\", \"bayesian\", \"stripe\", \"thoreau\", \"acidic\", \"marshes\", \"courier\", \"musicals\", \"warhol\", \"heller\", \"rehnquist\", \"clams\", \"annan\",\n    \"tentacles\", \"baroque\", \"oconnell\", \"thickened\", \"crowding\", \"fullness\", \"aiding\", \"waitin\", \"marshals\", \"fedex\", \"backside\", \"grandeur\", \"longhorns\", \"handbag\", \"dictators\", \"penal\",\n    \"beaumont\", \"outings\", \"swiveled\", \"rhymes\", \"defeats\", \"menhaden\", \"partnered\", \"hermione\", \"shootout\", \"revising\", \"ontology\", \"twinkies\", \"faulkner\", \"grail\", \"rippling\", \"readable\",\n    \"affirming\", \"detergent\", \"purgatory\", \"hattie\", \"cranes\", \"mansfield\", \"ridley\", \"redress\", \"detriment\", \"newsom\", \"entrusted\", \"payers\", \"squatting\", \"westward\", \"syringe\", \"mcguire\",\n    \"errand\", \"bowels\", \"kimble\", \"ethically\", \"bellowed\", \"hangar\", \"gurney\", \"takeoff\", \"brunette\", \"elise\", \"pharaoh\", \"willful\", \"topdown\", \"alaskan\", \"drugged\", \"bandwagon\",\n    \"blanc\", \"deepen\", \"preachers\", \"binds\", \"darden\", \"keepers\", \"alito\", \"humour\", \"rippled\", \"havin\", \"wooten\", \"emirates\", \"clogged\", \"downey\", \"slaying\", \"wrestled\",\n    \"scopes\", \"dutifully\", \"butte\", \"eurozone\", \"crazed\", \"hanged\", \"hardcopy\", \"excerpted\", \"orient\", \"bluntly\", \"severus\", \"trailhead\", \"raptors\", \"crucified\", \"descartes\", \"siberia\",\n    \"bleach\", \"unmanned\", \"flinch\", \"picket\", \"whined\", \"archaic\", \"galleria\", \"alaric\", \"passports\", \"surpass\", \"workable\", \"gravely\", \"wholesome\", \"blackwell\", \"cleric\", \"hayward\",\n    \"stifling\", \"landfills\", \"lyrical\", \"canning\", \"bumpy\", \"soybean\", \"citigroup\", \"disarm\", \"abstracts\", \"playin\", \"proverbs\", \"raided\", \"molten\", \"octopus\", \"charger\", \"vinci\",\n    \"balding\", \"healer\", \"constable\", \"guadalupe\", \"habitual\", \"squeak\", \"pandering\", \"distort\", \"fashions\", \"entailed\", \"wares\", \"bleached\", \"electors\", \"stitched\", \"chiang\", \"mcdowell\",\n    \"midwife\", \"fauna\", \"tubing\", \"mythic\", \"masking\", \"splinter\", \"scarecrow\", \"drains\", \"briefs\", \"tillman\", \"shrewd\", \"legions\", \"excavated\", \"stretcher\", \"shyly\", \"robberies\",\n    \"narrated\", \"tonya\", \"segal\", \"creak\", \"exiled\", \"predation\", \"ferns\", \"jacks\", \"swine\", \"scanners\", \"staffed\", \"mockery\", \"geithner\", \"wishful\", \"curators\", \"andean\",\n    \"derrida\", \"hines\", \"borden\", \"sergei\", \"martyrs\", \"comedies\", \"resists\", \"evanston\", \"buckled\", \"condos\", \"delights\", \"stashed\", \"montage\", \"pretends\", \"trudged\", \"dover\",\n    \"angier\", \"bluray\", \"graphical\", \"marveled\", \"sloane\", \"marcy\", \"waging\", \"comfy\", \"vetoed\", \"levers\", \"gaines\", \"magnets\", \"malik\", \"marquee\", \"darlin\", \"slashing\",\n    \"universes\", \"browne\", \"meteors\", \"quinones\", \"squads\", \"decipher\", \"rowland\", \"miley\", \"allotted\", \"ensued\", \"tabletop\", \"nested\", \"cyclical\", \"supervise\", \"statehood\", \"respite\",\n    \"bathe\", \"elsie\", \"tillotson\", \"dashing\", \"harming\", \"posited\", \"fullest\", \"enslaved\", \"forcibly\", \"unesco\", \"nameless\", \"deploying\", \"shelling\", \"trolley\", \"triad\", \"bordering\",\n    \"finley\", \"thawed\", \"cooker\", \"unsettled\", \"overrun\", \"resonates\", \"operas\", \"facet\", \"markup\", \"proponent\", \"dawned\", \"telltale\", \"alleys\", \"cafes\", \"unfit\", \"creased\",\n    \"summaries\", \"pores\", \"blowout\", \"outfitted\", \"magnified\", \"electrode\", \"wanders\", \"sandler\", \"sprays\", \"menstrual\", \"herrera\", \"visuals\", \"wildfire\", \"fingered\", \"crickets\", \"arrays\",\n    \"glares\", \"maguire\", \"aches\", \"oxidative\", \"durbin\", \"slideshow\", \"manic\", \"crockett\", \"bleachers\", \"sargent\", \"shopper\", \"censure\", \"knockout\", \"mussels\", \"fairs\", \"stamberg\",\n    \"forage\", \"yearbook\", \"virginity\", \"importing\", \"bouts\", \"wondrous\", \"agonizing\", \"colonized\", \"nairobi\", \"impromptu\", \"scripted\", \"postcold\", \"shrub\", \"strangest\", \"allout\", \"homered\",\n    \"gibbons\", \"utterance\", \"moths\", \"posits\", \"nerds\", \"snowfall\", \"travelled\", \"suppl\", \"refinery\", \"imitating\", \"offence\", \"salts\", \"withered\", \"lucia\", \"motivates\", \"crawls\",\n    \"uneasily\", \"deutsche\", \"marquette\", \"breeders\", \"puffing\", \"clawed\", \"unfounded\", \"pointer\", \"variously\", \"screech\", \"necrosis\", \"foresight\", \"equated\", \"obscurity\", \"camped\", \"scoreless\",\n    \"bounces\", \"clutches\", \"nebulae\", \"furrowed\", \"lanterns\", \"crooks\", \"soiled\", \"judas\", \"fillets\", \"ayers\", \"condit\", \"idols\", \"digitally\", \"paychecks\", \"neuronal\", \"digit\",\n    \"dwellers\", \"degrading\", \"bordered\", \"keyboards\", \"bunkers\", \"caviar\", \"boxed\", \"slumber\", \"livin\", \"fractions\", \"summons\", \"proctor\", \"publicist\", \"frankfurt\", \"reeds\", \"whirlwind\",\n    \"stardom\", \"cowards\", \"combating\", \"reinvent\", \"stroller\", \"shreds\", \"tickled\", \"raked\", \"harrowing\", \"crouching\", \"hagel\", \"sockets\", \"dumbbell\", \"faked\", \"thwart\", \"engraving\",\n    \"genomes\", \"crunching\", \"septic\", \"wards\", \"sacked\", \"racked\", \"enticing\", \"manova\", \"harass\", \"memorize\", \"dogged\", \"clippings\", \"cottages\", \"ingram\", \"resided\", \"davey\",\n    \"intifada\", \"weston\", \"bridging\", \"impeach\", \"kenyan\", \"cucumbers\", \"colette\", \"holloway\", \"conveying\", \"grappling\", \"scrawled\", \"affords\", \"pickled\", \"tripoli\", \"clive\", \"sunflower\",\n    \"constrain\", \"downing\", \"meddling\", \"lumia\", \"chimed\", \"pointedly\", \"spaniards\", \"pataki\", \"opting\", \"charters\", \"calendars\", \"foresee\", \"blueberry\", \"crier\", \"knopf\", \"enclave\",\n    \"dreary\", \"vaughan\", \"lumpy\", \"ravaged\", \"engulfed\", \"earthy\", \"spewing\", \"sanjay\", \"capsules\", \"closures\", \"watchful\", \"tendon\", \"wrongs\", \"animosity\", \"beatty\", \"haitians\",\n    \"cultivars\", \"fandom\", \"triumphs\", \"macintosh\", \"prosocial\", \"westeros\", \"clerics\", \"worsening\", \"apostolic\", \"warheads\", \"milling\", \"greeley\", \"larsen\", \"acuity\", \"rebuttal\", \"genie\",\n    \"cholera\", \"commenced\", \"romanian\", \"emile\", \"previews\", \"covariate\", \"tenderly\", \"ethel\", \"underfoot\", \"slimy\", \"legalize\", \"spade\", \"nordic\", \"zipped\", \"handlers\", \"barbour\",\n    \"entangled\", \"tropics\", \"detour\", \"repubs\", \"picky\", \"smirked\", \"swells\", \"humphries\", \"creditor\", \"flaps\", \"staterun\", \"iteration\", \"seduced\", \"rasmussen\", \"fanatics\", \"rescuers\",\n    \"steamy\", \"intensify\", \"streisand\", \"smugglers\", \"bedrock\", \"dukakis\", \"shatter\", \"impulsive\", \"excursion\", \"ringed\", \"shrieks\", \"cripple\", \"perilous\", \"wharton\", \"fateful\", \"compile\",\n    \"donvan\", \"collide\", \"scallions\", \"glacial\", \"ahold\", \"shorty\", \"approves\", \"ridiculed\", \"overrated\", \"playfully\", \"denounce\", \"upholding\", \"disciple\", \"mascot\", \"garza\", \"corral\",\n    \"countess\", \"holyfield\", \"cannes\", \"mormonism\", \"homegrown\", \"damian\", \"mariah\", \"bandit\", \"fullsize\", \"thrashing\", \"selects\", \"crackled\", \"grizzlies\", \"blushing\", \"profane\", \"limitless\",\n    \"middleton\", \"bigoted\", \"cheaply\", \"felon\", \"slanted\", \"moira\", \"minions\", \"graying\", \"sleigh\", \"sanctity\", \"scrooge\", \"reread\", \"bacterium\", \"sufferers\", \"conveyor\", \"sweeter\",\n    \"dinah\", \"defied\", \"gamer\", \"vibrating\", \"agitation\", \"homey\", \"freckled\", \"popup\", \"nineties\", \"epidemics\", \"dismayed\", \"recruiter\", \"molds\", \"reptiles\", \"catchy\", \"threaded\",\n    \"rusher\", \"wildfires\", \"venetian\", \"striding\", \"kelso\", \"mayfield\", \"collage\", \"kellyanne\", \"absorbs\", \"flushing\", \"montaigne\", \"chills\", \"devoured\", \"dulles\", \"creams\", \"giovanni\",\n    \"dialysis\", \"shielding\", \"snatches\", \"caribou\", \"looped\", \"dominique\", \"consumes\", \"margo\", \"fleece\", \"damning\", \"priscilla\", \"enacting\", \"prettier\", \"botched\", \"raged\", \"creeks\",\n    \"snail\", \"eagerness\", \"modular\", \"whitehead\", \"warmup\", \"forwarded\", \"flavorful\", \"knoxville\", \"snapshots\", \"robbers\", \"flapped\", \"raylan\", \"emmanuel\", \"erode\", \"forgo\", \"deceit\",\n    \"altruism\", \"navigator\", \"rearing\", \"redeemed\", \"prodigy\", \"linens\", \"drawback\", \"envied\", \"sketched\", \"tacit\", \"jilly\", \"flicking\", \"cullen\", \"carlisle\", \"neutrinos\", \"corny\",\n    \"lucian\", \"splayed\", \"dusting\", \"matted\", \"outburst\", \"wildcard\", \"envisions\", \"globular\", \"farce\", \"thrusting\", \"issuer\", \"lineages\", \"allege\", \"empress\", \"semblance\", \"shafts\",\n    \"mandarin\", \"veranda\", \"tapestry\", \"courting\", \"dizzying\", \"rooftops\", \"revoked\", \"scrolls\", \"buffs\", \"scolded\", \"anarchist\", \"heaviest\", \"algerian\", \"squealed\", \"ticker\", \"issuance\",\n    \"triangles\", \"bakhtin\", \"underlie\", \"hemmer\", \"delores\", \"immediacy\", \"waller\", \"thwarted\", \"frontline\", \"reston\", \"ignite\", \"medial\", \"worsened\", \"unmet\", \"cornelius\", \"canola\",\n    \"dissident\", \"grapple\", \"esoteric\", \"scams\", \"flatter\", \"innovate\", \"emanating\", \"paving\", \"thrives\", \"oneman\", \"stamina\", \"broadened\", \"sentient\", \"flexed\", \"langley\", \"mediators\",\n    \"jimenez\", \"searing\", \"hitched\", \"obedient\", \"strata\", \"daine\", \"leahy\", \"willed\", \"confronts\", \"scurried\", \"wildest\", \"foraging\", \"patchwork\", \"eaton\", \"excision\", \"variances\",\n    \"pryor\", \"hacks\", \"fours\", \"fondness\", \"dickerson\", \"slider\", \"drummond\", \"droplets\", \"bowden\", \"momentous\", \"trending\", \"refill\", \"callahan\", \"mcintyre\", \"musty\", \"billowing\",\n    \"fountains\", \"gaped\", \"unchecked\", \"centrally\", \"hardline\", \"ascending\", \"sorely\", \"raccoon\", \"boomed\", \"cleanse\", \"valuing\", \"complicit\", \"kimmel\", \"slabs\", \"centres\", \"clearcut\",\n    \"stomping\", \"winslow\", \"putts\", \"snowstorm\", \"moustache\", \"actuality\", \"flooring\", \"shrines\", \"likened\", \"graft\", \"evolves\", \"decaying\", \"mccann\", \"wheeling\", \"inched\", \"windfall\",\n    \"mammalian\", \"walden\", \"overflow\", \"starch\", \"roamed\", \"maude\", \"droid\", \"outlawed\", \"impunity\", \"spatially\", \"maids\", \"exiting\", \"crocodile\", \"entre\", \"knowhow\", \"prism\",\n    \"writhing\", \"agreeable\", \"stirs\", \"bradshaw\", \"contrived\", \"schwab\", \"riparian\", \"bitcoin\", \"distilled\", \"steeped\", \"burgess\", \"plopped\", \"alloy\", \"failings\", \"smuggled\", \"artworks\",\n    \"rustle\", \"unsub\", \"kernels\", \"analysed\", \"shortcuts\", \"brits\", \"clubface\", \"comical\", \"liberate\", \"demonic\", \"impasse\", \"ascension\", \"populous\", \"jumble\", \"craftsman\", \"mania\",\n    \"boyhood\", \"kingwood\", \"recital\", \"buttoned\", \"thumped\", \"armenian\", \"traitors\", \"complied\", \"blaring\", \"cyclist\", \"prescott\", \"talley\", \"noodle\", \"equities\", \"battista\", \"sealing\",\n    \"fainted\", \"negligent\", \"seawater\", \"polyester\", \"polygraph\", \"whacked\", \"conduit\", \"hyperbole\", \"referent\", \"washer\", \"cronies\", \"randi\", \"bronco\", \"ralston\", \"posse\", \"whirl\",\n    \"scented\", \"glassy\", \"combs\", \"tatum\", \"grimy\", \"toobin\", \"circulate\", \"reborn\", \"brighten\", \"unearthed\", \"mayan\", \"antlers\", \"gearing\", \"attuned\", \"entice\", \"mules\",\n    \"diligent\", \"grooves\", \"natalee\", \"conyers\", \"tiananmen\", \"sniffs\", \"effected\", \"grownups\", \"swirls\", \"wield\", \"pedaling\", \"descends\", \"prettiest\", \"litany\", \"matalin\", \"visavis\",\n    \"syntactic\", \"grouse\", \"ejected\", \"surfer\", \"wading\", \"mcdaniel\", \"heresy\", \"floured\", \"geraldine\", \"diversify\", \"radiance\", \"millet\", \"pelvic\", \"savages\", \"succumbed\", \"dearth\",\n    \"gutted\", \"prologue\", \"exertion\", \"glorified\", \"smashes\", \"bolstered\", \"larval\", \"andes\", \"reciting\", \"dieting\", \"camper\", \"stinky\", \"jackpot\", \"islamabad\", \"servaas\", \"glittered\",\n    \"daryn\", \"swamps\", \"keenly\", \"stills\", \"gleaned\", \"amnesia\", \"wellbeing\", \"willfully\", \"rockdale\", \"borrower\", \"premieres\", \"arduous\", \"sighting\", \"finesse\", \"artus\", \"shorten\",\n    \"vases\", \"modelling\", \"grader\", \"legality\", \"sprouted\", \"coulter\", \"melanoma\", \"coups\", \"craze\", \"brownies\", \"melville\", \"ovation\", \"monoxide\", \"kandahar\", \"tombs\", \"elemental\",\n    \"skinned\", \"eastman\", \"suffrage\", \"boyish\", \"headon\", \"eaters\", \"cornered\", \"modality\", \"waterways\", \"lowry\", \"xander\", \"softness\", \"globes\", \"podcasts\", \"revert\", \"ramps\",\n    \"scorched\", \"latte\", \"fonda\", \"stucco\", \"heaps\", \"commend\", \"basing\", \"cradling\", \"leakage\", \"murtaugh\", \"coupe\", \"macvicar\", \"spiraling\", \"stifled\", \"halting\", \"trapping\",\n    \"skillful\", \"stables\", \"degrade\", \"squint\", \"panelists\", \"greets\", \"wrenched\", \"pellets\", \"juncture\", \"roused\", \"portman\", \"furnish\", \"shutout\", \"lilburn\", \"sprained\", \"remarried\",\n    \"boosters\", \"trimming\", \"loudoun\", \"alters\", \"lambs\", \"studs\", \"tractors\", \"replete\", \"lifespan\", \"subtypes\", \"wrongful\", \"karaoke\", \"compliant\", \"glows\", \"rancho\", \"bourdieu\",\n    \"genealogy\", \"atonement\", \"namesake\", \"whoopi\", \"slums\", \"janeiro\", \"stair\", \"youll\", \"poole\", \"crowns\", \"aerobics\", \"stallion\", \"cylinders\", \"frosted\", \"upton\", \"revamped\",\n    \"jayz\", \"shingles\", \"fetched\", \"twofold\", \"senegal\", \"gulls\", \"foregoing\", \"throng\", \"thorns\", \"analyse\", \"dodged\", \"tinkering\", \"alexa\", \"marla\", \"chanted\", \"gorlen\",\n    \"morphin\", \"propriety\", \"widowed\", \"tremor\", \"signified\", \"gnarled\", \"warms\", \"fringes\", \"intl\", \"spooked\", \"collided\", \"elspeth\", \"lasagna\", \"reith\", \"garnett\", \"coils\",\n    \"disarray\", \"tailback\", \"frosty\", \"tillerson\", \"elisabeth\", \"thine\", \"leeks\", \"groping\", \"stocky\", \"righty\", \"finalized\", \"unease\", \"exclaims\", \"lauer\", \"snowden\", \"casing\",\n    \"peptide\", \"cavernous\", \"caress\", \"matured\", \"streep\", \"rehearsed\", \"hardcover\", \"coolly\", \"robby\", \"brunt\", \"geniuses\", \"footwear\", \"swarming\", \"clashed\", \"elegantly\", \"leveraged\",\n    \"mastering\", \"dulaney\", \"flowered\", \"relapse\", \"rodent\", \"acreage\", \"glinting\", \"sleepless\", \"encased\", \"peregrine\", \"illogical\", \"tacky\", \"attaching\", \"farrakhan\", \"evocative\", \"parades\",\n    \"musically\", \"quart\", \"improvise\", \"umpires\", \"couches\", \"wolff\", \"grimes\", \"trumps\", \"haunts\", \"commence\", \"wrapper\", \"earmarks\", \"spherical\", \"micah\", \"juniper\", \"allegra\",\n    \"lowly\", \"margarita\", \"whatnot\", \"petersen\", \"patched\", \"coerced\", \"shellfish\", \"crossings\", \"antigen\", \"pinning\", \"bared\", \"conroe\", \"prevails\", \"doorways\", \"stirfry\", \"collars\",\n    \"gritted\", \"augment\", \"clair\", \"kendrick\", \"felons\", \"settler\", \"fasten\", \"unloaded\", \"reverie\", \"hanoi\", \"purified\", \"pretext\", \"lightest\", \"chipotle\", \"carlyle\", \"hayek\",\n    \"mcintosh\", \"postage\", \"hodges\", \"superfund\", \"cruisers\", \"eternally\", \"platte\", \"swooped\", \"tendrils\", \"complying\", \"leadoff\", \"chernobyl\", \"rossi\", \"matisse\", \"rehearse\", \"flustered\",\n    \"undressed\", \"clasp\", \"handguns\", \"chartered\", \"squeal\", \"friggin\", \"formality\", \"ramsay\", \"bugging\", \"estonia\", \"affleck\", \"espoused\", \"unitary\", \"lifetimes\", \"hitherto\", \"moret\",\n    \"whooping\", \"radial\", \"reigns\", \"donahue\", \"treasured\", \"hubris\", \"newborns\", \"hamid\", \"elisa\", \"dryly\", \"circadian\", \"raincoat\", \"squirmed\", \"marbles\", \"ducking\", \"dumbbells\",\n    \"strives\", \"russo\", \"sonar\", \"parka\", \"subverted\", \"doubly\", \"grainy\", \"stools\", \"fairfield\", \"ranches\", \"falwell\", \"addison\", \"abramson\", \"skied\", \"mingle\", \"moroccan\",\n    \"roomy\", \"ascended\", \"reckoned\", \"netting\", \"symbolize\", \"gusts\", \"backups\", \"bookcase\", \"movin\", \"thicket\", \"cadre\", \"waffles\", \"sitter\", \"federer\", \"jabbed\", \"newscast\",\n    \"precepts\", \"seeped\", \"taxfree\", \"forested\", \"licks\", \"nicki\", \"sputtered\", \"curtail\", \"aromatic\", \"canvases\", \"hathaway\", \"wrenching\", \"reeve\", \"guerrero\", \"drinkers\", \"intercut\",\n    \"pleases\", \"bubbly\", \"skewers\", \"mined\", \"gracias\", \"grazed\", \"likable\", \"untie\", \"perished\", \"boutiques\", \"spotify\", \"glistened\", \"eruptions\", \"riddled\", \"frenchman\", \"mobil\",\n    \"youii\", \"bellies\", \"distaste\", \"grandkids\", \"usaid\", \"lauded\", \"oneday\", \"laidback\", \"arterial\", \"barbaric\", \"blossomed\", \"budgeting\", \"sneaked\", \"basins\", \"redshirt\", \"streetcar\",\n    \"goldwater\", \"cascades\", \"exogenous\", \"garry\", \"mccall\", \"wavering\", \"deadliest\", \"kayla\", \"confesses\", \"shrapnel\", \"antelope\", \"yellowed\", \"foxes\", \"allusion\", \"langdon\", \"pickups\",\n    \"worded\", \"condone\", \"primates\", \"cleavage\", \"eater\", \"networked\", \"darfur\", \"chimes\", \"syndicate\", \"annoy\", \"delve\", \"critters\", \"dogmatic\", \"retiree\", \"brianna\", \"mourners\",\n    \"harbors\", \"slalom\", \"lefties\", \"sittin\", \"tacked\", \"maris\", \"alfonso\", \"pastries\", \"chimps\", \"privy\", \"starched\", \"cello\", \"harkin\", \"lentils\", \"carefree\", \"coffers\",\n    \"blazed\", \"tweaks\", \"pedigree\", \"veritable\", \"chats\", \"dazzle\", \"reviving\", \"matheny\", \"sheppard\", \"billings\", \"prius\", \"woodson\", \"plissken\", \"spokane\", \"kepler\", \"rescuing\",\n    \"hermann\", \"marquez\", \"glitch\", \"pretrial\", \"disperse\", \"tristan\", \"scallops\", \"pavel\", \"scrawny\", \"selma\", \"plantings\", \"blight\", \"heron\", \"apologise\", \"keynes\", \"latency\",\n    \"radiator\", \"textured\", \"annabel\", \"cleverly\", \"coworker\", \"foray\", \"tutorials\", \"genitals\", \"heaped\", \"showcases\", \"annotated\", \"storied\", \"protons\", \"pigments\", \"peels\", \"hatched\",\n    \"slurs\", \"sisko\", \"dozed\", \"entrances\", \"greener\", \"trappings\", \"remington\", \"slander\", \"trashed\", \"rancher\", \"isolating\", \"bigots\", \"heartless\", \"beasley\", \"carousel\", \"shuttered\",\n    \"styled\", \"credence\", \"deranged\", \"realtors\", \"enveloped\", \"primers\", \"hastert\", \"walled\", \"mortals\", \"issuers\", \"breezy\", \"dilution\", \"landfall\", \"rivalries\", \"staked\", \"wideopen\",\n    \"sudanese\", \"paisley\", \"pamphlets\", \"colmes\", \"overruled\", \"drooping\", \"shimmered\", \"wallets\", \"defies\", \"parched\", \"pastime\", \"deflect\", \"barlow\", \"gripes\", \"mainline\", \"citadel\",\n    \"notoriety\", \"rationing\", \"laments\", \"jindal\", \"pacey\", \"alienate\", \"euphoria\", \"salinity\", \"haidt\", \"plugins\", \"bidder\", \"strenuous\", \"seeping\", \"wavered\", \"centauri\", \"prolong\",\n    \"sheik\", \"campsite\", \"deluded\", \"slits\", \"angler\", \"conundrum\", \"brood\", \"stoves\", \"dwellings\", \"shrinks\", \"breached\", \"wakefield\", \"impacting\", \"celiac\", \"hendricks\", \"trampled\",\n    \"balked\", \"vistas\", \"mangled\", \"perils\", \"bette\", \"offroad\", \"keyes\", \"whoop\", \"dreamers\", \"midair\", \"profess\", \"taxonomic\", \"shunned\", \"licensure\", \"droughts\", \"succumb\",\n    \"heats\", \"ferrell\", \"macedonia\", \"polishing\", \"opposites\", \"innocuous\", \"bigot\", \"primed\", \"bandits\", \"merritt\", \"menlo\", \"proofs\", \"blurring\", \"topnotch\", \"vignettes\", \"wherefore\",\n    \"sketchy\", \"dearborn\", \"vandalism\", \"parisian\", \"healy\", \"humbled\", \"brandt\", \"sparking\", \"scoffed\", \"hammock\", \"saith\", \"fictions\", \"shorthand\", \"stacking\", \"schiavo\", \"habitable\",\n    \"minuscule\", \"cabaret\", \"cameo\", \"waterway\", \"vigilance\", \"severance\", \"latitudes\", \"professed\", \"proton\", \"conley\", \"sweats\", \"quivered\", \"resection\", \"tropes\", \"brill\", \"raters\",\n    \"appease\", \"geologist\", \"henson\", \"unsteady\", \"sternly\", \"renters\", \"donned\", \"receded\", \"recharge\", \"raffalon\", \"prodded\", \"shameless\", \"impart\", \"hairline\", \"overlooks\", \"barns\",\n    \"ivanka\", \"earnestly\", \"bridal\", \"unloading\", \"voicing\", \"trawl\", \"kennedys\", \"juarez\", \"capers\", \"sprinted\", \"verde\", \"backlog\", \"forte\", \"manicured\", \"pendleton\", \"phonemic\",\n    \"filler\", \"baines\", \"onlookers\", \"palaces\", \"redirect\", \"levees\", \"satisfies\", \"rewritten\", \"fruition\", \"pantheon\", \"agility\", \"childlike\", \"dropouts\", \"seton\", \"albanian\", \"tranquil\",\n    \"blanks\", \"frenzied\", \"salvaged\", \"deletion\", \"jogged\", \"stave\", \"parasitic\", \"cadence\", \"geordi\", \"simms\", \"lifeline\", \"venous\", \"vitals\", \"recapture\", \"whitetail\", \"salience\",\n    \"paine\", \"dropbox\", \"pokes\", \"handset\", \"waterfowl\", \"polenta\", \"vertigo\", \"bunched\", \"masterful\", \"wielding\", \"plumes\", \"werent\", \"garages\", \"ellington\", \"delicacy\", \"pendant\",\n    \"meatballs\", \"heralded\", \"satanic\", \"embattled\", \"bowles\", \"reinhardt\", \"propane\", \"decoys\", \"authorial\", \"conjured\", \"rotted\", \"phased\", \"addie\", \"cannons\", \"quizzes\", \"copeland\",\n    \"stammered\", \"finnegan\", \"spurrier\", \"custard\", \"awarding\", \"rainwater\", \"worldcom\", \"laziness\", \"spinoza\", \"redefined\", \"liasson\", \"wasps\", \"bulldog\", \"mystique\", \"painless\", \"tampering\",\n    \"acronym\", \"essex\", \"taxis\", \"goodell\", \"shroud\", \"reels\", \"padilla\", \"showroom\", \"barnard\", \"snarky\", \"execs\", \"fillmore\", \"ascend\", \"superboy\", \"clans\", \"meteorite\",\n    \"subspace\", \"wayward\", \"expertly\", \"movers\", \"chime\", \"attaches\", \"pregame\", \"resorted\", \"couscous\", \"waded\", \"amman\", \"topple\", \"fourday\", \"sharif\", \"rosary\", \"negation\",\n    \"sharpen\", \"pegged\", \"decoy\", \"dismisses\", \"laureate\", \"midsummer\", \"breyer\", \"stunts\", \"donatello\", \"feeder\", \"rematch\", \"sayer\", \"paddling\", \"diseased\", \"barrow\", \"betraying\",\n    \"hapless\", \"handlebar\", \"feverish\", \"posit\", \"scrolling\", \"skaters\", \"rollers\", \"vests\", \"pollutant\", \"bookshelf\", \"chants\", \"trickled\", \"antivirus\", \"saltwater\", \"lingers\", \"episodic\",\n    \"governs\", \"marcie\", \"marred\", \"worcester\", \"surfers\", \"creases\", \"outliers\", \"auditions\", \"swears\", \"reprints\", \"delacroix\", \"lecturing\", \"bushy\", \"smarts\", \"theyll\", \"harvests\",\n    \"canary\", \"reclaimed\", \"utensils\", \"corollary\", \"subtract\", \"faltered\", \"kellogg\", \"endearing\", \"randal\", \"occupant\", \"starlight\", \"integer\", \"abramoff\", \"scorsese\", \"swarmed\", \"premiered\",\n    \"speckled\", \"howto\", \"gastric\", \"arcane\", \"deleting\", \"winking\", \"menendez\", \"ferdinand\", \"flatten\", \"brokaw\", \"cheery\", \"legacies\", \"thickly\", \"dizziness\", \"guzman\", \"groped\",\n    \"snarling\", \"gradients\", \"kline\", \"ovens\", \"messes\", \"libel\", \"oncology\", \"coincides\", \"configure\", \"rewriting\", \"bullish\", \"phrasing\", \"brimming\", \"seduction\", \"pollard\", \"beeps\",\n    \"whoosh\", \"senor\", \"openair\", \"panes\", \"tonal\", \"presidio\", \"proclaims\", \"craftsmen\", \"archy\", \"vacancies\", \"loudest\", \"sugary\", \"dalai\", \"squeaked\", \"mottled\", \"lunge\",\n    \"flocks\", \"crested\", \"booted\", \"tarnished\", \"dentists\", \"masse\", \"saban\", \"americana\", \"sorta\", \"lattice\", \"hippies\", \"stupidly\", \"paucity\", \"ponies\", \"debtors\", \"innuendo\",\n    \"realtor\", \"nephews\", \"wisps\", \"repaid\", \"rebounded\", \"scrapes\", \"displace\", \"grassley\", \"crutches\", \"fanciful\", \"pointers\", \"jameson\", \"occult\", \"frugal\", \"canister\", \"marketer\",\n    \"verne\", \"snails\", \"candor\", \"mansions\", \"exporters\", \"valentino\", \"barclays\", \"colds\", \"blisters\", \"studded\", \"sprouting\", \"devour\", \"fester\", \"purses\", \"denzel\", \"twirling\",\n    \"takeaway\", \"fiscally\", \"tradeoff\", \"dunlap\", \"forfeit\", \"angling\", \"saleh\", \"mugabe\", \"recoil\", \"revolve\", \"himher\", \"punks\", \"norville\", \"freer\", \"hanover\", \"romances\",\n    \"bloomed\", \"glinted\", \"barbra\", \"fervent\", \"aretha\", \"rowan\", \"clawing\", \"forlorn\", \"partake\", \"takeout\", \"rockfish\", \"demeaning\", \"vacated\", \"dialing\", \"amenable\", \"scoops\",\n    \"tiers\", \"jamming\", \"penalized\", \"cranked\", \"tweaking\", \"helpers\", \"excite\", \"comme\", \"riveting\", \"underlies\", \"overcast\", \"graces\", \"oozing\", \"levee\", \"limped\", \"enlighten\",\n    \"alluring\", \"artistry\", \"mediums\", \"mouthed\", \"pitts\", \"clipping\", \"warring\", \"backpacks\", \"morbid\", \"woolen\", \"northward\", \"dwindled\", \"enrolling\", \"quickest\", \"northside\", \"snipers\",\n    \"saddled\", \"additives\", \"covington\", \"discord\", \"coriander\", \"niches\", \"expectant\", \"depaul\", \"greats\", \"astray\", \"utilizes\", \"mcpherson\", \"donnelly\", \"bloodied\", \"walkin\", \"freedman\",\n    \"strangle\", \"cahill\", \"sweetened\", \"stuffy\", \"entree\", \"deirdre\", \"knobs\", \"rations\", \"lenora\", \"ranting\", \"resonated\", \"optic\", \"nasser\", \"webpage\", \"maddox\", \"thinned\",\n    \"squirming\", \"innocents\", \"creighton\", \"soulful\", \"muses\", \"hedgehog\", \"spines\", \"errant\", \"maples\", \"mutters\", \"interacts\", \"layering\", \"theta\", \"bindings\", \"jayne\", \"manicure\",\n    \"jonbenet\", \"throwback\", \"wounding\", \"tinnitus\", \"apricot\", \"courteous\", \"palatable\", \"stanza\", \"censor\", \"haggard\", \"amplify\", \"scots\", \"debatable\", \"screeched\", \"passover\", \"toned\",\n    \"martyrdom\", \"stomp\", \"tilts\", \"subpoenas\", \"idling\", \"midsize\", \"selfless\", \"defaults\", \"radiated\", \"deities\", \"gangsters\", \"praxis\", \"bassist\", \"humiliate\", \"lockhart\", \"villanova\",\n    \"partisans\", \"breezes\", \"basra\", \"scotia\", \"stalling\", \"cordelia\", \"secretion\", \"farmed\", \"tumour\", \"compiling\", \"concur\", \"throbbed\", \"plaques\", \"meditate\", \"upsets\", \"graze\",\n    \"basque\", \"posturing\", \"frist\", \"cartons\", \"carvings\", \"newsmaker\", \"tully\", \"shivers\", \"cortez\", \"annuity\", \"castiron\", \"lockers\", \"mcmillan\", \"hotly\", \"sheehan\", \"preamble\",\n    \"ramadan\", \"twine\", \"lunges\", \"brees\", \"ladders\", \"darby\", \"polluting\", \"rowdy\", \"crabtree\", \"unveiling\", \"flanagan\", \"cleans\", \"cravings\", \"mathews\", \"emptying\", \"backfire\"\n];\n\n", "// (c) 2023 384 (tm)\n\nimport { generatePassPhrase, generateStrongKey, recreateStrongKey } from './strongphrase';\n\nexport const strongphrase = {\n    generate: generatePassPhrase,\n    toKey: generateStrongKey,\n    recreateKey: recreateStrongKey\n};\n", "// (c) 2023 384 (tm)\n\nconst reverse: number[] = []\nconst B64_CODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (let i = 0; i < B64_CODE.length; i++) reverse[B64_CODE.charCodeAt(i)] = i\nreverse['-'.charCodeAt(0)] = 62 // minus\nreverse['_'.charCodeAt(0)] = 63 // underscore\nconst simple_b64_regex = /^([A-Za-z0-9+/_\\-]{4})*$/ // tolerant of chars, multiple of 24 bits, no padding\n\n/**\n * Fast base64 to array buffer conversion for 'simple' b64 strings\n * (Multiple of 24 bits, no padding, no whitespace)\n */\nexport function simpleBase64ToArrayBuffer(base64: string) {\n  // make sure it matches regex\n  if (!simple_b64_regex.test(base64))\n    throw new TypeError(`Invalid ('simple') base64 string - must match '${simple_b64_regex}'`)\n  const buffer = new ArrayBuffer(base64.length * 3 / 4 + 1)\n  const view = new DataView(buffer)\n  for (let i = base64.length - 4, j = buffer.byteLength - 4; i >= 0; i -= 4, j -= 3) {\n    const a = reverse[base64.charCodeAt(i)]\n    const b = reverse[base64.charCodeAt(i + 1)]\n    const c = reverse[base64.charCodeAt(i + 2)]\n    const d = reverse[base64.charCodeAt(i + 3)]\n    view.setUint32(j, (a << 18) | (b << 12) | (c << 6) | d)\n  }\n  return new Uint8Array(buffer, 1)\n}", "// (c) 2023 384 (tm)\n\nimport { simpleBase64ToArrayBuffer } from './simpleB64';\nimport { base64ToArrayBuffer, arrayBufferToBase64 } from './b64';\n\nimport {\n    base62ToArrayBuffer32, arrayBuffer32ToBase62, base62ToBase64, base64ToBase62, isBase62Encoded,\n    assemblePayload, extractPayload\n} from '../snackabra/snackabra';\n\nexport const utils = {\n    simpleBase64ToArrayBuffer,\n    base64ToArrayBuffer,\n    arrayBufferToBase64,\n    base62ToArrayBuffer32, arrayBuffer32ToBase62, base62ToBase64, base64ToBase62, isBase62Encoded,\n    assemblePayload, extractPayload\n};\n", "// (c) 2023 384 (tm)\n\n// 384 file system\n\nimport { Snackabra, SBServer, SBChannelId, Interfaces } from '../snackabra/snackabra';\n\nexport class SBFileSystem {\n    server: Snackabra;\n    channelList: SBChannelId[] = [];\n\n    constructor(sbConfig: SBServer) {\n        // make sure we're given a valid config\n        if (typeof sbConfig !== 'object') {\n            throw new Error(\"SBFileSystem(): sbConfig is null (must give SBServer config)\")\n        }\n        this.server = new Snackabra(sbConfig);\n    }\n\n    // basic upload single buffer\n    uploadBuffer(myChannelId: SBChannelId, payload: BodyInit, name: string = ''): Promise<Interfaces.SBObjectHandle> {\n        if (!myChannelId) {\n            throw new Error(\"myChannelId is null\")\n        }\n        return new Promise((resolve) => {\n            if (!this.server.storage) {\n                console.log(\"'this.server': \", this.server);\n                throw new Error(\"storage not initialized\")\n            }\n            this.server.storage.storeData(payload, 'p', myChannelId).then((res) => {\n                res.fileName = name\n                res.dateAndTime = new Date().toISOString()\n                if (this.server.storage.shardServer) res.shardServer = this.server.storage.shardServer\n                delete res[\"iv\"] // hack\n                delete res[\"salt\"] // hack\n                Promise.resolve(res.verification).then((v) => {\n                    res.verification = v as string;\n                    resolve(res)\n                })\n            })\n        })\n    }\n    uploadBrowserFileList(myChannelId: SBChannelId, fileMap: Map<any, any>, bufferMap: Map<any, any>) {\n        console.info('uploadBrowserFileList() not implemented yet')\n        console.log(myChannelId, fileMap, bufferMap)\n        // return new Promise((resolve) => {\n        //     let promises: Promise<Interfaces.SBObjectHandle>[] = [];\n        //     for (let i = 0; i < fileList.length; i++) {\n        //         promises.push(this.uploadBuffer(myChannelId, fileList[i], fileList[i].name));\n        //     }\n        //     Promise.all(promises).then((res) => {\n        //         resolve(res);\n        //     });\n        // });\n    }\n\n}\n", "// (c) 2023 384 (tm)\n\nimport { SBFileSystem } from './system';\n\nexport const file = {\n    fs: SBFileSystem,\n};\n", "// (c) 2023 384 (tm)\n\n// primarily creates class FileHelper, which is used by the UI code\n// to parse any files or directories that have been selected\n\nimport { arrayBuffer32ToBase62 } from 'src/snackabra/snackabra';\nimport { crypto } from '../crypto/index';\n\n// SUBTLE note about this code:\n// we try hard to execute synchronously (against our nature), because\n// the order in which bits and pieces of information arrive is important.\n// for example, we try to process a directory before it's contents.\n\n\n// TODO ... working on it, this file should not have ANY snackabra references\n// import { Snackabra, SBServer } from \"../snackabra/snackabra\";\n// import type { SBChannelId, Interfaces } from \"../snackabra/snackabra\"\n\n// TODO\n// in many circumstances, we can infer directory structure from \n// the various sources of information.  doing this reliably\n// (for example handling \"dangling\" directories) is tricky to\n// get right. so for now we only include the structure that\n// is clearly indicated by the files.  instead of removing the\n// partial code, however, we just disable it:\n\nconst SKIP_DIR = true;  // if you turn this false, you have work to do \n\nconst DEBUG = false;\nconst DEBUG2 = false; // more verbose\nconst DEBUG3 = false; // etc\n\nexport const version = \"0.0.19\";\nif (DEBUG) console.warn(\"==== SBFileHelper.ts v\" + version + \" loaded ====\")\n\n//#region HELPER FUNCTIONS ************************************************************************************************\n\n// helper function to pull properties of interest out, resilient\n// to what is available on the object/class/whatever\n// const fileInfo = { ...getProperties(fileObject, propertyList) };\n\nfunction getProperties(obj: any, propertyList: Array<string>) {\n    const properties: { [key: string]: any } = {};\n    // First priority: regular properties (directly on the object)\n    propertyList.forEach((property) => {\n        if (obj.hasOwnProperty(property)) {\n            properties[property] = obj[property];\n        }\n    });\n    // Second priority: own properties (from Object.getOwnPropertyNames)\n    Object.getOwnPropertyNames(obj).forEach((property) => {\n        if (propertyList.includes(property) && !properties.hasOwnProperty(property)) {\n            properties[property] = obj[property];\n        }\n    });\n    // Third priority: properties up the prototype chain (from for...in loop)\n    for (const property in obj) {\n        if (propertyList.includes(property) && !properties.hasOwnProperty(property)) {\n            properties[property] = obj[property];\n        }\n    }\n    return properties;\n}\n\nfunction getMimeType(fileName: string): string {\n    // Mapping of file extensions to MIME types\n    const MIME_TYPES: Record<string, string> = {\n        '.aac': 'audio/aac',   // AAC audio\n        '.abw': 'application/x-abiword',   // AbiWord\u00A0document\n        '.arc': 'application/x-freearc',   // Archive document (multiple files embedded)\n        '.avif': 'image/avif',   // AVIF image\n        '.avi': 'video/x-msvideo',   // AVI: Audio Video Interleave\n        '.azw': 'application/vnd.amazon.ebook',   // Amazon Kindle eBook format\n        '.bin': 'application/octet-stream',   // Any kind of binary data\n        '.bmp': 'image/bmp',   // Windows OS/2 Bitmap Graphics\n        '.bz': 'application/x-bzip',   // BZip archive\n        '.bz2': 'application/x-bzip2',   // BZip2 archive\n        '.cda': 'application/x-cdf',   // CD audio\n        '.csh': 'application/x-csh',   // C-Shell script\n        '.css': 'text/css',   // Cascading Style Sheets (CSS)\n        '.csv': 'text/csv',   // Comma-separated values (CSV)\n        '.doc': 'application/msword',   // Microsoft Word\n        '.docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',   // Microsoft Word (OpenXML)\n        '.eot': 'application/vnd.ms-fontobject',   // MS Embedded OpenType fonts\n        '.epub': 'application/epub+zip',   // Electronic publication (EPUB)\n        '.gz': 'application/gzip',   // GZip Compressed Archive\n        '.gif': 'image/gif',   // Graphics Interchange Format (GIF)\n        '.htm': 'text/html',   // HyperText Markup Language (HTML)\n        '.html': 'text/html',   // HyperText Markup Language (HTML)\n        '.ico': 'image/vnd.microsoft.icon',   // Icon format\n        '.ics': 'text/calendar',   // iCalendar format\n        '.jar': 'application/java-archive',   // Java Archive (JAR)\n        '.jpeg': 'image/jpeg',   // JPEG images\n        '.jpg': 'image/jpeg',   // JPEG images\n        '.js': 'text/javascript\u00A0(Specifications:\u00A0HTML\u00A0and\u00A0RFC 9239)',   // JavaScript\n        '.json': 'application/json',   // JSON format\n        '.jsonld': 'application/ld+json',   // JSON-LD format\n        '.mid': 'audio/midi',   // Musical Instrument Digital Interface (MIDI)\n        '.midi': 'audio/midi',   // Musical Instrument Digital Interface (MIDI)\n        '.mjs': 'text/javascript',   // JavaScript module\n        '.mp3': 'audio/mpeg',   // MP3 audio\n        '.mp4': 'video/mp4',   // MP4 video\n        '.mpeg': 'video/mpeg',   // MPEG Video\n        '.mpkg': 'application/vnd.apple.installer+xml',   // Apple Installer Package\n        '.odp': 'application/vnd.oasis.opendocument.presentation',   // OpenDocument presentation document\n        '.ods': 'application/vnd.oasis.opendocument.spreadsheet',   // OpenDocument spreadsheet document\n        '.odt': 'application/vnd.oasis.opendocument.text',   // OpenDocument text document\n        '.oga': 'audio/ogg',   // OGG audio\n        '.ogv': 'video/ogg',   // OGG video\n        '.ogx': 'application/ogg',   // OGG\n        '.opus': 'audio/opus',   // Opus audio\n        '.otf': 'font/otf',   // OpenType font\n        '.png': 'image/png',   // Portable Network Graphics\n        '.pdf': 'application/pdf',   // Adobe\u00A0Portable Document Format\u00A0(PDF)\n        '.php': 'application/x-httpd-php',   // Hypertext Preprocessor (Personal Home Page)\n        '.ppt': 'application/vnd.ms-powerpoint',   // Microsoft PowerPoint\n        '.pptx': 'application/vnd.openxmlformats-officedocument.presentationml.presentation',   // Microsoft PowerPoint (OpenXML)\n        '.rar': 'application/vnd.rar',   // RAR archive\n        '.rtf': 'application/rtf',   // Rich Text Format (RTF)\n        '.sh': 'application/x-sh',   // Bourne shell script\n        '.svg': 'image/svg+xml',   // Scalable Vector Graphics (SVG)\n        '.tar': 'application/x-tar',   // Tape Archive (TAR)\n        '.tif': 'image/tiff',   // Tagged Image File Format (TIFF)\n        '.tiff': 'image/tiff',   // Tagged Image File Format (TIFF)\n        '.ts': 'video/mp2t',   // MPEG transport stream\n        '.ttf': 'font/ttf',   // TrueType Font\n        '.txt': 'text/plain',   // Text, (generally ASCII or ISO 8859-n)\n        '.vsd': 'application/vnd.visio',   // Microsoft Visio\n        '.wav': 'audio/wav',   // Waveform Audio Format\n        '.weba': 'audio/webm',   // WEBM audio\n        '.webm': 'video/webm',   // WEBM video\n        '.webp': 'image/webp',   // WEBP image\n        '.woff': 'font/woff',   // Web Open Font Format (WOFF)\n        '.woff2': 'font/woff2',   // Web Open Font Format (WOFF)\n        '.xhtml': 'application/xhtml+xml',   // XHTML\n        '.xls': 'application/vnd.ms-excel',   // Microsoft Excel\n        '.xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',   // Microsoft Excel (OpenXML)\n        '.xml': 'application/xml',   // XML\n        '.xul': 'application/vnd.mozilla.xul+xml',   // XUL\n        '.zip': 'application/zip',   // ZIP archive\n        '.7z': 'application/x-7z-compressed',   // 7-zip\u00A0archive\n\n    };\n\n    // Extract the file extension from the file name\n    const fileExtension = fileName.slice(fileName.lastIndexOf('.'));\n\n    // Return the MIME type if it exists in the mapping, or an empty string otherwise\n    return MIME_TYPES[fileExtension];\n}\n//#endregion HELPER FUNCTIONS ************************************************************************************************\n\n//#region TYPESCRIPT TYPES ETC ************************************************************************************************\n\n// there are a few weird things we need to do, because some browser behavior is \n// not captured by standard typescript headers etc.  for example, for some\n// reason ... Microsoft header files don't support some stuff Apple uses ...\n\n// FileEntry is non standard ... so we need to have some definitions \ninterface Entry {\n    isFile: boolean;\n    isDirectory: boolean;\n    name: string;\n    fullPath: string;\n    filesystem: FileSystem;\n    getMetadata(successCallback: MetadataCallback, errorCallback?: ErrorCallback): void;\n}\ninterface FileSystemFileEntry extends Entry {\n    isFile: true;\n    isDirectory: false;\n    file(successCallback: FileCallback, errorCallback?: ErrorCallback): void;\n}\n\n\ninterface Metadata {\n    modificationTime: Date;\n    size: number;\n}\ntype MetadataCallback = (metadata: Metadata) => void;\ntype ErrorCallback = (error: DOMException) => void;\ntype FileCallback = (file: File) => void;\n\ninterface CustomEventTarget extends EventTarget {\n    files?: FileList;\n    items?: DataTransferItemList;\n}\n\nexport interface SBFileMetaData {\n    name?: string;\n    fullPath?: string;\n    size?: number;\n    type?: string;\n    file?: (successCallback: FileCallback, errorCallback?: ErrorCallback) => void;\n    lastModified?: number;\n    lastModifiedDate?: Date;\n    webkitRelativePath?: string;\n    isDirectory?: boolean;\n    isFile?: boolean;\n    getMetaDataName?: string;\n    getMetaDataSize?: number;\n    getMetaDataType?: string;\n    getMetaDataLastModified?: number;\n    getMetaDataGetFileError?: any;\n    getMetaDataModificationTime?: Date;\n    getMetaDataFile?: File;\n    getMetaDataError?: string;\n    noGetMetaData?: boolean;\n}\n\n//#endregion TYPESCRIPT TYPES ETC ************************************************************************************************\n\n// these are the properties that we (potenially) care about\nconst propertyList = ['lastModified', 'name', 'type', 'size', 'webkitRelativePath', 'fullPath', 'isDirectory', 'isFile',\n    'SBitemNumber', 'SBitemNumberList', 'fileContentCandidates', 'fileContents', 'uniqueShardId',\n    'SBparentEntry', 'SBparentNumber', 'SBfoundMetaData', 'SBfullName'];\n\n(window as any).SBFileHelperReady = new Promise((resolve, reject) => {\n    (window as any).SBFileHelperReadyResolve = resolve;\n    (window as any).SBFileHelperReadyReject = reject;\n});\n\n(window as any).SBFileHelperReadyResolve()\n\nexport const SBFileHelperReady = (window as any).SBFileHelperReady\n\n\n// internal debug function, used to verify files can be accessed\nfunction testToRead(file: File | FileSystemEntry | FileSystemFileEntry, location: string) {\n    try {\n        const reader = new FileReader();\n        reader.readAsText(file as File);\n        reader.onload = (e) => {\n            if (DEBUG2) {\n                console.log(\"========================================================\")\n                console.log(`[${location}] was able to readAsText():`);\n                console.log(file)\n            }\n            if (e.target === null) {\n                if (DEBUG) console.log('**** e.target is null ****');\n            } else {\n                if (DEBUG2) console.log(`[${location}] (direct) successfully read file ${file.name}`);\n            }\n        }\n    } catch (error) {\n        try {\n            if ((file as any).file) {\n                let originalFile = file;\n                (file as any).file((file: File) => {\n                    if (DEBUG2) {\n                        console.log(\"========================================================\")\n                        console.log(`[${location}] was able to get a file() for object:`);\n                        console.log(originalFile)\n                        console.log(file)\n                    }\n                    const reader = new FileReader();\n                    reader.readAsText(file as File);\n                    reader.onload = (e) => {\n                        if (e.target === null) {\n                            console.log('**** e.target is null ****');\n                        } else {\n                            if (DEBUG2) console.log(`[${location}] (using file()) successfully read file ${file.name}`);\n                            // console.log(e.target.result);\n                        }\n                    }\n                });\n            }\n        } catch (error) {\n            console.log(`[${location}] error reading file ${file.name}`);\n        }\n    }\n}\n\n// Global counter utility; works well with async/await etc\nconst createCounter = () => {\n    let counter = 0;\n    const inc = async (): Promise<number> => {\n        await new Promise((resolve) => setTimeout(resolve, 0)); // Simulate asynchronous operation\n        counter++;\n        return counter - 1; // we count starting at zero\n    };\n    return { inc };\n};\n\nlet printedWarning = false;\nexport function printWarning() {\n    if (!printedWarning) {\n        console.log(\"================================================\")\n        console.log(\"Warning: you are running in 'local web page' mode\")\n        console.log(\"on a browser that has some restrictions.\");\n        console.log(\"\");\n        console.log(\"So far, looks like this browser will not let you\");\n        console.log(\"navigate *into* directories that are drag-and-dropped\");\n        console.log(\"Might also be having issues getting meta data,\");\n        console.log(\"as well as getting the 'full' path of the file.\");\n        console.log(\"============================================\")\n        printedWarning = true;\n    }\n    if ((window as any).directoryDropText)\n        (window as any).directoryDropText!.innerHTML = \"Click to choose directories<br />(drag and drop might not work))\";\n\n}\n\n/*\n * This class is used by the UI code to parse any files or directories that have been selected\n * by the UI, whether through a file input or a drag-and-drop operation\n * \n * The key data structures to access are:\n * \n * finalFileList: a map of all files that have been processed\n * globalBufferMap: a map of all array buffers that have been read (\"seen\")\n * \n * These are accumulative and do not reset on any UI interaction that this\n * class can see, they need to be explicitly cleared by any application.\n * (For example after uploading a set)\n * \n */\nexport class FileHelper {\n    // server: Snackabra;\n\n    // todo: perhaps from configuration?\n    #ignoreFileSet = new Set()\n\n    // give any file or item \"seen\" a unique number (reset on every UI interaction)\n    #globalItemNumber = createCounter();\n\n    // if there are items, files will at first be numbered the same (reset on every UI interaction)\n    #globalFileItemNumber = createCounter();\n\n    // all of our scanning results go here, unabridged (reset on every UI interaction)\n    #globalFileMap = new Map();\n\n    // this is the distilled list of files we will add to finalFileList (reset on every UI interaction)\n    #currentFileList = new Map();\n\n    // this is one accumulative, and used directly for the table (NOT reset)\n    finalFileList = new Map();\n\n    // track all (unique) array buffers that have been read (NOT reset)\n    // TODO: strictly speaking we don't do garbage collection on this\n    globalBufferMap = new Map();\n\n    constructor() {\n        // add some files to ignore\n        this.#ignoreFileSet.add(\".DS_Store\");\n        this.#ignoreFileSet.add(\"/.DS_Store\");\n        // add a regex to catch emacs backup files\n        this.#ignoreFileSet.add(/.*~$/);\n        // console.log(this)\n    }\n\n    ignoreFile(fileName: string): boolean {\n        if (this.#ignoreFileSet.has(fileName)) return true;\n        for (let ignoreFile of this.#ignoreFileSet)\n            if (ignoreFile instanceof RegExp)\n                if (ignoreFile.test(fileName))\n                    return true;\n        return false;\n    }\n\n    //#region SCAN ITEMS AND FILES ****************************************************************************************\n\n    // these are called by the UI code to parse any files or directories that have been selected\n    // by the UI, whether through a file input or a drag-and-drop operation\n\n    // returns metadata for a file object whether it is a File or FileEntry\n    extractFileMetadata(fileObject: File | FileSystemEntry | FileSystemFileEntry): Promise<SBFileMetaData> {\n        function localResolve(metadata: SBFileMetaData): SBFileMetaData {\n            // console.log(\"Extracted metadata:\");\n            // console.log(metadata);\n            return metadata;\n        }\n        return new Promise<SBFileMetaData>((resolve) => {\n            const metadata: SBFileMetaData = {} as SBFileMetaData;\n            // console.log(\"Extracting metadata from object:\");\n            // console.log(fileObject);\n            if (fileObject instanceof File) {\n                if (fileObject.name)\n                    metadata.name = fileObject.name;\n                if (fileObject.size)\n                    metadata.size = fileObject.size;\n                if (fileObject.type)\n                    metadata.type = fileObject.type;\n                if (fileObject.lastModified)\n                    metadata.lastModified = fileObject.lastModified;\n                if (fileObject.webkitRelativePath)\n                    metadata.webkitRelativePath = fileObject.webkitRelativePath;\n            }\n            if ((typeof FileSystemEntry !== \"undefined\") && (fileObject instanceof FileSystemEntry)) {\n                if (fileObject.name)\n                    metadata.name = fileObject.name;\n                if (fileObject.fullPath)\n                    metadata.fullPath = fileObject.fullPath;\n                if (fileObject.isDirectory !== undefined)\n                    metadata.isDirectory = fileObject.isDirectory;\n                if (fileObject.isFile !== undefined)\n                    metadata.isFile = fileObject.isFile;\n                metadata.noGetMetaData = true;\n            }\n            if ((typeof FileSystemFileEntry !== \"undefined\") && (fileObject instanceof FileSystemFileEntry)) {\n                if (fileObject.fullPath)\n                    metadata.fullPath = fileObject.fullPath;\n                // if it's there, not so important:\n                // if (fileObject.lastModifiedDate)\n                //     metadata.lastModifiedDate = fileObject.lastModifiedDate;\n                if (fileObject.isDirectory !== undefined)\n                    metadata.isDirectory = fileObject.isDirectory;\n                if (fileObject.isFile !== undefined)\n                    metadata.isFile = fileObject.isFile;\n                if (fileObject.file)\n                    metadata.file = fileObject.file;\n            }\n            if ((typeof FileSystemFileEntry !== \"undefined\") && ((fileObject instanceof FileSystemFileEntry))\n                && ((fileObject as unknown as FileSystemFileEntry).getMetadata)) {\n                // this is the only situation where we have another promise \n                (fileObject as unknown as FileSystemFileEntry).getMetadata((fileMetadata) => {\n                    // console.log(\"Got meta data from file object:\");\n                    // console.log(fileMetadata);\n                    // metadata.getMetaDataName = fileMetadata.name; // apparently not available?\n                    metadata.getMetaDataSize = fileMetadata.size;\n                    metadata.getMetaDataModificationTime = fileMetadata.modificationTime;\n                    if (fileObject.file) fileObject.file((file) => {\n                        metadata.getMetaDataFile = file;\n                        metadata.getMetaDataType = file.type;\n                        resolve(localResolve(metadata));\n                    }, (error) => {\n                        metadata.getMetaDataGetFileError = error;\n                        resolve(localResolve(metadata));\n                    });\n                }, (error: any) => {\n                    metadata.getMetaDataError = error;\n                    resolve(localResolve(metadata));\n                });\n            } else {\n                // otherwise, all info should be immediately available\n                metadata.noGetMetaData = true;\n                resolve(localResolve(metadata));\n            }\n        });\n    }\n\n    async scanFile(file: File | FileSystemEntry | FileSystemFileEntry, fromItem: number) {\n        if (!file) return\n        if (DEBUG2) testToRead(file, 'scanFile');\n        if (this.ignoreFile(file.name)) return;\n\n        let path: string;\n        if (file instanceof File) {\n            path = file.webkitRelativePath;\n        } else if (file instanceof FileSystemEntry) {\n            path = file.fullPath;\n        } else if (file instanceof FileSystemFileEntry) {\n            path = file.fullPath;\n        } else {\n            console.warn(\"**** Unknown file type (should not happen):\");\n            console.log(file);\n            return;\n        }\n\n        let fileNumber = await (fromItem === -1 ? this.#globalFileItemNumber.inc() : fromItem);\n        (file as any).SBitemNumber = fileNumber;\n\n        let fromItemText = fromItem === -1 ? '' : ` (from item ${fromItem})`\n\n        // fileListFile1_Files.push(file);\n\n        await this.extractFileMetadata(file).then((metadata) => {\n            if (DEBUG2) console.log(`adding ${fileNumber}`);\n            (file as any).SBfoundMetaData = metadata\n\n            // globalFileMap.set(`file ${fileNumber} (item ${fromItem}): ` + \"/\" + metadata.name + \" [file] [2] (\" + metadata.size + \")\", file);\n            // if ((file instanceof File) && (file.type !== \"\")) {\n            //     globalFileMap.set(`file ${fileNumber} (item ${fromItem}): ` + \"/\" + metadata.name + \" [meta from file]\", metadata);\n            // }\n\n            if (path === '') {\n                // fileListFile1.push('/' + file.name);\n                this.#globalFileMap.set(`file ${fileNumber} ${fromItemText} name: '/` + file.name + \"' \", file);\n            } else {\n                // fileListFile1.push('/' + path);\n                this.#globalFileMap.set(`file ${fileNumber} ${fromItemText} path: '/` + path + \"'\", file);\n            }\n\n        }).catch((error) => {\n            console.log(\"Error getting meta data for FILE (should NOT happen):\")\n            console.log(file)\n            console.log(error);\n        });\n    }\n\n    scanFileList(files: FileList | undefined) {\n        if (!files) return;\n        if (DEBUG) console.log(`==== scanFileList called, files.length: ${files.length}`);\n        if (files)\n            for (let i = 0; i < files.length; i++)\n            /* await */ this.scanFile(files[i], -1);\n    }\n\n    async scanItem(item: FileSystemEntry | FileSystemFileEntry | null, parent: any) {\n        if (!item) return;\n        if (this.ignoreFile(item.name)) return;\n        if (DEBUG2) testToRead(item, 'scanItem');\n\n        let itemNumber = await this.#globalItemNumber.inc();\n\n        if (DEBUG2) { console.log(`scanItem ${itemNumber} ${item.name}`); console.log(item); }\n\n        let parentString = '';\n        (item as any).SBitemNumber = itemNumber;\n        if (parent !== null) {\n            (item as any).SBparentEntry = parent;\n            (item as any).SBparentNumber = parent.SBitemNumber;\n            parentString = ` (parent ${parent.SBitemNumber}) `;\n            if (!parent.SBfullName)\n                // if we're a child then parent must be a parent\n                parent.SBfullName = parent.name;\n            // only if parents are around do we assert any knowledge of path\n            (item as any).SBfullName = parent.SBfullName + \"/\" + item.name;\n        }\n\n        // if (item.fullPath)\n        //     globalFileMap.set(`item ${itemNumber}: ` + item.fullPath + ` [item] [0] - indent ${indent}`, item);\n\n        // globalFileMap.set(`item ${itemNumber}: ` + '/' + item.name + ` [item] [1] - indent ${indent}`, item);\n\n        await this.extractFileMetadata(item).then((metadata) => {\n            (item as any).SBfoundMetaData = metadata\n            // globalFileMap.set(`item ${itemNumber}: ` + item.fullPath + ` [item] [2] - indent ${indent} `, item);\n            // globalFileMap.set(`item ${itemNumber}: ` + item.fullPath + ` [meta from item] - indent ${indent} `, metadata);\n        }).catch((error) => {\n            console.log(\"Error getting meta data for ITEM (should not happen):\")\n            console.log(item)\n            console.log(error);\n        });\n\n        if (item.isDirectory) {\n            const myThis = this; // workaround (VS issue?)\n            let directoryReader = (item as unknown as FileSystemDirectoryEntry).createReader();\n            (item as any).SBdirectoryReader = directoryReader;\n            this.#globalFileMap.set(`item ${itemNumber}: '/` + item.name + `' [directory] ${parentString}`, item);\n            directoryReader.readEntries(function (entries) {\n                entries.forEach(async function (entry) {\n                    await myThis.scanItem(entry, item);\n                });\n            }, function (error: any) {\n                printWarning();\n                if (DEBUG) console.log(`Browser restriction: Unable to process this item as directory, '${item.name}':`);\n                if (DEBUG2) console.log(error)\n            });\n        } else {\n            this.#globalFileMap.set(`item ${itemNumber}: '/` + item.name + \"' \" + parentString, item);\n            (item as FileSystemFileEntry).file((file) => {\n                this.scanFile(file, itemNumber);\n            }, function () {\n                printWarning();\n            });\n        }\n\n    }\n\n    scanItemList(items: DataTransferItemList | undefined) {\n        if (!items) return;\n        if (DEBUG) console.log(`==== scanItemList called, items.length: ${items.length}`);\n        // console.log(items);\n        for (let i = 0; i < items.length; i++) {\n            let item = items[i].webkitGetAsEntry();\n            if (item) /* await */ this.scanItem(item, null);\n            else { console.log(\"just FYI, not a file/webkit entry:\"); console.log(items[i]); }\n        }\n    }\n    //#endregion SCAN ITEMS OR FILES *******************************************************************************************************\n\n\n\n    // called after every user interaction (eg any possible additions of files)\n    afterOperation(callback: (table: any[]) => void) {\n        setTimeout(() => {\n            (async () => {\n                console.log(\"-------DONE building globalFileMap---------\")\n                console.log(this.#globalFileMap);\n\n                let nameToFullPath = new Map<string, string>();\n\n                let candidateFileList = new Map();\n\n                this.#globalFileMap.forEach((value, _key) => {\n                    if (!this.ignoreFile(value.name)) {\n                        if (DEBUG2) { console.log(`[${value.name}] Processing global file map entry: `); console.log(value); }\n                        if (value.SBitemNumber !== undefined) {\n                            let currentInfo = candidateFileList.get(value.SBitemNumber);\n                            if (currentInfo) {\n                                // let altFullPath = value.fullPath;\n                                // let altFileContentCandidates = value.fileContentCandidates;\n                                let newInfo = getProperties(value, propertyList);\n                                // Object.assign(currentInfo, getProperties(value, propertyList));\n                                Object.assign(newInfo, currentInfo);\n                                if ((value.fullPath) && ((!newInfo.fullPath) || (value.fullPath.length > newInfo.fullPath.length)))\n                                    newInfo.fullPath = value.fullPath;\n                                newInfo.fileContentCandidates.push(value);\n                                // currentInfo.fileContentCandidates = altFileContentCandidates;\n                                candidateFileList.set(value.SBitemNumber, newInfo);\n                            } else {\n                                candidateFileList.set(value.SBitemNumber, Object.assign({}, getProperties(value, propertyList)));\n                                currentInfo = candidateFileList.get(value.SBitemNumber);\n                                currentInfo.fileContentCandidates = [value];\n                            }\n                        } else if (value.fullPath) {\n                            // in some cases we can pick up path from here\n                            if (DEBUG2) {\n                                console.log(`++++ adding path info for '${value.name}':`);\n                                console.log(value.fullPath);\n                                console.log(value)\n                            }\n                            nameToFullPath.set(value.name, value.fullPath);\n                        } else {\n                            if (DEBUG2) {\n                                console.log(`++++ ignoring file '${value.name}' in first phase (SHOULD NOT HAPPEN)`);\n                                console.log(value);\n                            }\n                        }\n                    } else {\n                        if (DEBUG2) console.log(`Ignoring file '${value.name}' (based on ignoreFile)`);\n                    }\n                });\n\n                console.log(\"-------DONE building candidateFileList---------\")\n                console.log(candidateFileList);\n                // now merge into currentFileList\n                candidateFileList.forEach((value, key) => {\n                    if ((value.SBfullName !== undefined) && ((\"/\" + value.SBfullName) !== value.fullPath)) {\n                        console.log(\"WARNING: SBfullName and fullPath/name do not match\");\n                        console.log(`Name: ${value.name}, fullPath: ${value.fullPath}, SBfullName: ${value.SBfullName}`);\n                        console.log(value)\n                    }\n                    // pullPath is not reliable in the absence of our ability to reconstruct from parent-child\n                    let uniqueName = value.SBfullName || value.webkitRelativePath + '/' + value.name;\n                    /* if ((value.isDirectory) && (SKIP_DIR)) {\n                        if (DEBUG) console.log(`Skipping directory '${uniqueName}'`);\n                    } else */ if (uniqueName !== undefined) {\n                        if (value.isDirectory === true) {\n                            uniqueName += \" [directory]\";\n                        } else if (value.isFile === true) {\n                            uniqueName += \" [file]\";\n                        }\n                        if ((value.size !== undefined) && (value.isDirectory != true)) {\n                            uniqueName += ` [${value.size} bytes]`;\n                        }\n                        if (value.lastModified !== undefined) {\n                            uniqueName += ` [${value.lastModified}]`;\n                        }\n                        if (DEBUG2) {\n                            console.log(`processing object ${key} unique name '${uniqueName}':`);\n                            console.log(value)\n                        }\n                        let currentInfo = this.#currentFileList.get(uniqueName);\n                        if (currentInfo) {\n                            let altFullPath = currentInfo.fullPath;\n                            let altFileContentCandidates = currentInfo.fileContentCandidates;\n                            let altSbItemNumberList = currentInfo.SBitemNumberList;\n                            Object.assign(currentInfo, getProperties(value, propertyList));\n                            if ((altFullPath) && ((!currentInfo.fullPath) || (altFullPath.length > currentInfo.fullPath.length)))\n                                currentInfo.fullPath = altFullPath;\n                            if (altFileContentCandidates) {\n                                if (currentInfo.fileContentCandidates === undefined) currentInfo.fileContentCandidates = [];\n                                currentInfo.fileContentCandidates.push(...altFileContentCandidates);\n                            }\n                            altSbItemNumberList.push(value.SBitemNumber);\n                            currentInfo.SBitemNumberList = altSbItemNumberList;\n                        } else {\n                            value.SBitemNumberList = [value.SBitemNumber];\n                            this.#currentFileList.set(uniqueName, value);\n                            currentInfo = candidateFileList.get(uniqueName);\n                        }\n                        if (DEBUG2) {\n                            console.log(`... currentInfo for '${uniqueName}' (${uniqueName}):`);\n                            console.log(currentInfo);\n                        }\n                    } else {\n                        if (DEBUG) {\n                            console.log(`++++ ignoring file - it's lacking fullPath (should be rare)`);\n                            console.log(value);\n                        }\n                    }\n                });\n\n                console.log(\"-------DONE building currentFileList---------\")\n                console.log(this.#currentFileList)\n\n                // we'll now try reading all the files, and gathering any missing metadata while we're at it\n\n                // attempts to read a file, returns promise with contents, or null if not readable\n                async function FP(file: File | FileSystemEntry | FileSystemFileEntry): Promise<ArrayBuffer | null> {\n                    return new Promise(async (resolve) => {\n                        try {\n                            const reader = new FileReader();\n                            reader.onload = (e) => {\n                                if ((e.target === null) || (e.target.result === null)) {\n                                    if (DEBUG2)\n                                        console.log(`+++++++ got a null back for '${file.name}' (??)`);\n                                    resolve(null)\n                                } else if (typeof e.target.result === 'string') {\n                                    if (DEBUG2)\n                                        console.log(`+++++++ got a 'string' back for '${file.name}' (??)`);\n                                    resolve(null)\n                                } else {\n                                    if (DEBUG2) {\n                                        console.log(`+++++++ read file '${file.name}'`);\n                                        console.log(e.target.result);\n                                    }\n                                    resolve(e.target.result)\n                                }\n                            }\n                            reader.onerror = (event) => {\n                                if (DEBUG2) { console.log(`Could not read: ${file.name}`); console.log(event); }\n                                resolve(null);\n                            }\n                            // we try to release pressure on the browser\n                            await new Promise((resolve) => setTimeout(resolve, 20));\n                            reader.readAsArrayBuffer(file as File);\n                        } catch (error) {\n                            try {\n                                if (DEBUG2) console.log(`+++++++ got error on '${file.name}', will try as FileSystemFileEntry`);\n                                if ((file as any).file) {\n                                    (file as any).file(async (file: File) => {\n                                        const reader = new FileReader();\n                                        reader.onload = (e) => {\n                                            if ((e.target === null) || (e.target.result === null)) resolve(null)\n                                            else if (typeof e.target.result === 'string') resolve(null)\n                                            else resolve(e.target.result)\n                                        }\n                                        reader.onerror = () => { resolve(null); }\n                                        // we try to release pressure on the browser\n                                        await new Promise((resolve) => setTimeout(resolve, 20));\n                                        reader.readAsArrayBuffer(file as File);\n                                    });\n                                } else {\n                                    if (DEBUG2) console.log(`... cannot treat as file: ${file.name}`);\n                                }\n                            } catch (error) {\n                                if (DEBUG2) console.log(`Could not read: ${file.name}`);\n                            }\n                            resolve(null);\n                        }\n                    });\n                }\n\n                async function findFirstResolved(fileList: Array<File | FileSystemEntry | FileSystemFileEntry>): Promise<ArrayBuffer | null> {\n                    for (let index = 0; index < fileList.length; index++) {\n                        let result = await FP(fileList[index]);\n                        if (result !== null) return result;\n                    }\n                    if (DEBUG) {\n                        console.log(\"findFirstResolved(): found nothing usable from this fileList\")\n                        console.log(fileList)\n                    }\n                    return null;\n                }\n\n                let listOfFilePromises: Array<Promise<void>> = [];\n                this.#currentFileList.forEach((value, key) => {\n                    if ((value.fileContentCandidates) && (!value.uniqueShardId)) {\n                        // listOfFilePromises.push(value);\n                        listOfFilePromises.push(\n                            new Promise<void>(async (resolve) => {\n                                findFirstResolved(value.fileContentCandidates)\n                                    .then(async (result: ArrayBuffer | null) => {\n                                        if (DEBUG3) console.log(`got response for ${value.name}`)\n                                        if (!result) {\n                                            if (DEBUG2) console.log(`... contents are empty for item ${key} (probably a directory)`)\n                                            // value.uniqueShardId = null;  // actually no, we'll leave it as undefined\n                                        } else {\n                                            const { id_binary } = await crypto.sbCrypto.generateIdKey(result!)\n                                            const id32 = arrayBuffer32ToBase62(id_binary);\n                                            let alreadyThere = this.globalBufferMap.get(id32);\n                                            if (alreadyThere) {\n                                                if (DEBUG2) console.log(`... duplicate file found for ${key}`)\n                                                result = alreadyThere; // memory conservation\n                                            } else {\n                                                this.globalBufferMap.set(id32, result);\n                                            }\n                                            if (value.size === undefined) {\n                                                if (DEBUG2) console.log(`... setting size for ${key} to ${result!.byteLength}`)\n                                                value.size = result!.byteLength;\n                                            } else if (value.size !== result!.byteLength) {\n                                                if (DEBUG) console.log(`WARNING: file ${value.name} has size ${value.size} but contents are ${result!.byteLength} bytes (ignoring)`)\n                                                resolve(); // not the droid we're looking for\n                                            }\n                                            value.uniqueShardId = id32;\n                                            if (DEBUG2) console.log(`... found contents for ${key} (${result!.byteLength} bytes)`)\n                                        }\n                                        resolve();\n                                    })\n                                    .catch((error: any) => {\n                                        if (DEBUG2) console.log(`couldn't read anything for ${key}`, error);\n                                        // value.uniqueShardId = null;\n                                        resolve();\n                                    });\n                            })\n                        );\n                    } else { if (DEBUG) console.log(`skipping ${value.name} (item ${key})`) }\n                });\n                if (DEBUG) console.log(\"... kicked off all file promises\")\n\n                // this now updates the table and the UI\n                await Promise.all(listOfFilePromises).then((_results) => {\n                    // let's see what's in array buffers:\n                    console.log(\"-------DONE building globalBufferMap ---------\")\n                    console.log(this.globalBufferMap)\n                });\n\n                this.#currentFileList.forEach((value) => {\n                    if (value.name) {\n                        let path = \"/\";\n                        if (value.SBfullName) {\n                            path = (\"/\" + value.SBfullName).substring(0, value.fullPath.lastIndexOf('/') + 1);\n                        } else if (value.webkitRelativePath) {\n                            path = (\"/\" + value.webkitRelativePath).substring(0, value.webkitRelativePath.lastIndexOf('/') + 1);\n                        } else if (value.fullPath) {\n                            path = value.fullPath.substring(0, value.fullPath.lastIndexOf('/') + 1);\n                        } else if (nameToFullPath.has(value.name)) {\n                            path = nameToFullPath.get(value.name)!.substring(0, nameToFullPath.get(value.name)!.lastIndexOf('/') + 1);\n                        } else {\n                            if (DEBUG2) {\n                                console.log(`... no (further) path info for '${value.name}'`);\n                                console.log(value);\n                            }\n                        }\n                        // make sure last character is \"/\"\n                        path = path.endsWith(\"/\") ? path : path.concat(\"/\");\n                        if (DEBUG2) console.log(`... path for '${value.name}' is '${path}'`);\n                        if (value.isDirectory === true) { value.type = \"directory\"; value.size = 0; }\n\n                        let finalFullName = path + value.name;\n\n                        let metaDataString = \"\";\n                        let lastModifiedString = \"\";\n                        if (value.lastModified) {\n                            lastModifiedString = (new Date(value.lastModified)).toLocaleString();\n                            metaDataString += ` [${lastModifiedString}]`;\n                        }\n                        if (value.size) {\n                            metaDataString += ` [${value.size} bytes]`;\n                        }\n                        if (value.uniqueShardId) {\n                            metaDataString += ` [${value.uniqueShardId.substr(0, 12)}]`;\n                        }\n                        finalFullName += metaDataString;\n\n                        let row = {\n                            name: value.name,\n                            size: value.size,\n                            type: value.type,\n                            lastModified: lastModifiedString,\n                            hash: value.uniqueShardId?.substr(0, 12),\n                            // these are extra / hidden:\n                            path: path,\n                            uniqueShardId: value.uniqueShardId,\n                            fullName: finalFullName,\n                            metaDataString: metaDataString,\n                            SBfullName: value.SBfullName\n                        };\n\n                        let currentRow = this.finalFileList.get(finalFullName);\n                        if (!currentRow)\n                            this.finalFileList.set(finalFullName, row);\n                        else {\n                            // just a handful of things worth overriding:\n                            if (DEBUG) console.log(`... overriding some values for ${finalFullName} (this is rare)`)\n                            if (currentRow!.size === undefined) currentRow!.size = row.size;\n                            if (currentRow!.type === undefined) currentRow!.type = row.type;\n                            if (currentRow!.lastModified === undefined) currentRow!.lastModified = row.lastModified;\n                            if (currentRow!.uniqueShardId === undefined) currentRow!.uniqueShardId = row.uniqueShardId;\n                        }\n\n                        if (DEBUG2) { console.log(`File ${value.name} has info`); console.log(row); }\n                    }\n                });\n\n                console.log(\"-------DONE building finalFileList ---------\")\n                console.log(this.finalFileList)\n\n                // final coalesing;\n                // we review the finalFileList, and remove directories, which includes everything\n                // that we were unable to read the contents of\n                if (SKIP_DIR) {\n                    let reverseBufferMap: Map<string, Map<string, any>> = new Map(\n                        Array.from(this.globalBufferMap.keys()).map((key) => [key, new Map()])\n                    );\n                    for (const key of this.finalFileList.keys()) {\n                        let entry = this.finalFileList.get(key);\n                        if ((entry!.type === \"directory\") || (entry.uniqueShardId === undefined)) {\n                            if (DEBUG2) console.log(`... removing ${key} from final list (directory)`)\n                            this.finalFileList.delete(key);\n                        } else {\n                            const uniqueShortName = entry.name + entry.metaDataString;\n                            if (entry.path !== \"/\") {\n                                const mapEntry = reverseBufferMap.get(entry.uniqueShardId)!.get(uniqueShortName);\n                                if (mapEntry) {\n                                    // we have a duplicate\n                                    if (mapEntry.path.length > entry.path.length) {\n                                        // we're the shorter one, so we remove ourselves\n                                        this.finalFileList.delete(key);\n                                    } else {\n                                        // we're the longer one, so we remove the old guy\n                                        this.finalFileList.delete(mapEntry.fullName);\n                                        reverseBufferMap.get(entry.uniqueShardId)!.set(uniqueShortName, entry);\n                                    }\n                                } else {\n                                    // otherwise we leave ourselves in\n                                    reverseBufferMap.get(entry.uniqueShardId)!.set(uniqueShortName, entry);\n                                }\n\n                            }\n                        }\n                    }\n\n                    if (DEBUG) console.log(reverseBufferMap)\n\n                    // after that first pass, we can now see whether short names are unique\n                    for (const key of this.finalFileList.keys()) {\n                        let entry = this.finalFileList.get(key);\n                        const uniqueShortName = entry.name + entry.metaDataString;\n                        if (entry.path === \"/\") {\n                            const mapEntry = reverseBufferMap.get(entry.uniqueShardId)!.get(uniqueShortName);\n                            if (mapEntry) {\n                                // we have a duplicate, and delete ourselves\n                                if (DEBUG2) console.log(`... removing ${key} from final list (duplicate short name)`)\n                                this.finalFileList.delete(key);\n                            } else {\n                                // otherwise we leave ourselves in\n                                if (DEBUG2) console.log(`... leaving ${key} in final list (unique short name)`)\n                            }\n                        }\n                    }\n\n                }\n\n                // finally we check if mime type is missing, and if so, try to figure it out\n                for (const key of this.finalFileList.keys()) {\n                    let entry = this.finalFileList.get(key);\n                    if (entry.type === undefined) {\n                        if (DEBUG2) console.log(`... trying to figure out mime type for ${key}`)\n                        let mimeType = await getMimeType(entry.uniqueShardId);\n                        if (mimeType) {\n                            entry.type = mimeType;\n                        } else {\n                            entry.type = \"\";\n                        }\n                    }\n                }\n\n                // \"export\" as a sorted array to our table\n                // let tableContents = Array.from(finalFileList).sort((a, b) => a[0].localeCompare(b[0]));\n                // let tableContents = Array.from(finalFileList.values()).sort((a, b) => a.toString().localeCompare(b.toString()));\n                let tableContents = Array.from(this.finalFileList.values()).sort((a, b) =>\n                    a.path.localeCompare(b.path) || a.name.localeCompare(b.name)\n                );\n\n                if (DEBUG) {\n                    console.log(\"Table contents:\")\n                    console.log(tableContents);\n                }\n\n                console.log(\"-------DONE with all file promises (clearing state) ---------\")\n\n                // now we clear for any additionl UI\n                this.#globalItemNumber = createCounter();\n                this.#globalFileItemNumber = createCounter();\n                this.#globalFileMap = new Map();\n                this.#currentFileList = new Map();\n                // we do NOT clear the globalBufferMap\n\n                if (callback) {\n                    callback(tableContents);\n                } else {\n                    console.info(\"Note: no callback, so no update on tableContents:\")\n                    console.log(tableContents);\n                }\n\n            })(); // async\n        }, 50);\n    }\n\n\n\n\n\n    //#region UI HOOKS ****************************************************************************************************\n    //\n    // Here's roughly how you would hook up from an HTML page to this code.\n    // It will handle clicks and drops, both \"file\" and \"directory\" zones.\n    //\n    // \"handleEvent()\" handles all such events. It will call\n    // scanItemList() and scanFileList() on all the data, then\n    // the above \"afteOperation()\"\n\n    // const fileDropZone = document.getElementById('fileDropZone');\n    // const directoryDropZone = document.getElementById('directoryDropZone');\n    // SBFileHelperReady.then(() => {\n    //     fileDropZone.addEventListener('drop', SBFileHelper.handleFileDrop);\n    //     directoryDropZone.addEventListener('drop', SBFileHelper.handleDirectoryDrop);\n\n    //     fileDropZone.addEventListener('click', SBFileHelper.handleFileClick);\n    //     directoryDropZone.addEventListener('click', SBFileHelper.handleDirectoryClick);\n    // }\n\n    handleFileDrop(event: DragEvent, callback: ((table: any[]) => void)) {\n        event.preventDefault();\n        return this.handleEvent(event, callback, \"[file drop]\");\n    }\n\n    handleDirectoryDrop(event: DragEvent, callback: ((table: any[]) => void)) {\n        event.preventDefault();\n        return this.handleEvent(event, callback, \"[directory drop]\");\n    }\n\n    handleFileClick(event: Event, callback: ((table: any[]) => void)) {\n        event.preventDefault();\n        const fileInput = document.createElement('input');\n        fileInput.type = 'file';\n        fileInput.multiple = true;\n        fileInput.accept = '*/*';\n        fileInput.addEventListener('change', (event) => {\n            this.handleEvent(event, callback, \"[file click]\");\n        });\n        fileInput.click();\n    }\n\n    handleDirectoryClick(event: Event, callback: ((table: any[]) => void)) {\n        event.preventDefault();\n        const fileInput = document.createElement('input');\n        fileInput.type = 'file';\n        fileInput.multiple = true;\n        fileInput.webkitdirectory = true;\n        fileInput.accept = '*/*';\n        fileInput.addEventListener('change', (event) => {\n            this.handleEvent(event, callback, \"[directory click]\")\n        });\n        fileInput.click();\n    }\n\n    // this gets both input type=file and drag and drop\n    async handleEvent(event: Event | DragEvent, callback: ((table: any[]) => void), _context: any) {\n        let files, items;\n        if ((event as DragEvent).dataTransfer) {\n            files = (event as DragEvent).dataTransfer!.files;\n            items = (event as DragEvent).dataTransfer!.items;\n        } else if (event.target) {\n            if ((event.target as any as CustomEventTarget).files)\n                files = (event.target as any as CustomEventTarget).files;\n            if ((event.target as any as CustomEventTarget).items)\n                items = (event.target as any as CustomEventTarget).items;\n        } else {\n            console.log(\"Unknown event type (should not happen):\");\n            console.log(event);\n            return;\n        }\n        if (DEBUG3) {\n            console.log(\"Received items (DataTransferItemList):\")\n            console.log(items);\n            console.log(\"Received files:\")\n            console.log(files);\n        }\n        this.scanItemList(items);\n        this.scanFileList(files);\n        this.afterOperation(callback);\n    }\n\n}", "// (c) 2023 384 (tm)\n\n// thank you Thomas Lochmatter, thomas.lochmatter@viereck.ch, for jpeg ref code\n\n// takes a JPEG image and extracts and returns key meta data\nexport function readJpegHeader(bytes: Uint8Array) {\t\n    console.log(\"==== loaded SBImageHelper lib version 0.0.10 ====\");\n    // Check for valid JPEG header (null terminated JFIF)\n    let position = 0\n    if (bytes[position ++] != 0xff) return\n    if (bytes[position ++] != 0xd8) return\n    // Go through all markers\n    const dv = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength)\n    // Marker format:\n    //   0xff, marker type, length in bytes\n    // Marker types are in the range 0xc0-0xfe\n    //   Skip markers that are not SOFn (Start of Frame)\n    //   SOFn markers have a length of 7-11 bytes\n    //   SOFn markers are either 0xc0 (baseline DCT) or 0xc2 (progressive DCT)\n    //   SOFn markers have 1 byte for the type, 2 bytes for the length\n    //   (1 byte for the precision, 2 for the height, and 2 for the width)\n    //   The rest of the data in the marker is variable\n    while (position + 4 < bytes.byteLength) {\n      // Check that it's a valid marker\n      // FF00 is a special marker used to stuff extra bits into the stream\n      // (it's a valid marker, but it's not actually a marker)\n      if (bytes[position ++] != 0xff)\n        continue\n      // Get the marker type\n      const type = bytes[position ++]\n      if (bytes[position] == 0xff)\n        // FF00 was found, so skip it\n        continue\n      const length = dv.getUint16(position, false) // big endian\n      if (position + length > bytes.byteLength) return null\n      if (length >= 7 && (type == 0xc0 || type == 0xc2)) {\n        const data = {\n            progressive: type == 0xc2,\n            bitDepth: bytes[position + 2],\n            height: dv.getUint16(position + 3, false),\n            width: dv.getUint16(position + 5, false),\n            components: bytes[position + 7]\n        }\n        return data\n      }\n      position += length\n    }\n    return null\n  }\n", "\n\nimport { FileHelper } from \"./files\";\n\nexport class FileTable {\n    SBFileHelper: FileHelper;\n\n    tableRows = new Map();\n    table: Element; // = document.querySelector('#myTable tbody');\n    // container: Element; // = document.querySelector(`#${location}`);\n    expandAll: HTMLElement; // = document.getElementById(\"expandAll\")\n    collapseAll: HTMLElement; // = document.getElementById(\"collapseAll\")\n    uploadNewSetButton: HTMLElement; // = document.getElementById(\"uploadNewSetButton\")\n    tableFileInfo: HTMLElement; // = document.getElementById(\"table-file-info\");\n    hasChanges = false;\n\n    knownShards: Map<any, any> // = new Map();\n\n    rowClicked: ((metaData: any) => void) | null = null;\n    previewFile: (path: string, hash: string, type: string) => void;\n    findFileDetails: (hash: string) => any;\n\n    constructor(\n        SBFileHelper: FileHelper,\n        table: Element,\n        expandAll: HTMLElement,\n        collapseAll: HTMLElement,\n        uploadNewSetButton: HTMLElement,\n        tableFileInfo: HTMLElement,\n        knownShards: Map<any, any>,\n        rowClicked: (metaData: any) => void | null,\n        previewFile: (path: string, hash: string, type: string) => void,\n        findFileDetails: (hash: string) => any\n    ) {\n        if (!SBFileHelper) throw new Error(\"SBFileHelper is null\")\n        this.SBFileHelper = SBFileHelper;\n\n        if (!previewFile) throw new Error(\"previewFile is null\")\n        this.previewFile = previewFile;\n\n        if (!findFileDetails) throw new Error(\"findFileDetails is null\")\n        this.findFileDetails = findFileDetails;\n\n        if (!tableFileInfo) throw new Error(\"tableFileInfo is null\")\n        this.tableFileInfo = tableFileInfo;\n\n        if (!uploadNewSetButton) throw new Error(\"uploadNewSetButton is null\")\n        this.uploadNewSetButton = uploadNewSetButton;\n\n        if (!knownShards) throw new Error(\"knownShards is null\")\n        this.knownShards = knownShards;\n\n        if (rowClicked) this.rowClicked = rowClicked;\n\n        if (!table) throw new Error(\"table is null\")\n        if (!expandAll) throw new Error(\"expandAll is null\")\n        if (!collapseAll) throw new Error(\"collapseAll is null\")\n\n        this.table = table;\n        this.expandAll = expandAll;\n        this.collapseAll = collapseAll;\n    }\n\n    addRow(lexicalOrder: any, rowContents: any, metaData: any) {\n        this.tableRows.set(lexicalOrder, { rowContents, metaData });\n\n        // Sort map keys in lexical order\n        this.tableRows = new Map([...this.tableRows.entries()].sort());\n\n        // Iterate over sorted map and add rows to the table\n        for (let [_key, value] of this.tableRows) {\n            let row = document.createElement('tr');\n            let cell = document.createElement('td');\n            cell.textContent = value.rowContents;\n\n            // Attach click handler with metaData\n            if (this.rowClicked) {\n                cell.addEventListener('click', () => {\n                    this.expandAll.style.display = \"flex\";\n                    this.collapseAll.style.display = \"flex\";\n                    this.rowClicked!(value.metaData)\n                });\n            }\n\n            row.appendChild(cell);\n            this.table.appendChild(row);\n        }\n    }\n\n    // note: 'editable' also doubles as 'omit' when null\n    // first column is pretty much hard coded to expect a path\n    renderTable(data: any[], headings: any[], editable: string | any[], location: any, onSave: any, actionButtons = true) {\n        // console.log(\"Will render:\")\n        // console.log(data)\n        let originalData = JSON.parse(JSON.stringify(data));\n        let numberColumns = headings.length;\n        if (numberColumns !== editable.length) {\n            console.error(\"Number of headings and editable columns must match\")\n            return\n        }\n        let slatedForDeletion: any[] = [];\n        const table = document.createElement(\"table\");\n        const thead = document.createElement(\"thead\");\n        const headingRow = document.createElement(\"tr\");\n\n        const saveBtn = document.createElement(\"button\");\n        const cancelBtn = document.createElement(\"button\");\n\n        const container = document.querySelector(`#${location}`)!;\n\n        i = 0;\n        let propertyNames: string[] = [];\n        headings.forEach((heading: { label: string | null; key: any; }) => {\n            if (editable[i++] !== null) {\n                const headingCell = document.createElement(\"th\");\n                headingCell.textContent = heading.label;\n                propertyNames.push(heading.key);\n                headingRow.appendChild(headingCell);\n            }\n        });\n        thead.appendChild(headingRow);\n        table.appendChild(thead);\n\n        const tbody = document.createElement(\"tbody\");\n        let lastPath = '';\n        data.forEach((row: { [x: string]: string | null; path?: any; uniqueShardId?: any; type?: any; name?: any; }, index: any) => {\n            // Count the number of slashes in the path\n            const PATH_INDENT = 12;\n            const depthPad = PATH_INDENT * (2 / 3) + (((row?.path?.match(/\\//g) || []).length - 1)) * PATH_INDENT;\n\n\n            if (row.path !== lastPath) {\n                lastPath = row.path;\n                const tableRow = document.createElement(\"tr\");\n                const tableData = document.createElement(\"td\");\n                tableData.colSpan = numberColumns;\n                tableData.textContent = row.path;\n                tableData.style.paddingLeft = depthPad + \"px\";\n                tableRow.appendChild(tableData);\n                tableRow.classList.add(\"folder\");\n                tableRow.dataset.name = row.path;\n                tbody.appendChild(tableRow);\n            }\n\n            const tableRow = document.createElement(\"tr\");\n            tableRow.classList.add(\"file\");\n            tableRow.dataset.filePath = row.path;\n\n            if (numberColumns > Object.keys(row).length) {\n                // having extra (hidden) columns is fine\n                console.error(\"Not enough columns in table for row: \", index)\n                return\n            }\n\n            Object.keys(row).forEach((key, index) => {\n                if (!propertyNames.includes(key))\n                    return;\n\n                if (editable[index] !== null) {\n                    const tableData = document.createElement(\"td\");\n                    if (index == 0) {\n                        tableData.style.paddingLeft = depthPad + PATH_INDENT + \"px\";\n                    }\n                    if (editable[index]) {\n                        const input = document.createElement(\"input\");\n                        input.type = \"text\";\n                        input.value = row[key]!;\n                        input.addEventListener(\"input\", () => {\n                            row[key] = input.value;\n                        });\n                        tableData.appendChild(input);\n                    } else {\n                        if (editable[index] !== null) // null means skip\n                            if ((key === \"type\") && (row[key] !== '')) {\n                                tableData.dataset.hash = row.uniqueShardId;\n                                tableData.dataset.type = row.type;\n                                tableData.dataset.path = row.path;\n                                tableData.dataset.name = row.name;\n                                tableData.innerHTML += row[key].slice(0, 20) + \" <span class='preview-file-icon'>\uD83D\uDD0D\uD83D\uDC40</span>\";\n                            } else {\n                                tableData.textContent = row[key];\n                            }\n                    }\n                    tableRow.appendChild(tableData);\n                }\n            });\n\n            if (actionButtons) {\n                const deleteButton = document.createElement(\"button\");\n                deleteButton.textContent = \"Remove\";\n                deleteButton.addEventListener(\"click\", () => {\n                    // document.getElementById(\"uploadNewSetButton\")!.setAttribute(\"disabled\", \"true\");\n                    this.uploadNewSetButton.setAttribute(\"disabled\", \"true\");\n                    tableRow.classList.add(\"slated-for-deletion\");\n                    this.hasChanges = true;\n                    saveBtn.removeAttribute(\"disabled\");\n                    cancelBtn.removeAttribute(\"disabled\");\n                    deleteButton.setAttribute(\"disabled\", \"true\");\n                    console.log(\"slated for deletion: \", index)\n                    slatedForDeletion.push(row.uniqueShardId)\n                });\n                const actionData = document.createElement(\"td\");\n                actionData.appendChild(deleteButton);\n                tableRow.appendChild(actionData);\n                if (tableRow.classList.contains(\"slated-for-deletion\")) {\n                    tableRow.classList.remove(\"slated-for-deletion\");\n                }\n            }\n            tbody.appendChild(tableRow);\n        });\n        table.appendChild(tbody);\n\n        if (actionButtons) {\n            saveBtn.setAttribute(\"id\", \"saveBtn\")\n            saveBtn.textContent = \"Save\";\n            saveBtn.addEventListener(\"click\", () => {\n                // document.getElementById(\"uploadNewSetButton\")!.removeAttribute(\"disabled\");\n                this.uploadNewSetButton.removeAttribute(\"disabled\");\n                // data = data.filter(row => !document.querySelector(`tr[data-index=\"${data.indexOf(row)}\"]`).classList.contains(\"slated-for-deletion\"));\n                // data = data.filter(row => !row.classList.contains(\"slated-for-deletion\"));\n                console.log(\"hit save button. original:\")\n                console.log(originalData)\n                data.forEach((item: { uniqueShardId: any; }, index: /* string | */ number) => {\n                    if (slatedForDeletion.includes(item.uniqueShardId)) {\n                        console.log(this.SBFileHelper)\n                        console.log(this.SBFileHelper.finalFileList)\n                        console.log(data[index])\n                        this.SBFileHelper.finalFileList.delete(data[index].fullName)\n                        this.SBFileHelper.globalBufferMap.delete(data[index].uniqueShardId)\n                        console.log(\"deleting: \", index)\n                        console.log(data[index])\n                        delete data[index];\n                    }\n                });\n                console.log(\"new:\")\n                console.log(data)\n                // onSave(data);\n                // originalData = JSON.parse(JSON.stringify(data));\n                this.hasChanges = false;\n                saveBtn.setAttribute(\"disabled\", \"true\");\n                cancelBtn.setAttribute(\"disabled\", \"true\");\n\n                this.renderTable(data, headings, editable, location, onSave);\n            });\n            table.appendChild(saveBtn);\n\n            cancelBtn.setAttribute(\"id\", \"cancelBtn\")\n            cancelBtn.textContent = \"Cancel\";\n            cancelBtn.addEventListener(\"click\", () => {\n                // document.getElementById(\"uploadNewSetButton\")!.removeAttribute(\"disabled\");\n                this.uploadNewSetButton.removeAttribute(\"disabled\");\n                // data = JSON.parse(JSON.stringify(originalData));\n                this.hasChanges = false;\n                saveBtn.setAttribute(\"disabled\", \"true\");\n                cancelBtn.setAttribute(\"disabled\", \"true\");\n                console.log(\"hit cancel button. original:\", data)\n                this.renderTable(originalData, headings, editable, location, onSave);\n            });\n\n            if (this.hasChanges) {\n                saveBtn.removeAttribute(\"disabled\");\n                cancelBtn.removeAttribute(\"disabled\");\n            } else {\n                saveBtn.setAttribute(\"disabled\", \"true\");\n                cancelBtn.setAttribute(\"disabled\", \"true\");\n            }\n            table.appendChild(cancelBtn);\n        }\n        container.innerHTML = \"\";\n        container.appendChild(table);\n\n        function toggleChildren(path: string) {\n            var children = document.querySelectorAll<HTMLElement>('tr[data-file-path=\"' + path + '\"]');\n            for (var j = 0; j < children.length; j++) {\n                children[j].style.display = (children[j].style.display == 'none') ? '' : 'none';\n            }\n        }\n\n        var nameCells = document.querySelectorAll('tr.folder');\n        // console.log(nameCells)\n        for (var i = 0; i < nameCells.length; i++) {\n            nameCells[i].addEventListener('click', function (this: HTMLTableRowElement) {\n                // copilot: \"this\" referes to the event target for the event listener for the \"click\" event\n                // how do i tell typescript what \"this\" is referring to?\n                if (this.dataset.name) {\n                    toggleChildren(this.dataset.name);\n                } else {\n                    console.error(\"this.dataset.name is null\")\n                }\n\n                // var children = document.querySelectorAll('tr[data-file-path=\"' + this.dataset.name + '\"]');\n                // console.log(\"click on\")\n                // console.log(this)\n                // console.log(this.dataset.name)\n                // console.log(\"found these children\")\n                // console.log(children)\n                // for (var j = 0; j < children.length; j++) {\n                //     children[j].style.display = (children[j].style.display == 'none') ? '' : 'none';\n                // }\n            });\n        }\n\n        // add an event listener for \"click\" on any of the preview-file-icon elements\n        // we want to pass it the \"type\" and \"hash\" that will be in the \"data\" attribute of the element\n        // and then we want to call the \"previewFile\" function with those arguments\n        // we can do this by using the \"addEventListener\" function\n\n        document.querySelectorAll(\".preview-file-icon\").forEach((element) => {\n            element.addEventListener(\"click\", (event) => {\n                if (!(event.target instanceof HTMLElement)) throw new Error(\"event.target is not an HTMLElement\");\n                const path = (<HTMLElement>event.target).parentElement?.dataset.path;\n                const name = (<HTMLElement>event.target).parentElement?.dataset.name;\n                const type = (<HTMLElement>event.target).parentElement?.dataset.type;\n                const hash = (<HTMLElement>event.target).parentElement?.dataset.hash;\n                const file = this.findFileDetails(hash!);\n                console.log(\"file\", file);\n                if (!file) throw new Error(\"file not found in fileSetMap (?) ... new issue\");\n                // const tableFileInfo = document.getElementById(\"table-file-info\");\n                if (this.tableFileInfo) {\n                    this.tableFileInfo.innerHTML = \"\";\n                    const theader = document.createElement(\"thead\");\n                    const tbody = document.createElement(\"tbody\");\n                    const shard = /* web384.DataRoom. */ this.knownShards.get(hash);\n                    const details = {\n                        name: file.name,\n                        size: file.size,\n                        type: file.type,\n                        lastModified: file.lastModified,\n                        SBDetails: null as string | null,\n                    }\n                    if (shard) {\n                        details.SBDetails = `${shard.id}.${shard.verification}`\n                    }\n                    for (const [key, value] of Object.entries(details)) {\n                        const tr = document.createElement(\"tr\");\n                        const th = document.createElement(\"th\");\n                        th.textContent = key;\n                        const td = document.createElement(\"td\");\n                        td.textContent = value;\n                        tr.appendChild(th);\n                        tr.appendChild(td);\n                        tbody.appendChild(tr);\n                    }\n                    this.tableFileInfo.appendChild(theader);\n                    this.tableFileInfo.appendChild(tbody);\n\n                    this.previewFile(path! + name, hash!, type!);\n                }\n\n                // for (const [key, value] of Object.entries(details)) {\n                //     const tr = document.createElement(\"tr\");\n                //     const th = document.createElement(\"th\");\n                //     th.textContent = key;\n                //     const td = document.createElement(\"td\");\n                //     td.textContent = value;\n                //     tr.appendChild(th);\n                //     tr.appendChild(td);\n                //     tbody.appendChild(tr);\n                // }\n                // tableFileInfo!.appendChild(theader);\n                // tableFileInfo!.appendChild(tbody);\n                // this.previewFile(path + name, hash, type);\n            });\n        });\n\n    }\n    \n}\n// window.renderTable = renderTable;\n\n", "// (c) 2023 384 (tm)\n\nimport { FileHelper } from './files';\nimport { readJpegHeader } from './images';\nimport { FileTable } from './fileTable';\nimport { SBServiceWorker } from '../boot/serviceWorker';\n\nexport const browser = {\n    files: FileHelper,\n    fileTable: FileTable,\n    serviceWorker: SBServiceWorker,\n    images: {\n        readJpegHeader: readJpegHeader\n    },\n};\n", "// (c) 2023 384 (tm)\n\nexport enum MessageType {\n    MSG_SIMPLE_CHAT = \"9WbWE53HnRy6\", // simple chat message (just text)\n\n    // shard/file sharing\n    MSG_FILE_SET = \"FEm4a3EW0cn1\", // upon sharing \"set\" of files (only meta data)\n    MSG_NEW_SHARD = \"eUp2cR96dH3E\", // sent every time a shard/file is seen that's new\n\n    // user private data\n    MSG_USER_PRIVATE_DATA = \"R0FR1LWRRddE\", // any private (meta whatever) data a user wants to record\n\n    // communication around user identities\n    MSG_NEW_USER_KEY = \"20m0r6rFedac\", // when users lock in their key they send this\n    MSG_CLAIM_PUBLIC_KEY = \"8pc2FamHdrhW\", // when a user claims a public key, they send this\n\n    // 'parent' channel communication\n    MSG_CONTACT_ANNOUNCEMENT = \"mEe6d97kEbhR\", // Announces a new contact based on the configuration and new public key in main channel\n    MSG_REQUEST_MAIN = \"1pE8de4bEWRE\", // sent to request the main channel (which is another one)\n    MSG_PROVIDE_MAIN = \"Ea66FnFE9f5F\", // reply to request; the provision needs to be encrypted for the recipient\n}\n\nexport const MessageTypeList = [\n    MessageType.MSG_SIMPLE_CHAT,\n    MessageType.MSG_FILE_SET,\n    MessageType.MSG_NEW_SHARD,\n    MessageType.MSG_NEW_USER_KEY,\n    MessageType.MSG_USER_PRIVATE_DATA,\n    MessageType.MSG_CLAIM_PUBLIC_KEY,\n    MessageType.MSG_REQUEST_MAIN,\n    MessageType.MSG_PROVIDE_MAIN,\n    MessageType.MSG_CONTACT_ANNOUNCEMENT,\n];\n", "// (c) 2023 384 (tm)\n\nimport { MessageType, MessageTypeList } from './messageTypes';\n\nexport const channel = {\n    types: MessageType,\n    typeList: MessageTypeList,\n};\n", "// (c) 2023 384 (tm)\n\nimport {\n    Channel,\n    SBMessage,\n    Snackabra,\n    SBCrypto,\n    SB384,\n    version,\n    ChannelEndpoint,\n    ChannelSocket,\n    arrayBufferToBase64,\n    compareBuffers\n} from './snackabra';\n\nexport const NewSB = {\n    Channel,\n    SBMessage,\n    Snackabra,\n    SBCrypto,\n    SB384,\n    version,\n    ChannelEndpoint,\n    ChannelSocket,\n    arrayBufferToBase64,\n    compareBuffers\n}\n", "// (c) 2023 384 (tm)\n\n// \"Main\" 384 library\n\nexport const version = '2.0.0-alpha.1'\n\nexport { boot } from './boot/index'\nexport { crypto } from './crypto/index'\nexport { strongphrase } from './strongphrase/index'\nexport { utils } from './utils/index'\nexport { file } from './file/index'\nexport { browser } from './browser/index'\nexport { channel } from './channel/index'\n\nexport { bootstrapLoaderClass } from './boot/loaderLoader' // also in boot\n\nexport { NewSB } from './snackabra/index'\n\nimport { \n    ChannelMessage, \n    SBServer, \n    ChannelEndpoint, \n    SBChannelHandle, \n    ChannelSocket, \n    SB384,\n    Interfaces,\n    SBPayload\n} from './snackabra/snackabra'\n\nimport { SBFileSystem } from './file/system'\n\n// we need to do this workaround for the dts bundler we are using:\n// this will provide something in the \"global\" namespace through\n// which we can export types.\nexport type ChannelMessageTypeAlias = ChannelMessage\nexport type SBServerTypeAlias = SBServer\nexport type ChannelEndpointTypeAlias = ChannelEndpoint\nexport type SBChannelHandleTypeAlias = SBChannelHandle\nexport type ChannelSocketTypeAlias = ChannelSocket\nexport type SB384TypeAlias = SB384\n// export type SBObjectHandleTypeAlias = Interfaces.SBObjectHandle // this one is special\nexport type SBObjectHandleTypeAlias = Interfaces.SBObjectHandle_v1 | Interfaces.SBObjectHandle_v2\nexport type SBPayloadAlias = SBPayload\n\nexport type SBFileSystemTypeAlias = SBFileSystem\n\nexport namespace SnackabraTypes {\n    export type ChannelMessage = ChannelMessageTypeAlias\n    export type SBServer = SBServerTypeAlias\n    export type ChannelEndpoint = ChannelEndpointTypeAlias\n    export type SBChannelHandle = SBChannelHandleTypeAlias\n    export type ChannelSocket = ChannelSocketTypeAlias\n    export type SB384 = SB384TypeAlias\n    export type SBObjectHandle = SBObjectHandleTypeAlias // this one is special\n    export type SBPayload = SBPayloadAlias\n}\n\nexport namespace SB384Types {\n    export type SBFileSystem = SBFileSystemTypeAlias\n}\n\nexport { Snackabra } from './snackabra/snackabra'\n"],
  "mappings": "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",
  "names": ["base64ToArrayBuffer", "b64lookup", "urlLookup", "revLookup", "CODE", "CODE_B64", "CODE_URL", "PAD", "MAX_CHUNK_LENGTH", "getLens", "tripletToBase64", "encodeChunk", "bs2dv", "arrayBufferToBase64", "KeyPrefix", "base64ToArrayBuffer", "arrayBufferToBase64", "channel", "m", "message", "msg", "version", "data", "result", "DEBUG", "arrayBufferToBase64", "extractPayload", "baseDomain", "subdomain", "base62", "base62Regex", "base62", "base62Regex", "crypto", "DEBUG2", "DEBUG2", "DEBUG", "DEBUG2", "DEBUG3", "version", "propertyList", "file", "error", "resolve", "crypto", "event", "tableRow", "index", "file", "tbody", "MessageType", "arrayBufferToBase64", "version"]
}
